{"version":3,"file":"static/js/98.50e3ab78.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/core/Bounds.js","basic-examples/bounds-and-makedefault/Example.tsx","../node_modules/three-stdlib/shaders/HorizontalBlurShader.js","../node_modules/three-stdlib/shaders/VerticalBlurShader.js","../node_modules/@react-three/drei/core/ContactShadows.js"],"sourcesContent":["import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst isOrthographic = def => def && def.isOrthographicCamera;\n\nconst isBox3 = def => def && def.isBox3;\n\nconst context = /*#__PURE__*/React.createContext(null);\nfunction Bounds({\n  children,\n  damping = 6,\n  fit,\n  clip,\n  observe,\n  margin = 1.2,\n  eps = 0.01,\n  onFit\n}) {\n  const ref = React.useRef(null);\n  const {\n    camera,\n    invalidate,\n    size,\n    controls: controlsImpl\n  } = useThree();\n  const controls = controlsImpl;\n  const onFitRef = React.useRef(onFit);\n  onFitRef.current = onFit;\n\n  function equals(a, b) {\n    return Math.abs(a.x - b.x) < eps && Math.abs(a.y - b.y) < eps && Math.abs(a.z - b.z) < eps;\n  }\n\n  function damp(v, t, lambda, delta) {\n    v.x = THREE.MathUtils.damp(v.x, t.x, lambda, delta);\n    v.y = THREE.MathUtils.damp(v.y, t.y, lambda, delta);\n    v.z = THREE.MathUtils.damp(v.z, t.z, lambda, delta);\n  }\n\n  const [current] = React.useState(() => ({\n    animating: false,\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [goal] = React.useState(() => ({\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [box] = React.useState(() => new THREE.Box3());\n  const api = React.useMemo(() => {\n    function getSize() {\n      const size = box.getSize(new THREE.Vector3());\n      const center = box.getCenter(new THREE.Vector3());\n      const maxSize = Math.max(size.x, size.y, size.z);\n      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        box,\n        size,\n        center,\n        distance\n      };\n    }\n\n    return {\n      getSize,\n\n      refresh(object) {\n        if (isBox3(object)) box.copy(object);else {\n          const target = object || ref.current;\n          target.updateWorldMatrix(true, true);\n          box.setFromObject(target);\n        }\n\n        if (box.isEmpty()) {\n          const max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n\n        if ((controls == null ? void 0 : controls.constructor.name) === 'OrthographicTrackballControls') {\n          // Put camera on a sphere along which it should moves\n          const {\n            distance\n          } = getSize();\n          const direction = camera.position.clone().sub(controls.target).normalize().multiplyScalar(distance);\n          const newPos = controls.target.clone().add(direction);\n          camera.position.copy(newPos);\n        }\n\n        return this;\n      },\n\n      clip() {\n        const {\n          distance\n        } = getSize();\n        if (controls) controls.maxDistance = distance * 10;\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) controls.update();\n        invalidate();\n        return this;\n      },\n\n      fit() {\n        current.camera.copy(camera.position);\n        if (controls) current.focus.copy(controls.target);\n        const {\n          center,\n          distance\n        } = getSize();\n        const direction = center.clone().sub(camera.position).normalize().multiplyScalar(distance);\n        goal.camera.copy(center).sub(direction);\n        goal.focus.copy(center);\n\n        if (isOrthographic(camera)) {\n          current.zoom = camera.zoom;\n          let maxHeight = 0,\n              maxWidth = 0;\n          const vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)]; // Transform the center and each corner to camera space\n\n          center.applyMatrix4(camera.matrixWorldInverse);\n\n          for (const v of vertices) {\n            v.applyMatrix4(camera.matrixWorldInverse);\n            maxHeight = Math.max(maxHeight, Math.abs(v.y - center.y));\n            maxWidth = Math.max(maxWidth, Math.abs(v.x - center.x));\n          }\n\n          maxHeight *= 2;\n          maxWidth *= 2;\n          const zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n          const zoomForWidth = (camera.right - camera.left) / maxWidth;\n          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n\n          if (!damping) {\n            camera.zoom = goal.zoom;\n            camera.updateProjectionMatrix();\n          }\n        }\n\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.copy(goal.camera);\n          camera.lookAt(goal.focus);\n\n          if (controls) {\n            controls.target.copy(goal.focus);\n            controls.update();\n          }\n        }\n\n        if (onFitRef.current) onFitRef.current(this.getSize());\n        invalidate();\n        return this;\n      }\n\n    };\n  }, [box, camera, controls, margin, damping, invalidate]);\n  React.useLayoutEffect(() => {\n    if (controls) {\n      // Try to prevent drag hijacking\n      const callback = () => current.animating = false;\n\n      controls.addEventListener('start', callback);\n      return () => controls.removeEventListener('start', callback);\n    }\n  }, [controls]); // Scale pointer on window resize\n\n  const count = React.useRef(0);\n  React.useLayoutEffect(() => {\n    if (observe || count.current++ === 0) {\n      api.refresh();\n      if (fit) api.fit();\n      if (clip) api.clip();\n    }\n  }, [size, clip, fit, observe, camera, controls]);\n  useFrame((state, delta) => {\n    if (current.animating) {\n      damp(current.focus, goal.focus, damping, delta);\n      damp(current.camera, goal.camera, damping, delta);\n      current.zoom = THREE.MathUtils.damp(current.zoom, goal.zoom, damping, delta);\n      camera.position.copy(current.camera);\n\n      if (isOrthographic(camera)) {\n        camera.zoom = current.zoom;\n        camera.updateProjectionMatrix();\n      }\n\n      if (!controls) {\n        camera.lookAt(current.focus);\n      } else {\n        controls.target.copy(current.focus);\n        controls.update();\n      }\n\n      invalidate();\n      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps)) return;\n      if (!isOrthographic(camera) && !equals(current.camera, goal.camera)) return;\n      if (controls && !equals(current.focus, goal.focus)) return;\n      current.animating = false;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\nfunction useBounds() {\n  return React.useContext(context);\n}\n\nexport { Bounds, useBounds };\n","import { Suspense } from \"react\"\nimport { Canvas } from \"@react-three/fiber\"\nimport { Bounds, ContactShadows, OrbitControls, useBounds, useGLTF } from \"@react-three/drei\"\n\nimport model from '../../models/compressed.glb'\n\nconst Model = ({ name, ...props }: any) => {\n  const { nodes } = useGLTF(model) as any\n\n  return (\n    <mesh \n      geometry={nodes[name].geometry}\n      material={nodes[name].material}\n      material-emissive=\"red\"\n      material-roughness={1}\n      {...props}\n      dispose={null}\n    />\n  )\n}\n\n// This component wraps children in a group with a click handler\n// Clicking any object will refresh and fit bounds\nconst SelectToZoom = ({ children }: any) => {\n  const api = useBounds()\n\n  return (\n    <group\n      onClick={e => {\n        e.stopPropagation()\n        e.delta <= 2 && api.refresh(e.object).fit()\n      }}\n      onPointerMissed={e => (\n        e.button === 0 && api.refresh().fit()\n      )}>\n      { children }\n    </group>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children } \n      <Canvas camera={{ position: [0, -10, 80], fov: 50}} dpr={[1, 2]}>\n        <spotLight position={[-100, -100, -100]} intensity={0.2} angle={0.3} penumbra={1} />\n        <hemisphereLight color=\"white\" groundColor=\"#ff0f00\" position={[-7, 25, 13]} intensity={1} />\n        <Suspense fallback={null}>\n          <Bounds fit clip margin={1.2}>\n            <SelectToZoom>\n              <Model name=\"Curly\" position={[1, -11, -20]} rotation={[2, 0, 0]} />\n              <Model name=\"DNA\" position={[20, 0, -17]} rotation={[1, 1, -2]} />\n              <Model name=\"Headphones\" position={[20, 2, 4]} rotation={[1, 0, -1]} />\n              <Model name=\"Notebook\" position={[-21, -15, -13]} rotation={[2, 0, 1]} />\n              <Model name=\"Rocket003\" position={[18, 15, -25]} rotation={[1, 1, 0]} />\n              <Model name=\"Roundcube001\" position={[-25, -4, 5]} rotation={[1, 0, 0]} scale={0.5} />\n              <Model name=\"Table\" position={[1, -4, -28]} rotation={[1, 0, -1]} scale={0.5} />\n              <Model name=\"VR_Headset\" position={[7, -15, 28]} rotation={[1, 0, -1]} scale={5} />\n              <Model name=\"Zeppelin\" position={[-20, 10, 10]} rotation={[3, -1, 3]} scale={0.005} />\n            </SelectToZoom>\n          </Bounds>\n          <ContactShadows rotation-x={Math.PI / 2} position={[0, -35, 0]} opacity={0.2} width={200} height={200} blur={1} far={50} />\n        </Suspense>\n        <OrbitControls makeDefault minPolarAngle={0} maxPolarAngle={Math.PI / 1.75} />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst HorizontalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    h: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n      varying vec2 vUv;\n\n      void main() {\n\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n      }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n    uniform sampler2D tDiffuse;\n    uniform float h;\n\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvec4 sum = vec4( 0.0 );\n\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\n\n    \tgl_FragColor = sum;\n\n    }\n  `\n};\n\nexport { HorizontalBlurShader };\n","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst VerticalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    v: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n    varying vec2 vUv;\n\n    void main() {\n\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n    }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n\n  uniform sampler2D tDiffuse;\n  uniform float v;\n\n  varying vec2 vUv;\n\n  void main() {\n\n    vec4 sum = vec4( 0.0 );\n\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\n\n    gl_FragColor = sum;\n\n  }\n  `\n};\n\nexport { VerticalBlurShader };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale = 10,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 512,\n  smooth = true,\n  color = '#000000',\n  depthWrite = false,\n  renderOrder,\n  ...props\n}, ref) => {\n  const scene = useThree(state => state.scene);\n  const gl = useThree(state => state.gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color).convertSRGBToLinear()\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale, color]);\n\n  const blurShadows = blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  };\n\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: renderOrder,\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    \"map-encoding\": gl.outputEncoding,\n    transparent: true,\n    opacity: opacity,\n    depthWrite: depthWrite\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n"],"names":["isOrthographic","def","isOrthographicCamera","context","React","Bounds","children","damping","fit","clip","observe","margin","eps","onFit","ref","useThree","camera","invalidate","size","controls","onFitRef","equals","a","b","Math","abs","x","y","z","damp","v","t","lambda","delta","THREE","current","animating","focus","zoom","goal","box","api","getSize","center","getCenter","maxSize","max","fitHeightDistance","atan","PI","fov","fitWidthDistance","aspect","distance","refresh","object","isBox3","copy","target","updateWorldMatrix","setFromObject","isEmpty","position","length","setFromCenterAndSize","constructor","name","direction","clone","sub","normalize","multiplyScalar","newPos","add","this","maxDistance","near","far","updateProjectionMatrix","update","maxHeight","maxWidth","vertices","min","applyMatrix4","matrixWorldInverse","zoomForHeight","top","bottom","zoomForWidth","right","left","lookAt","callback","addEventListener","removeEventListener","count","useFrame","state","Provider","value","Model","props","nodes","useGLTF","model","geometry","material","dispose","SelectToZoom","onClick","e","stopPropagation","onPointerMissed","button","dpr","intensity","angle","penumbra","color","groundColor","Suspense","fallback","rotation","scale","ContactShadows","opacity","width","height","blur","OrbitControls","makeDefault","minPolarAngle","maxPolarAngle","HorizontalBlurShader","uniforms","tDiffuse","h","vertexShader","fragmentShader","VerticalBlurShader","frames","Infinity","resolution","smooth","depthWrite","renderOrder","scene","gl","shadowCamera","Array","isArray","renderTarget","renderTargetBlur","texture","generateMipmaps","planeGeometry","rotateX","blurPlane","depthMaterial","depthTest","onBeforeCompile","shader","ucolor","convertSRGBToLinear","replace","horizontalBlurMaterial","verticalBlurMaterial","blurShadows","visible","setRenderTarget","render","initialBackground","background","initialOverrideMaterial","overrideMaterial","_extends","map","outputEncoding","transparent","args"],"sourceRoot":""}