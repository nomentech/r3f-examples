{"version":3,"file":"static/js/1167.c8058caa.chunk.js","mappings":"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","sources":["basic-examples/staging-and-camerashake/Example.tsx","../node_modules/three-stdlib/shaders/HorizontalBlurShader.js","../node_modules/three-stdlib/shaders/VerticalBlurShader.js","../node_modules/@react-three/drei/core/ContactShadows.js","../node_modules/@react-three/drei/core/Stage.js"],"sourcesContent":["import { Suspense, useEffect } from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport { CameraShake, OrbitControls, Stage, useAnimations, useGLTF } from '@react-three/drei'\n\nimport robot from '../../models/robot-draco.glb'\n\n// Handling controls in Threejs is hard bc 3rd party components that change the camera need to know\n// about controls, or else all changes are overwritten. That is the case for both <Stage and <CameraShake.\n// In latest R3F controls can be set as the default so that other parts of the app may react to it.\n// By setting <OrbitControls makeDefault <Stage and <CameraShake are aware of the controls being used.\n// Should your own components rely on default controls, throughout the three they're available as:\n//   const controls = useThree(state => state.controls)\nuseGLTF.preload(robot)\nconst Model = (props: any) => {\n  const { scene, animations }: any = useGLTF(robot)\n  const { actions }: any = useAnimations(animations, scene)\n  useEffect(() => {\n    actions.Idle.play()\n    scene.traverse((obj: any) => obj.isMesh && (obj.receiveShadow = obj.castShadow = true))\n  }, [actions, scene])\n  return <primitive object={scene} {...props} />\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas shadows camera={{ fov: 50 }} className='bg-[#303035] bg-[url(\"./basic-examples/staging-and-camerashake/view.svg\")] bg-no-repeat bg-contain bg-center z-10'>\n        <Suspense fallback={null}>\n          <Stage contactShadow={{ opacity: 1, blur: 2 }}>\n            <Model />\n          </Stage>\n        </Suspense>\n        <OrbitControls makeDefault />\n        <CameraShake\n          maxYaw={0.1} // Max amount camera can yaw in either direction\n          maxPitch={0.1} // Max amount camera can pitch in either direction\n          maxRoll={0.1} // Max amount camera can roll in either direction\n          yawFrequency={0.1} // Frequency of the the yaw rotation\n          pitchFrequency={0.1} // Frequency of the pitch rotation\n          rollFrequency={0.1} // Frequency of the roll rotation\n          intensity={1} // initial intensity of the shake\n          decayRate={0.65} // if decay = true this is the rate at which intensity will reduce at />\n        />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst HorizontalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    h: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n      varying vec2 vUv;\n\n      void main() {\n\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n      }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n    uniform sampler2D tDiffuse;\n    uniform float h;\n\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvec4 sum = vec4( 0.0 );\n\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\n\n    \tgl_FragColor = sum;\n\n    }\n  `\n};\n\nexport { HorizontalBlurShader };\n","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst VerticalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    v: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n    varying vec2 vUv;\n\n    void main() {\n\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n    }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n\n  uniform sampler2D tDiffuse;\n  uniform float v;\n\n  varying vec2 vUv;\n\n  void main() {\n\n    vec4 sum = vec4( 0.0 );\n\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\n\n    gl_FragColor = sum;\n\n  }\n  `\n};\n\nexport { VerticalBlurShader };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale = 10,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 512,\n  smooth = true,\n  color = '#000000',\n  depthWrite = false,\n  renderOrder,\n  ...props\n}, ref) => {\n  const scene = useThree(state => state.scene);\n  const gl = useThree(state => state.gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color).convertSRGBToLinear()\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale, color]);\n\n  const blurShadows = blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  };\n\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: renderOrder,\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    \"map-encoding\": gl.outputEncoding,\n    transparent: true,\n    opacity: opacity,\n    depthWrite: depthWrite\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Environment } from './Environment.js';\nimport { ContactShadows } from './ContactShadows.js';\n\nconst presets = {\n  rembrandt: {\n    main: [1, 2, 1],\n    fill: [-2, -0.5, -2]\n  },\n  portrait: {\n    main: [-1, 2, 0.5],\n    fill: [-1, 0.5, -1.5]\n  },\n  upfront: {\n    main: [0, 2, 1],\n    fill: [-1, 0.5, -1.5]\n  },\n  soft: {\n    main: [-2, 4, 4],\n    fill: [-1, 0.5, -1.5]\n  }\n};\nfunction Stage({\n  children,\n  controls,\n  shadows = true,\n  adjustCamera = true,\n  environment = 'city',\n  intensity = 1,\n  preset = 'rembrandt',\n  shadowBias = 0,\n  contactShadow = {\n    blur: 2,\n    opacity: 0.5,\n    position: [0, 0, 0]\n  },\n  ...props\n}) {\n  const config = presets[preset];\n  const camera = useThree(state => state.camera); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const defaultControls = useThree(state => state.controls);\n  const outer = React.useRef(null);\n  const inner = React.useRef(null);\n  const [{\n    radius,\n    width,\n    height\n  }, set] = React.useState({\n    radius: 0,\n    width: 0,\n    height: 0\n  });\n  React.useLayoutEffect(() => {\n    outer.current.position.set(0, 0, 0);\n    outer.current.updateWorldMatrix(true, true);\n    const box3 = new THREE.Box3().setFromObject(inner.current);\n    const center = new THREE.Vector3();\n    const sphere = new THREE.Sphere();\n    const height = box3.max.y - box3.min.y;\n    const width = box3.max.x - box3.min.x;\n    box3.getCenter(center);\n    box3.getBoundingSphere(sphere);\n    set({\n      radius: sphere.radius,\n      width,\n      height\n    });\n    outer.current.position.set(-center.x, -center.y + height / 2, -center.z);\n  }, [children]);\n  React.useLayoutEffect(() => {\n    if (adjustCamera) {\n      const y = radius / (height > width ? 1.5 : 2.5);\n      camera.position.set(0, radius * 0.5, radius * 2.5);\n      camera.near = 0.1;\n      camera.far = Math.max(5000, radius * 4);\n      camera.lookAt(0, y, 0);\n      const ctrl = defaultControls || (controls == null ? void 0 : controls.current);\n\n      if (ctrl) {\n        ctrl.target.set(0, y, 0);\n        ctrl.update();\n      }\n    }\n  }, [defaultControls, radius, height, width, adjustCamera]);\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"group\", {\n    ref: outer\n  }, /*#__PURE__*/React.createElement(\"group\", {\n    ref: inner\n  }, children)), contactShadow && /*#__PURE__*/React.createElement(ContactShadows, _extends({\n    scale: radius * 2,\n    far: radius / 2\n  }, contactShadow)), environment && /*#__PURE__*/React.createElement(Environment, {\n    preset: environment\n  }), /*#__PURE__*/React.createElement(\"ambientLight\", {\n    intensity: intensity / 3\n  }), /*#__PURE__*/React.createElement(\"spotLight\", {\n    penumbra: 1,\n    position: [config.main[0] * radius, config.main[1] * radius, config.main[2] * radius],\n    intensity: intensity * 2,\n    castShadow: shadows,\n    \"shadow-bias\": shadowBias\n  }), /*#__PURE__*/React.createElement(\"pointLight\", {\n    position: [config.fill[0] * radius, config.fill[1] * radius, config.fill[2] * radius],\n    intensity: intensity\n  }));\n}\n\nexport { Stage };\n"],"names":["useGLTF","robot","Model","props","scene","animations","actions","useAnimations","useEffect","Idle","play","traverse","obj","isMesh","receiveShadow","castShadow","object","children","shadows","camera","fov","className","Suspense","fallback","Stage","contactShadow","opacity","blur","OrbitControls","makeDefault","CameraShake","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","intensity","decayRate","HorizontalBlurShader","uniforms","tDiffuse","value","h","vertexShader","fragmentShader","VerticalBlurShader","v","ContactShadows","React","ref","scale","frames","Infinity","width","height","far","resolution","smooth","color","depthWrite","renderOrder","useThree","state","gl","shadowCamera","Array","isArray","renderTarget","THREE","renderTargetBlur","texture","generateMipmaps","planeGeometry","rotateX","Math","PI","blurPlane","depthMaterial","depthTest","onBeforeCompile","shader","ucolor","convertSRGBToLinear","replace","horizontalBlurMaterial","verticalBlurMaterial","blurShadows","visible","material","setRenderTarget","render","current","count","useFrame","initialBackground","background","initialOverrideMaterial","overrideMaterial","_extends","geometry","rotation","map","outputEncoding","transparent","args","presets","rembrandt","main","fill","portrait","upfront","soft","controls","adjustCamera","environment","preset","shadowBias","position","config","defaultControls","outer","inner","radius","set","updateWorldMatrix","box3","setFromObject","center","sphere","max","y","min","x","getCenter","getBoundingSphere","z","near","lookAt","ctrl","target","update","Environment","penumbra"],"sourceRoot":""}