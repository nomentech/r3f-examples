{"version":3,"file":"static/js/2411.087c3fc2.chunk.js","mappings":"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","sources":["showcase/lamina-1.x/Example.tsx","../node_modules/@react-three/drei/core/Bounds.js","../node_modules/@react-three/drei/core/Edges.js"],"sourcesContent":["import { useRef } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { Bounds, Edges, useGLTF } from '@react-three/drei'\nimport { useControls } from 'leva'\nimport { Depth, Fresnel, LayerMaterial } from 'lamina'\n\nimport cursor from './cursor.glb'\n\nconst Cursor = (props: any) => {\n  const ref: any = useRef()\n  const { nodes }: any = useGLTF(cursor)\n  const { gradient } = useControls({ gradient: { value: 0.7, min: 0, max: 1 } })\n\n  // Animate gradient\n  useFrame(({ clock }) => {\n    const sin = Math.sin(clock.elapsedTime / 2)\n    const cos = Math.cos(clock.elapsedTime / 2)\n    ref.current.layers[0].origin.set(cos / 2, 0, 0)\n    ref.current.layers[1].origin.set(cos, sin, cos)\n    ref.current.layers[2].origin.set(sin, cos, sin)\n    ref.current.layers[3].origin.set(cos, sin, cos)\n  })\n\n  return (\n    <mesh { ...props } geometry={nodes.Cube.geometry}>\n      <LayerMaterial ref={ref} toneMapped={false}>\n        <Depth colorA=\"#ff0080\" colorB=\"black\" alpha={1} mode=\"normal\" near={0.5 * gradient} far={0.5} origin={[0, 0, 0]} />\n        <Depth colorA=\"blue\" colorB=\"#f7b955\" alpha={1} mode=\"add\" near={2 * gradient} far={2} origin={[0, 1, 1]} />\n        <Depth colorA=\"green\" colorB=\"#f7b955\" alpha={1} mode=\"add\" near={3 * gradient} far={3} origin={[0, 1, -1]} />\n        <Depth colorA=\"white\" colorB=\"red\" alpha={1} mode=\"overlay\" near={1.5 * gradient} far={1.5} origin={[1, -1, -1]} />\n        <Fresnel mode=\"add\" color=\"white\" intensity={0.5} power={1.5} bias={0.05} />\n      </LayerMaterial>\n      <Edges color='white' />\n    </mesh>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas orthographic dpr={[1, 2]} camera={{ position: [0, 0, 10], zoom: 200 }}>\n        <color attach='background' args={['black']} />\n        <group rotation={[Math.PI / 5, -Math.PI / 5, Math.PI / 2]}>\n          <Bounds fit clip observe margin={1.25}>\n            <Cursor scale={[0.5, 1, 0.5]} />\n          </Bounds>\n          <gridHelper args={[10, 40, '#101010', '#050505']} position={[-0.25, 0, 0]} rotation={[0, 0, Math.PI / 2]} />\n        </group>\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst isOrthographic = def => def && def.isOrthographicCamera;\n\nconst isBox3 = def => def && def.isBox3;\n\nconst context = /*#__PURE__*/React.createContext(null);\nfunction Bounds({\n  children,\n  damping = 6,\n  fit,\n  clip,\n  observe,\n  margin = 1.2,\n  eps = 0.01,\n  onFit\n}) {\n  const ref = React.useRef(null);\n  const {\n    camera,\n    invalidate,\n    size,\n    controls: controlsImpl\n  } = useThree();\n  const controls = controlsImpl;\n  const onFitRef = React.useRef(onFit);\n  onFitRef.current = onFit;\n\n  function equals(a, b) {\n    return Math.abs(a.x - b.x) < eps && Math.abs(a.y - b.y) < eps && Math.abs(a.z - b.z) < eps;\n  }\n\n  function damp(v, t, lambda, delta) {\n    v.x = THREE.MathUtils.damp(v.x, t.x, lambda, delta);\n    v.y = THREE.MathUtils.damp(v.y, t.y, lambda, delta);\n    v.z = THREE.MathUtils.damp(v.z, t.z, lambda, delta);\n  }\n\n  const [current] = React.useState(() => ({\n    animating: false,\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [goal] = React.useState(() => ({\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [box] = React.useState(() => new THREE.Box3());\n  const api = React.useMemo(() => {\n    function getSize() {\n      const size = box.getSize(new THREE.Vector3());\n      const center = box.getCenter(new THREE.Vector3());\n      const maxSize = Math.max(size.x, size.y, size.z);\n      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        box,\n        size,\n        center,\n        distance\n      };\n    }\n\n    return {\n      getSize,\n\n      refresh(object) {\n        if (isBox3(object)) box.copy(object);else {\n          const target = object || ref.current;\n          target.updateWorldMatrix(true, true);\n          box.setFromObject(target);\n        }\n\n        if (box.isEmpty()) {\n          const max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n\n        if ((controls == null ? void 0 : controls.constructor.name) === 'OrthographicTrackballControls') {\n          // Put camera on a sphere along which it should moves\n          const {\n            distance\n          } = getSize();\n          const direction = camera.position.clone().sub(controls.target).normalize().multiplyScalar(distance);\n          const newPos = controls.target.clone().add(direction);\n          camera.position.copy(newPos);\n        }\n\n        return this;\n      },\n\n      clip() {\n        const {\n          distance\n        } = getSize();\n        if (controls) controls.maxDistance = distance * 10;\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) controls.update();\n        invalidate();\n        return this;\n      },\n\n      fit() {\n        current.camera.copy(camera.position);\n        if (controls) current.focus.copy(controls.target);\n        const {\n          center,\n          distance\n        } = getSize();\n        const direction = center.clone().sub(camera.position).normalize().multiplyScalar(distance);\n        goal.camera.copy(center).sub(direction);\n        goal.focus.copy(center);\n\n        if (isOrthographic(camera)) {\n          current.zoom = camera.zoom;\n          let maxHeight = 0,\n              maxWidth = 0;\n          const vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)]; // Transform the center and each corner to camera space\n\n          center.applyMatrix4(camera.matrixWorldInverse);\n\n          for (const v of vertices) {\n            v.applyMatrix4(camera.matrixWorldInverse);\n            maxHeight = Math.max(maxHeight, Math.abs(v.y - center.y));\n            maxWidth = Math.max(maxWidth, Math.abs(v.x - center.x));\n          }\n\n          maxHeight *= 2;\n          maxWidth *= 2;\n          const zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n          const zoomForWidth = (camera.right - camera.left) / maxWidth;\n          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n\n          if (!damping) {\n            camera.zoom = goal.zoom;\n            camera.updateProjectionMatrix();\n          }\n        }\n\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.copy(goal.camera);\n          camera.lookAt(goal.focus);\n\n          if (controls) {\n            controls.target.copy(goal.focus);\n            controls.update();\n          }\n        }\n\n        if (onFitRef.current) onFitRef.current(this.getSize());\n        invalidate();\n        return this;\n      }\n\n    };\n  }, [box, camera, controls, margin, damping, invalidate]);\n  React.useLayoutEffect(() => {\n    if (controls) {\n      // Try to prevent drag hijacking\n      const callback = () => current.animating = false;\n\n      controls.addEventListener('start', callback);\n      return () => controls.removeEventListener('start', callback);\n    }\n  }, [controls]); // Scale pointer on window resize\n\n  const count = React.useRef(0);\n  React.useLayoutEffect(() => {\n    if (observe || count.current++ === 0) {\n      api.refresh();\n      if (fit) api.fit();\n      if (clip) api.clip();\n    }\n  }, [size, clip, fit, observe, camera, controls]);\n  useFrame((state, delta) => {\n    if (current.animating) {\n      damp(current.focus, goal.focus, damping, delta);\n      damp(current.camera, goal.camera, damping, delta);\n      current.zoom = THREE.MathUtils.damp(current.zoom, goal.zoom, damping, delta);\n      camera.position.copy(current.camera);\n\n      if (isOrthographic(camera)) {\n        camera.zoom = current.zoom;\n        camera.updateProjectionMatrix();\n      }\n\n      if (!controls) {\n        camera.lookAt(current.focus);\n      } else {\n        controls.target.copy(current.focus);\n        controls.update();\n      }\n\n      invalidate();\n      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps)) return;\n      if (!isOrthographic(camera) && !equals(current.camera, goal.camera)) return;\n      if (controls && !equals(current.focus, goal.focus)) return;\n      current.animating = false;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\nfunction useBounds() {\n  return React.useContext(context);\n}\n\nexport { Bounds, useBounds };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\n\nfunction Edges({\n  userData,\n  children,\n  geometry,\n  threshold = 15,\n  color = 'black',\n  ...props\n}) {\n  const ref = React.useRef(null);\n  React.useLayoutEffect(() => {\n    const parent = ref.current.parent;\n\n    if (parent) {\n      const geom = geometry || parent.geometry;\n\n      if (geom !== ref.current.userData.currentGeom || threshold !== ref.current.userData.currentThreshold) {\n        ref.current.userData.currentGeom = geom;\n        ref.current.userData.currentThreshold = threshold;\n        ref.current.geometry = new THREE.EdgesGeometry(geom, threshold);\n      }\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"lineSegments\", _extends({\n    ref: ref,\n    raycast: () => null\n  }, props), children ? children : /*#__PURE__*/React.createElement(\"lineBasicMaterial\", {\n    color: color\n  }));\n}\n\nexport { Edges };\n"],"names":["Cursor","props","ref","useRef","nodes","useGLTF","cursor","gradient","useControls","value","min","max","useFrame","clock","sin","Math","elapsedTime","cos","current","layers","origin","set","geometry","Cube","toneMapped","colorA","colorB","alpha","mode","near","far","color","intensity","power","bias","Edges","children","orthographic","dpr","camera","position","zoom","attach","args","rotation","PI","Bounds","fit","clip","observe","margin","scale","isOrthographic","def","isOrthographicCamera","context","React","damping","eps","onFit","useThree","invalidate","size","controls","onFitRef","equals","a","b","abs","x","y","z","damp","v","t","lambda","delta","THREE","animating","focus","goal","box","api","getSize","center","getCenter","maxSize","fitHeightDistance","atan","fov","fitWidthDistance","aspect","distance","refresh","object","isBox3","copy","target","updateWorldMatrix","setFromObject","isEmpty","length","setFromCenterAndSize","constructor","name","direction","clone","sub","normalize","multiplyScalar","newPos","add","this","maxDistance","updateProjectionMatrix","update","maxHeight","maxWidth","vertices","applyMatrix4","matrixWorldInverse","zoomForHeight","top","bottom","zoomForWidth","right","left","lookAt","callback","addEventListener","removeEventListener","count","state","Provider","useBounds","userData","threshold","parent","geom","currentGeom","currentThreshold","_extends","raycast"],"sourceRoot":""}