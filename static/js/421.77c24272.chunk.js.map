{"version":3,"file":"static/js/421.77c24272.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/core/OrbitControls.js","../node_modules/three-stdlib/objects/Sky.js","../node_modules/@react-three/drei/core/Sky.js","../node_modules/@react-three/drei/core/shaderMaterial.js","../node_modules/simplex-noise/simplex-noise.ts","../node_modules/three/examples/jsm/deprecated/Geometry.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport * as React from 'react';\nimport { OrbitControls as OrbitControls$1 } from 'three-stdlib';\n\nconst OrbitControls = /*#__PURE__*/React.forwardRef(({\n  makeDefault,\n  camera,\n  regress,\n  domElement,\n  enableDamping = true,\n  onChange,\n  onStart,\n  onEnd,\n  ...restProps\n}, ref) => {\n  const invalidate = useThree(state => state.invalidate);\n  const defaultCamera = useThree(state => state.camera);\n  const gl = useThree(state => state.gl);\n  const events = useThree(state => state.events);\n  const set = useThree(state => state.set);\n  const get = useThree(state => state.get);\n  const performance = useThree(state => state.performance);\n  const explCamera = camera || defaultCamera;\n  const explDomElement = domElement || events.connected || gl.domElement;\n  const controls = React.useMemo(() => new OrbitControls$1(explCamera), [explCamera]);\n  useFrame(() => {\n    if (controls.enabled) controls.update();\n  }, -1);\n  React.useEffect(() => {\n    controls.connect(explDomElement);\n    return () => void controls.dispose();\n  }, [explDomElement, regress, controls, invalidate]);\n  React.useEffect(() => {\n    const callback = e => {\n      invalidate();\n      if (regress) performance.regress();\n      if (onChange) onChange(e);\n    };\n\n    controls.addEventListener('change', callback);\n    if (onStart) controls.addEventListener('start', onStart);\n    if (onEnd) controls.addEventListener('end', onEnd);\n    return () => {\n      if (onStart) controls.removeEventListener('start', onStart);\n      if (onEnd) controls.removeEventListener('end', onEnd);\n      controls.removeEventListener('change', callback);\n    };\n  }, [onChange, onStart, onEnd]);\n  React.useEffect(() => {\n    if (makeDefault) {\n      const old = get().controls;\n      set({\n        controls\n      });\n      return () => set({\n        controls: old\n      });\n    }\n  }, [makeDefault, controls]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls,\n    enableDamping: enableDamping\n  }, restProps));\n});\n\nexport { OrbitControls };\n","import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Mesh, BoxGeometry, Vector3, ShaderMaterial, UniformsUtils, BackSide } from 'three';\n\n/**\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * https://www.researchgate.net/publication/220720443_A_Practical_Analytic_Model_for_Daylight\n *\n * First implemented by Simon Wallner\n * http://www.simonwallner.at/projects/atmospheric-scattering\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n */\n\nclass Sky extends Mesh {\n  constructor() {\n    super(new BoxGeometry(1, 1, 1), Sky.material);\n  }\n\n}\n\n_defineProperty(Sky, \"SkyShader\", {\n  uniforms: {\n    turbidity: {\n      value: 2\n    },\n    rayleigh: {\n      value: 1\n    },\n    mieCoefficient: {\n      value: 0.005\n    },\n    mieDirectionalG: {\n      value: 0.8\n    },\n    sunPosition: {\n      value: new Vector3()\n    },\n    up: {\n      value: new Vector3(0, 1, 0)\n    }\n  },\n  vertexShader: ['uniform vec3 sunPosition;', 'uniform float rayleigh;', 'uniform float turbidity;', 'uniform float mieCoefficient;', 'uniform vec3 up;', 'varying vec3 vWorldPosition;', 'varying vec3 vSunDirection;', 'varying float vSunfade;', 'varying vec3 vBetaR;', 'varying vec3 vBetaM;', 'varying float vSunE;', // constants for atmospheric scattering\n  'const float e = 2.71828182845904523536028747135266249775724709369995957;', 'const float pi = 3.141592653589793238462643383279502884197169;', // wavelength of used primaries, according to preetham\n  'const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );', // this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n  // (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n  'const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );', // mie stuff\n  // K coefficient for the primaries\n  'const float v = 4.0;', 'const vec3 K = vec3( 0.686, 0.678, 0.666 );', // MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n  'const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );', // earth shadow hack\n  // cutoffAngle = pi / 1.95;\n  'const float cutoffAngle = 1.6110731556870734;', 'const float steepness = 1.5;', 'const float EE = 1000.0;', 'float sunIntensity( float zenithAngleCos ) {', '\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );', '\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );', '}', 'vec3 totalMie( float T ) {', '\tfloat c = ( 0.2 * T ) * 10E-18;', '\treturn 0.434 * c * MieConst;', '}', 'void main() {', '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );', '\tvWorldPosition = worldPosition.xyz;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tgl_Position.z = gl_Position.w;', // set z to camera.far\n  '\tvSunDirection = normalize( sunPosition );', '\tvSunE = sunIntensity( dot( vSunDirection, up ) );', '\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );', '\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );', // extinction (absorbtion + out scattering)\n  // rayleigh coefficients\n  '\tvBetaR = totalRayleigh * rayleighCoefficient;', // mie coefficients\n  '\tvBetaM = totalMie( turbidity ) * mieCoefficient;', '}'].join('\\n'),\n  fragmentShader: ['varying vec3 vWorldPosition;', 'varying vec3 vSunDirection;', 'varying float vSunfade;', 'varying vec3 vBetaR;', 'varying vec3 vBetaM;', 'varying float vSunE;', 'uniform float mieDirectionalG;', 'uniform vec3 up;', 'const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );', // constants for atmospheric scattering\n  'const float pi = 3.141592653589793238462643383279502884197169;', 'const float n = 1.0003;', // refractive index of air\n  'const float N = 2.545E25;', // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\n  // optical length at zenith for molecules\n  'const float rayleighZenithLength = 8.4E3;', 'const float mieZenithLength = 1.25E3;', // 66 arc seconds -> degrees, and the cosine of that\n  'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;', // 3.0 / ( 16.0 * pi )\n  'const float THREE_OVER_SIXTEENPI = 0.05968310365946075;', // 1.0 / ( 4.0 * pi )\n  'const float ONE_OVER_FOURPI = 0.07957747154594767;', 'float rayleighPhase( float cosTheta ) {', '\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );', '}', 'float hgPhase( float cosTheta, float g ) {', '\tfloat g2 = pow( g, 2.0 );', '\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );', '\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );', '}', 'void main() {', '\tvec3 direction = normalize( vWorldPosition - cameraPos );', // optical length\n  // cutoff angle at 90 to avoid singularity in next formula.\n  '\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );', '\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );', '\tfloat sR = rayleighZenithLength * inverse;', '\tfloat sM = mieZenithLength * inverse;', // combined extinction factor\n  '\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );', // in scattering\n  '\tfloat cosTheta = dot( direction, vSunDirection );', '\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );', '\tvec3 betaRTheta = vBetaR * rPhase;', '\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );', '\tvec3 betaMTheta = vBetaM * mPhase;', '\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );', '\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );', // nightsky\n  '\tfloat theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]', '\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]', '\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );', '\tvec3 L0 = vec3( 0.1 ) * Fex;', // composition + solar disc\n  '\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );', '\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;', '\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );', '\tvec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );', '\tgl_FragColor = vec4( retColor, 1.0 );', '#include <tonemapping_fragment>', '#include <encodings_fragment>', '}'].join('\\n')\n});\n\n_defineProperty(Sky, \"material\", new ShaderMaterial({\n  name: 'SkyShader',\n  fragmentShader: Sky.SkyShader.fragmentShader,\n  vertexShader: Sky.SkyShader.vertexShader,\n  uniforms: UniformsUtils.clone(Sky.SkyShader.uniforms),\n  side: BackSide,\n  depthWrite: false\n}));\n\nexport { Sky };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Sky as Sky$1 } from 'three-stdlib';\nimport { Vector3 } from 'three';\n\nfunction calcPosFromAngles(inclination, azimuth, vector = new Vector3()) {\n  const theta = Math.PI * (inclination - 0.5);\n  const phi = 2 * Math.PI * (azimuth - 0.5);\n  vector.x = Math.cos(phi);\n  vector.y = Math.sin(theta);\n  vector.z = Math.sin(phi);\n  return vector;\n}\nconst Sky = /*#__PURE__*/React.forwardRef(({\n  inclination = 0.6,\n  azimuth = 0.1,\n  distance = 1000,\n  mieCoefficient = 0.005,\n  mieDirectionalG = 0.8,\n  rayleigh = 0.5,\n  turbidity = 10,\n  sunPosition = calcPosFromAngles(inclination, azimuth),\n  ...props\n}, ref) => {\n  const scale = React.useMemo(() => new Vector3().setScalar(distance), [distance]);\n  const [sky] = React.useState(() => new Sky$1());\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: sky,\n    ref: ref,\n    \"material-uniforms-mieCoefficient-value\": mieCoefficient,\n    \"material-uniforms-mieDirectionalG-value\": mieDirectionalG,\n    \"material-uniforms-rayleigh-value\": rayleigh,\n    \"material-uniforms-sunPosition-value\": sunPosition,\n    \"material-uniforms-turbidity-value\": turbidity,\n    scale: scale\n  }, props));\n});\n\nexport { Sky, calcPosFromAngles };\n","import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  return class extends THREE.ShaderMaterial {\n    constructor() {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      }); // Create getter/setters\n\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      }));\n      if (onInit) onInit(this);\n    }\n\n  };\n}\n\nexport { shaderMaterial };\n","/*\n * A fast javascript implementation of simplex noise by Jonas Wagner\n\nBased on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\nWhich is based on example code by Stefan Gustavson (stegu@itn.liu.se).\nWith Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\nBetter rank ordering method by Stefan Gustavson in 2012.\n\n Copyright (c) 2021 Jonas Wagner\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in all\n copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n SOFTWARE.\n */\n\nconst F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\nconst G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\nconst F3 = 1.0 / 3.0;\nconst G3 = 1.0 / 6.0;\nconst F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\nconst G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n\nconst grad3 = new Float32Array([1, 1, 0,\n  -1, 1, 0,\n  1, -1, 0,\n\n  -1, -1, 0,\n  1, 0, 1,\n  -1, 0, 1,\n\n  1, 0, -1,\n  -1, 0, -1,\n  0, 1, 1,\n\n  0, -1, 1,\n  0, 1, -1,\n  0, -1, -1]);\n\nconst grad4 = new Float32Array([0, 1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1,\n  0, -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1,\n  1, 0, 1, 1, 1, 0, 1, -1, 1, 0, -1, 1, 1, 0, -1, -1,\n  -1, 0, 1, 1, -1, 0, 1, -1, -1, 0, -1, 1, -1, 0, -1, -1,\n  1, 1, 0, 1, 1, 1, 0, -1, 1, -1, 0, 1, 1, -1, 0, -1,\n  -1, 1, 0, 1, -1, 1, 0, -1, -1, -1, 0, 1, -1, -1, 0, -1,\n  1, 1, 1, 0, 1, 1, -1, 0, 1, -1, 1, 0, 1, -1, -1, 0,\n  -1, 1, 1, 0, -1, 1, -1, 0, -1, -1, 1, 0, -1, -1, -1, 0]);\n\n/**\n * A random() function, must return a numer in the interval [0,1), just like Math.random().\n */ \nexport type RandomFn = () => number;\n\n/** Deterministic simplex noise generator suitable for 2D, 3D and 4D spaces. */\nexport class SimplexNoise {\n  private p: Uint8Array;\n  private perm: Uint8Array;\n  private permMod12: Uint8Array;\n  /**\n   * Creates a new `SimplexNoise` instance.\n   * This involves some setup. You can save a few cpu cycles by reusing the same instance.\n   * @param randomOrSeed A random number generator or a seed (string|number).\n   * Defaults to Math.random (random irreproducible initialization).\n   */\n  constructor(randomOrSeed: RandomFn|string|number = Math.random) {\n    const random = typeof randomOrSeed == 'function' ? randomOrSeed : alea(randomOrSeed);\n    this.p = buildPermutationTable(random);\n    this.perm = new Uint8Array(512);\n    this.permMod12 = new Uint8Array(512);\n    for (let i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n      this.permMod12[i] = this.perm[i] % 12;\n    }\n  }\n\n  /**\n   * Samples the noise field in 2 dimensions\n   * @param x\n   * @param y \n   * @returns a number in the interval [-1, 1]\n   */\n  noise2D(x: number, y: number): number {\n    const permMod12 = this.permMod12;\n    const perm = this.perm;\n    let n0 = 0; // Noise contributions from the three corners\n    let n1 = 0;\n    let n2 = 0;\n    // Skew the input space to determine which simplex cell we're in\n    const s = (x + y) * F2; // Hairy factor for 2D\n    const i = Math.floor(x + s);\n    const j = Math.floor(y + s);\n    const t = (i + j) * G2;\n    const X0 = i - t; // Unskew the cell origin back to (x,y) space\n    const Y0 = j - t;\n    const x0 = x - X0; // The x,y distances from the cell origin\n    const y0 = y - Y0;\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if (x0 > y0) {\n      i1 = 1;\n      j1 = 0;\n    } // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n    else {\n      i1 = 0;\n      j1 = 1;\n    } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    const y1 = y0 - j1 + G2;\n    const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n    const y2 = y0 - 1.0 + 2.0 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    const ii = i & 255;\n    const jj = j & 255;\n    // Calculate the contribution from the three corners\n    let t0 = 0.5 - x0 * x0 - y0 * y0;\n    if (t0 >= 0) {\n      const gi0 = permMod12[ii + perm[jj]] * 3;\n      t0 *= t0;\n      n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0); // (x,y) of grad3 used for 2D gradient\n    }\n    let t1 = 0.5 - x1 * x1 - y1 * y1;\n    if (t1 >= 0) {\n      const gi1 = permMod12[ii + i1 + perm[jj + j1]] * 3;\n      t1 *= t1;\n      n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1);\n    }\n    let t2 = 0.5 - x2 * x2 - y2 * y2;\n    if (t2 >= 0) {\n      const gi2 = permMod12[ii + 1 + perm[jj + 1]] * 3;\n      t2 *= t2;\n      n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70.0 * (n0 + n1 + n2);\n  }\n\n  /**\n   * Samples the noise field in 3 dimensions\n   * @param x \n   * @param y \n   * @param z \n   * @returns a number in the interval [-1, 1]\n   */\n  noise3D(x:number, y:number, z:number): number {\n    const permMod12 = this.permMod12;\n    const perm = this.perm;\n    let n0, n1, n2, n3; // Noise contributions from the four corners\n    // Skew the input space to determine which simplex cell we're in\n    const s = (x + y + z) * F3; // Very nice and simple skew factor for 3D\n    const i = Math.floor(x + s);\n    const j = Math.floor(y + s);\n    const k = Math.floor(z + s);\n    const t = (i + j + k) * G3;\n    const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n    const Y0 = j - t;\n    const Z0 = k - t;\n    const x0 = x - X0; // The x,y,z distances from the cell origin\n    const y0 = y - Y0;\n    const z0 = z - Z0;\n    // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n    let i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n    let i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } // X Y Z order\n      else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } // X Z Y order\n      else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } // Z X Y order\n    }\n    else { // x0<y0\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } // Z Y X order\n      else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } // Y Z X order\n      else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } // Y X Z order\n    }\n    // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n    const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n    const y1 = y0 - j1 + G3;\n    const z1 = z0 - k1 + G3;\n    const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n    const y2 = y0 - j2 + 2.0 * G3;\n    const z2 = z0 - k2 + 2.0 * G3;\n    const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n    const y3 = y0 - 1.0 + 3.0 * G3;\n    const z3 = z0 - 1.0 + 3.0 * G3;\n    // Work out the hashed gradient indices of the four simplex corners\n    const ii = i & 255;\n    const jj = j & 255;\n    const kk = k & 255;\n    // Calculate the contribution from the four corners\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n    if (t0 < 0) n0 = 0.0;\n    else {\n      const gi0 = permMod12[ii + perm[jj + perm[kk]]] * 3;\n      t0 *= t0;\n      n0 = t0 * t0 * (grad3[gi0] * x0 + grad3[gi0 + 1] * y0 + grad3[gi0 + 2] * z0);\n    }\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n    if (t1 < 0) n1 = 0.0;\n    else {\n      const gi1 = permMod12[ii + i1 + perm[jj + j1 + perm[kk + k1]]] * 3;\n      t1 *= t1;\n      n1 = t1 * t1 * (grad3[gi1] * x1 + grad3[gi1 + 1] * y1 + grad3[gi1 + 2] * z1);\n    }\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n    if (t2 < 0) n2 = 0.0;\n    else {\n      const gi2 = permMod12[ii + i2 + perm[jj + j2 + perm[kk + k2]]] * 3;\n      t2 *= t2;\n      n2 = t2 * t2 * (grad3[gi2] * x2 + grad3[gi2 + 1] * y2 + grad3[gi2 + 2] * z2);\n    }\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n    if (t3 < 0) n3 = 0.0;\n    else {\n      const gi3 = permMod12[ii + 1 + perm[jj + 1 + perm[kk + 1]]] * 3;\n      t3 *= t3;\n      n3 = t3 * t3 * (grad3[gi3] * x3 + grad3[gi3 + 1] * y3 + grad3[gi3 + 2] * z3);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to stay just inside [-1,1]\n    return 32.0 * (n0 + n1 + n2 + n3);\n  }\n\n  /**\n   * Samples the noise field in 4 dimensions\n   * @param x \n   * @param y \n   * @param z \n   * @returns a number in the interval [-1, 1]\n   */\n  noise4D(x:number, y:number, z:number, w:number): number {\n    const perm = this.perm;\n\n    let n0, n1, n2, n3, n4; // Noise contributions from the five corners\n    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n    const s = (x + y + z + w) * F4; // Factor for 4D skewing\n    const i = Math.floor(x + s);\n    const j = Math.floor(y + s);\n    const k = Math.floor(z + s);\n    const l = Math.floor(w + s);\n    const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n    const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n    const Y0 = j - t;\n    const Z0 = k - t;\n    const W0 = l - t;\n    const x0 = x - X0; // The x,y,z,w distances from the cell origin\n    const y0 = y - Y0;\n    const z0 = z - Z0;\n    const w0 = w - W0;\n    // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n    // To find out which of the 24 possible simplices we're in, we need to\n    // determine the magnitude ordering of x0, y0, z0 and w0.\n    // Six pair-wise comparisons are performed between each possible pair\n    // of the four coordinates, and the results are used to rank the numbers.\n    let rankx = 0;\n    let ranky = 0;\n    let rankz = 0;\n    let rankw = 0;\n    if (x0 > y0) rankx++;\n    else ranky++;\n    if (x0 > z0) rankx++;\n    else rankz++;\n    if (x0 > w0) rankx++;\n    else rankw++;\n    if (y0 > z0) ranky++;\n    else rankz++;\n    if (y0 > w0) ranky++;\n    else rankw++;\n    if (z0 > w0) rankz++;\n    else rankw++;\n    // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n    // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n    // impossible. Only the 24 indices which have non-zero entries make any sense.\n    // We use a thresholding to set the coordinates in turn from the largest magnitude.\n    // Rank 3 denotes the largest coordinate.\n    // Rank 2 denotes the second largest coordinate.\n    // Rank 1 denotes the second smallest coordinate.\n\n    // The integer offsets for the second simplex corner\n    const i1 = rankx >= 3 ? 1 : 0;\n    const j1 = ranky >= 3 ? 1 : 0;\n    const k1 = rankz >= 3 ? 1 : 0;\n    const l1 = rankw >= 3 ? 1 : 0;\n    // The integer offsets for the third simplex corner\n    const i2 = rankx >= 2 ? 1 : 0;\n    const j2 = ranky >= 2 ? 1 : 0;\n    const k2 = rankz >= 2 ? 1 : 0;\n    const l2 = rankw >= 2 ? 1 : 0;\n\n    // The integer offsets for the fourth simplex corner\n    const i3 = rankx >= 1 ? 1 : 0;\n    const j3 = ranky >= 1 ? 1 : 0;\n    const k3 = rankz >= 1 ? 1 : 0;\n    const l3 = rankw >= 1 ? 1 : 0;\n    // The fifth corner has all coordinate offsets = 1, so no need to compute that.\n    const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n    const y1 = y0 - j1 + G4;\n    const z1 = z0 - k1 + G4;\n    const w1 = w0 - l1 + G4;\n    const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n    const y2 = y0 - j2 + 2.0 * G4;\n    const z2 = z0 - k2 + 2.0 * G4;\n    const w2 = w0 - l2 + 2.0 * G4;\n    const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n    const y3 = y0 - j3 + 3.0 * G4;\n    const z3 = z0 - k3 + 3.0 * G4;\n    const w3 = w0 - l3 + 3.0 * G4;\n    const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n    const y4 = y0 - 1.0 + 4.0 * G4;\n    const z4 = z0 - 1.0 + 4.0 * G4;\n    const w4 = w0 - 1.0 + 4.0 * G4;\n    // Work out the hashed gradient indices of the five simplex corners\n    const ii = i & 255;\n    const jj = j & 255;\n    const kk = k & 255;\n    const ll = l & 255;\n    // Calculate the contribution from the five corners\n    let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n    if (t0 < 0) n0 = 0.0;\n    else {\n      const gi0 = (perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32) * 4;\n      t0 *= t0;\n      n0 = t0 * t0 * (grad4[gi0] * x0 + grad4[gi0 + 1] * y0 + grad4[gi0 + 2] * z0 + grad4[gi0 + 3] * w0);\n    }\n    let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n    if (t1 < 0) n1 = 0.0;\n    else {\n      const gi1 = (perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32) * 4;\n      t1 *= t1;\n      n1 = t1 * t1 * (grad4[gi1] * x1 + grad4[gi1 + 1] * y1 + grad4[gi1 + 2] * z1 + grad4[gi1 + 3] * w1);\n    }\n    let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n    if (t2 < 0) n2 = 0.0;\n    else {\n      const gi2 = (perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32) * 4;\n      t2 *= t2;\n      n2 = t2 * t2 * (grad4[gi2] * x2 + grad4[gi2 + 1] * y2 + grad4[gi2 + 2] * z2 + grad4[gi2 + 3] * w2);\n    }\n    let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n    if (t3 < 0) n3 = 0.0;\n    else {\n      const gi3 = (perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32) * 4;\n      t3 *= t3;\n      n3 = t3 * t3 * (grad4[gi3] * x3 + grad4[gi3 + 1] * y3 + grad4[gi3 + 2] * z3 + grad4[gi3 + 3] * w3);\n    }\n    let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n    if (t4 < 0) n4 = 0.0;\n    else {\n      const gi4 = (perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32) * 4;\n      t4 *= t4;\n      n4 = t4 * t4 * (grad4[gi4] * x4 + grad4[gi4 + 1] * y4 + grad4[gi4 + 2] * z4 + grad4[gi4 + 3] * w4);\n    }\n    // Sum up and scale the result to cover the range [-1,1]\n    return 27.0 * (n0 + n1 + n2 + n3 + n4);\n  }\n}\nexport default SimplexNoise;\n\n/**\n * Builds a random permutation table.\n * This is exported only for (internal) testing purposes.\n * Do not rely on this export.\n * @private\n */\nexport function buildPermutationTable(random: RandomFn): Uint8Array {\n  const p = new Uint8Array(256);\n  for (let i = 0; i < 256; i++) {\n    p[i] = i;\n  }\n  for (let i = 0; i < 255; i++) {\n    const r = i + ~~(random() * (256 - i));\n    const aux = p[i];\n    p[i] = p[r];\n    p[r] = aux;\n  }\n  return p;\n}\n\n/*\nThe ALEA PRNG and masher code used by simplex-noise.js\nis based on code by Johannes Baagøe, modified by Jonas Wagner.\nSee alea.md for the full license.\n*/\nfunction alea(seed: string|number): RandomFn {\n  let s0 = 0;\n  let s1 = 0;\n  let s2 = 0;\n  let c = 1;\n\n  const mash = masher();\n  s0 = mash(' ');\n  s1 = mash(' ');\n  s2 = mash(' ');\n\n  s0 -= mash(seed);\n  if (s0 < 0) {\n    s0 += 1;\n  }\n  s1 -= mash(seed);\n  if (s1 < 0) {\n    s1 += 1;\n  }\n  s2 -= mash(seed);\n  if (s2 < 0) {\n    s2 += 1;\n  }\n\n  return function() {\n    const t = 2091639 * s0 + c * 2.3283064365386963e-10; // 2^-32\n    s0 = s1;\n    s1 = s2;\n    return s2 = t - (c = t | 0);\n  };\n}\n\nfunction masher() {\n  let n = 0xefc8249d;\n  return function(data: number|string) {\n    data = data.toString();\n    for (let i = 0; i < data.length; i++) {\n      n += data.charCodeAt(i);\n      let h = 0.02519603282416938 * n;\n      n = h >>> 0;\n      h -= n;\n      h *= n;\n      n = h >>> 0;\n      h -= n;\n      n += h * 0x100000000; // 2^32\n    }\n    return (n >>> 0) * 2.3283064365386963e-10; // 2^-32\n  };\n}","import {\n\tBox3,\n\tBufferAttribute,\n\tBufferGeometry,\n\tColor,\n\tEventDispatcher,\n\tFloat32BufferAttribute,\n\tMatrix3,\n\tMatrix4,\n\tMathUtils,\n\tObject3D,\n\tSphere,\n\tVector2,\n\tVector3\n} from 'three';\n\nconst _m1 = new Matrix4();\nconst _obj = new Object3D();\nconst _offset = new Vector3();\n\nclass Geometry extends EventDispatcher {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.uuid = MathUtils.generateUUID();\n\n\t\tthis.name = '';\n\t\tthis.type = 'Geometry';\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\tthis.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = false;\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.lineDistancesNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tapplyMatrix4( matrix ) {\n\n\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\tfor ( let i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tconst vertex = this.vertices[ i ];\n\t\t\tvertex.applyMatrix4( matrix );\n\n\t\t}\n\n\t\tfor ( let i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tconst face = this.faces[ i ];\n\t\t\tface.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\tfor ( let j = 0, jl = face.vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tface.vertexNormals[ j ].applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.boundingBox !== null ) {\n\n\t\t\tthis.computeBoundingBox();\n\n\t\t}\n\n\t\tif ( this.boundingSphere !== null ) {\n\n\t\t\tthis.computeBoundingSphere();\n\n\t\t}\n\n\t\tthis.verticesNeedUpdate = true;\n\t\tthis.normalsNeedUpdate = true;\n\n\t\treturn this;\n\n\t}\n\n\trotateX( angle ) {\n\n\t\t// rotate geometry around world x-axis\n\n\t\t_m1.makeRotationX( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateY( angle ) {\n\n\t\t// rotate geometry around world y-axis\n\n\t\t_m1.makeRotationY( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\trotateZ( angle ) {\n\n\t\t// rotate geometry around world z-axis\n\n\t\t_m1.makeRotationZ( angle );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\ttranslate( x, y, z ) {\n\n\t\t// translate geometry\n\n\t\t_m1.makeTranslation( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tscale( x, y, z ) {\n\n\t\t// scale geometry\n\n\t\t_m1.makeScale( x, y, z );\n\n\t\tthis.applyMatrix4( _m1 );\n\n\t\treturn this;\n\n\t}\n\n\tlookAt( vector ) {\n\n\t\t_obj.lookAt( vector );\n\n\t\t_obj.updateMatrix();\n\n\t\tthis.applyMatrix4( _obj.matrix );\n\n\t\treturn this;\n\n\t}\n\n\tfromBufferGeometry( geometry ) {\n\n\t\tconst scope = this;\n\n\t\tconst index = geometry.index !== null ? geometry.index : undefined;\n\t\tconst attributes = geometry.attributes;\n\n\t\tif ( attributes.position === undefined ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion.' );\n\t\t\treturn this;\n\n\t\t}\n\n\t\tconst position = attributes.position;\n\t\tconst normal = attributes.normal;\n\t\tconst color = attributes.color;\n\t\tconst uv = attributes.uv;\n\t\tconst uv2 = attributes.uv2;\n\n\t\tif ( uv2 !== undefined ) this.faceVertexUvs[ 1 ] = [];\n\n\t\tfor ( let i = 0; i < position.count; i ++ ) {\n\n\t\t\tscope.vertices.push( new Vector3().fromBufferAttribute( position, i ) );\n\n\t\t\tif ( color !== undefined ) {\n\n\t\t\t\tscope.colors.push( new Color().fromBufferAttribute( color, i ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction addFace( a, b, c, materialIndex ) {\n\n\t\t\tconst vertexColors = ( color === undefined ) ? [] : [\n\t\t\t\tscope.colors[ a ].clone(),\n\t\t\t\tscope.colors[ b ].clone(),\n\t\t\t\tscope.colors[ c ].clone()\n\t\t\t];\n\n\t\t\tconst vertexNormals = ( normal === undefined ) ? [] : [\n\t\t\t\tnew Vector3().fromBufferAttribute( normal, a ),\n\t\t\t\tnew Vector3().fromBufferAttribute( normal, b ),\n\t\t\t\tnew Vector3().fromBufferAttribute( normal, c )\n\t\t\t];\n\n\t\t\tconst face = new Face3( a, b, c, vertexNormals, vertexColors, materialIndex );\n\n\t\t\tscope.faces.push( face );\n\n\t\t\tif ( uv !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 0 ].push( [\n\t\t\t\t\tnew Vector2().fromBufferAttribute( uv, a ),\n\t\t\t\t\tnew Vector2().fromBufferAttribute( uv, b ),\n\t\t\t\t\tnew Vector2().fromBufferAttribute( uv, c )\n\t\t\t\t] );\n\n\t\t\t}\n\n\t\t\tif ( uv2 !== undefined ) {\n\n\t\t\t\tscope.faceVertexUvs[ 1 ].push( [\n\t\t\t\t\tnew Vector2().fromBufferAttribute( uv2, a ),\n\t\t\t\t\tnew Vector2().fromBufferAttribute( uv2, b ),\n\t\t\t\t\tnew Vector2().fromBufferAttribute( uv2, c )\n\t\t\t\t] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst groups = geometry.groups;\n\n\t\tif ( groups.length > 0 ) {\n\n\t\t\tfor ( let i = 0; i < groups.length; i ++ ) {\n\n\t\t\t\tconst group = groups[ i ];\n\n\t\t\t\tconst start = group.start;\n\t\t\t\tconst count = group.count;\n\n\t\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\t\tif ( index !== undefined ) {\n\n\t\t\t\t\t\taddFace( index.getX( j ), index.getX( j + 1 ), index.getX( j + 2 ), group.materialIndex );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\taddFace( j, j + 1, j + 2, group.materialIndex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tif ( index !== undefined ) {\n\n\t\t\t\tfor ( let i = 0; i < index.count; i += 3 ) {\n\n\t\t\t\t\taddFace( index.getX( i ), index.getX( i + 1 ), index.getX( i + 2 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tfor ( let i = 0; i < position.count; i += 3 ) {\n\n\t\t\t\t\taddFace( i, i + 1, i + 2 );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeFaceNormals();\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tcenter() {\n\n\t\tthis.computeBoundingBox();\n\n\t\tthis.boundingBox.getCenter( _offset ).negate();\n\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\n\n\t\treturn this;\n\n\t}\n\n\tnormalize() {\n\n\t\tthis.computeBoundingSphere();\n\n\t\tconst center = this.boundingSphere.center;\n\t\tconst radius = this.boundingSphere.radius;\n\n\t\tconst s = radius === 0 ? 1 : 1.0 / radius;\n\n\t\tconst matrix = new Matrix4();\n\t\tmatrix.set(\n\t\t\ts, 0, 0, - s * center.x,\n\t\t\t0, s, 0, - s * center.y,\n\t\t\t0, 0, s, - s * center.z,\n\t\t\t0, 0, 0, 1\n\t\t);\n\n\t\tthis.applyMatrix4( matrix );\n\n\t\treturn this;\n\n\t}\n\n\tcomputeFaceNormals() {\n\n\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\tfor ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tconst face = this.faces[ f ];\n\n\t\t\tconst vA = this.vertices[ face.a ];\n\t\t\tconst vB = this.vertices[ face.b ];\n\t\t\tconst vC = this.vertices[ face.c ];\n\n\t\t\tcb.subVectors( vC, vB );\n\t\t\tab.subVectors( vA, vB );\n\t\t\tcb.cross( ab );\n\n\t\t\tcb.normalize();\n\n\t\t\tface.normal.copy( cb );\n\n\t\t}\n\n\t}\n\n\tcomputeVertexNormals( areaWeighted = true ) {\n\n\t\tconst vertices = new Array( this.vertices.length );\n\n\t\tfor ( let v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ] = new Vector3();\n\n\t\t}\n\n\t\tif ( areaWeighted ) {\n\n\t\t\t// vertex normals weighted by triangle areas\n\t\t\t// http://www.iquilezles.org/www/articles/normals/normals.htm\n\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\n\n\t\t\tfor ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tconst face = this.faces[ f ];\n\n\t\t\t\tconst vA = this.vertices[ face.a ];\n\t\t\t\tconst vB = this.vertices[ face.b ];\n\t\t\t\tconst vC = this.vertices[ face.c ];\n\n\t\t\t\tcb.subVectors( vC, vB );\n\t\t\t\tab.subVectors( vA, vB );\n\t\t\t\tcb.cross( ab );\n\n\t\t\t\tvertices[ face.a ].add( cb );\n\t\t\t\tvertices[ face.b ].add( cb );\n\t\t\t\tvertices[ face.c ].add( cb );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthis.computeFaceNormals();\n\n\t\t\tfor ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tconst face = this.faces[ f ];\n\n\t\t\t\tvertices[ face.a ].add( face.normal );\n\t\t\t\tvertices[ face.b ].add( face.normal );\n\t\t\t\tvertices[ face.c ].add( face.normal );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let v = 0, vl = this.vertices.length; v < vl; v ++ ) {\n\n\t\t\tvertices[ v ].normalize();\n\n\t\t}\n\n\t\tfor ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tconst face = this.faces[ f ];\n\n\t\t\tconst vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( vertices[ face.a ] );\n\t\t\t\tvertexNormals[ 1 ].copy( vertices[ face.b ] );\n\t\t\t\tvertexNormals[ 2 ].copy( vertices[ face.c ] );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = vertices[ face.a ].clone();\n\t\t\t\tvertexNormals[ 1 ] = vertices[ face.b ].clone();\n\t\t\t\tvertexNormals[ 2 ] = vertices[ face.c ].clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t}\n\n\tcomputeFlatVertexNormals() {\n\n\t\tthis.computeFaceNormals();\n\n\t\tfor ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tconst face = this.faces[ f ];\n\n\t\t\tconst vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tvertexNormals[ 0 ].copy( face.normal );\n\t\t\t\tvertexNormals[ 1 ].copy( face.normal );\n\t\t\t\tvertexNormals[ 2 ].copy( face.normal );\n\n\t\t\t} else {\n\n\t\t\t\tvertexNormals[ 0 ] = face.normal.clone();\n\t\t\t\tvertexNormals[ 1 ] = face.normal.clone();\n\t\t\t\tvertexNormals[ 2 ] = face.normal.clone();\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.faces.length > 0 ) {\n\n\t\t\tthis.normalsNeedUpdate = true;\n\n\t\t}\n\n\t}\n\n\tcomputeMorphNormals() {\n\n\t\t// save original normals\n\t\t// - create temp variables on first access\n\t\t//   otherwise just copy (for faster repeated calls)\n\n\t\tfor ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tconst face = this.faces[ f ];\n\n\t\t\tif ( ! face.__originalFaceNormal ) {\n\n\t\t\t\tface.__originalFaceNormal = face.normal.clone();\n\n\t\t\t} else {\n\n\t\t\t\tface.__originalFaceNormal.copy( face.normal );\n\n\t\t\t}\n\n\t\t\tif ( ! face.__originalVertexNormals ) face.__originalVertexNormals = [];\n\n\t\t\tfor ( let i = 0, il = face.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\t\tif ( ! face.__originalVertexNormals[ i ] ) {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ] = face.vertexNormals[ i ].clone();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tface.__originalVertexNormals[ i ].copy( face.vertexNormals[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// use temp geometry to compute face and vertex normals for each morph\n\n\t\tconst tmpGeo = new Geometry();\n\t\ttmpGeo.faces = this.faces;\n\n\t\tfor ( let i = 0, il = this.morphTargets.length; i < il; i ++ ) {\n\n\t\t\t// create on first access\n\n\t\t\tif ( ! this.morphNormals[ i ] ) {\n\n\t\t\t\tthis.morphNormals[ i ] = {};\n\t\t\t\tthis.morphNormals[ i ].faceNormals = [];\n\t\t\t\tthis.morphNormals[ i ].vertexNormals = [];\n\n\t\t\t\tconst dstNormalsFace = this.morphNormals[ i ].faceNormals;\n\t\t\t\tconst dstNormalsVertex = this.morphNormals[ i ].vertexNormals;\n\n\t\t\t\tfor ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\t\tconst faceNormal = new Vector3();\n\t\t\t\t\tconst vertexNormals = { a: new Vector3(), b: new Vector3(), c: new Vector3() };\n\n\t\t\t\t\tdstNormalsFace.push( faceNormal );\n\t\t\t\t\tdstNormalsVertex.push( vertexNormals );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tconst morphNormals = this.morphNormals[ i ];\n\n\t\t\t// set vertices to morph target\n\n\t\t\ttmpGeo.vertices = this.morphTargets[ i ].vertices;\n\n\t\t\t// compute morph normals\n\n\t\t\ttmpGeo.computeFaceNormals();\n\t\t\ttmpGeo.computeVertexNormals();\n\n\t\t\t// store morph normals\n\n\t\t\tfor ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\t\tconst face = this.faces[ f ];\n\n\t\t\t\tconst faceNormal = morphNormals.faceNormals[ f ];\n\t\t\t\tconst vertexNormals = morphNormals.vertexNormals[ f ];\n\n\t\t\t\tfaceNormal.copy( face.normal );\n\n\t\t\t\tvertexNormals.a.copy( face.vertexNormals[ 0 ] );\n\t\t\t\tvertexNormals.b.copy( face.vertexNormals[ 1 ] );\n\t\t\t\tvertexNormals.c.copy( face.vertexNormals[ 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// restore original normals\n\n\t\tfor ( let f = 0, fl = this.faces.length; f < fl; f ++ ) {\n\n\t\t\tconst face = this.faces[ f ];\n\n\t\t\tface.normal = face.__originalFaceNormal;\n\t\t\tface.vertexNormals = face.__originalVertexNormals;\n\n\t\t}\n\n\t}\n\n\tcomputeBoundingBox() {\n\n\t\tif ( this.boundingBox === null ) {\n\n\t\t\tthis.boundingBox = new Box3();\n\n\t\t}\n\n\t\tthis.boundingBox.setFromPoints( this.vertices );\n\n\t}\n\n\tcomputeBoundingSphere() {\n\n\t\tif ( this.boundingSphere === null ) {\n\n\t\t\tthis.boundingSphere = new Sphere();\n\n\t\t}\n\n\t\tthis.boundingSphere.setFromPoints( this.vertices );\n\n\t}\n\n\tmerge( geometry, matrix, materialIndexOffset = 0 ) {\n\n\t\tif ( ! ( geometry && geometry.isGeometry ) ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.', geometry );\n\t\t\treturn;\n\n\t\t}\n\n\t\tlet normalMatrix;\n\t\tconst vertexOffset = this.vertices.length,\n\t\t\tvertices1 = this.vertices,\n\t\t\tvertices2 = geometry.vertices,\n\t\t\tfaces1 = this.faces,\n\t\t\tfaces2 = geometry.faces,\n\t\t\tcolors1 = this.colors,\n\t\t\tcolors2 = geometry.colors;\n\n\t\tif ( matrix !== undefined ) {\n\n\t\t\tnormalMatrix = new Matrix3().getNormalMatrix( matrix );\n\n\t\t}\n\n\t\t// vertices\n\n\t\tfor ( let i = 0, il = vertices2.length; i < il; i ++ ) {\n\n\t\t\tconst vertex = vertices2[ i ];\n\n\t\t\tconst vertexCopy = vertex.clone();\n\n\t\t\tif ( matrix !== undefined ) vertexCopy.applyMatrix4( matrix );\n\n\t\t\tvertices1.push( vertexCopy );\n\n\t\t}\n\n\t\t// colors\n\n\t\tfor ( let i = 0, il = colors2.length; i < il; i ++ ) {\n\n\t\t\tcolors1.push( colors2[ i ].clone() );\n\n\t\t}\n\n\t\t// faces\n\n\t\tfor ( let i = 0, il = faces2.length; i < il; i ++ ) {\n\n\t\t\tconst face = faces2[ i ];\n\t\t\tlet normal, color;\n\t\t\tconst faceVertexNormals = face.vertexNormals,\n\t\t\t\tfaceVertexColors = face.vertexColors;\n\n\t\t\tconst faceCopy = new Face3( face.a + vertexOffset, face.b + vertexOffset, face.c + vertexOffset );\n\t\t\tfaceCopy.normal.copy( face.normal );\n\n\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\tfaceCopy.normal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t}\n\n\t\t\tfor ( let j = 0, jl = faceVertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\tnormal = faceVertexNormals[ j ].clone();\n\n\t\t\t\tif ( normalMatrix !== undefined ) {\n\n\t\t\t\t\tnormal.applyMatrix3( normalMatrix ).normalize();\n\n\t\t\t\t}\n\n\t\t\t\tfaceCopy.vertexNormals.push( normal );\n\n\t\t\t}\n\n\t\t\tfaceCopy.color.copy( face.color );\n\n\t\t\tfor ( let j = 0, jl = faceVertexColors.length; j < jl; j ++ ) {\n\n\t\t\t\tcolor = faceVertexColors[ j ];\n\t\t\t\tfaceCopy.vertexColors.push( color.clone() );\n\n\t\t\t}\n\n\t\t\tfaceCopy.materialIndex = face.materialIndex + materialIndexOffset;\n\n\t\t\tfaces1.push( faceCopy );\n\n\t\t}\n\n\t\t// uvs\n\n\t\tfor ( let i = 0, il = geometry.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tconst faceVertexUvs2 = geometry.faceVertexUvs[ i ];\n\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) this.faceVertexUvs[ i ] = [];\n\n\t\t\tfor ( let j = 0, jl = faceVertexUvs2.length; j < jl; j ++ ) {\n\n\t\t\t\tconst uvs2 = faceVertexUvs2[ j ], uvsCopy = [];\n\n\t\t\t\tfor ( let k = 0, kl = uvs2.length; k < kl; k ++ ) {\n\n\t\t\t\t\tuvsCopy.push( uvs2[ k ].clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tmergeMesh( mesh ) {\n\n\t\tif ( ! ( mesh && mesh.isMesh ) ) {\n\n\t\t\tconsole.error( 'THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.', mesh );\n\t\t\treturn;\n\n\t\t}\n\n\t\tif ( mesh.matrixAutoUpdate ) mesh.updateMatrix();\n\n\t\tthis.merge( mesh.geometry, mesh.matrix );\n\n\t}\n\n\t/*\n\t * Checks for duplicate vertices with hashmap.\n\t * Duplicated vertices are removed\n\t * and faces' vertices are updated.\n\t */\n\n\tmergeVertices( precisionPoints = 4 ) {\n\n\t\tconst verticesMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n\t\tconst unique = [], changes = [];\n\n\t\tconst precision = Math.pow( 10, precisionPoints );\n\n\t\tfor ( let i = 0, il = this.vertices.length; i < il; i ++ ) {\n\n\t\t\tconst v = this.vertices[ i ];\n\t\t\tconst key = Math.round( v.x * precision ) + '_' + Math.round( v.y * precision ) + '_' + Math.round( v.z * precision );\n\n\t\t\tif ( verticesMap[ key ] === undefined ) {\n\n\t\t\t\tverticesMap[ key ] = i;\n\t\t\t\tunique.push( this.vertices[ i ] );\n\t\t\t\tchanges[ i ] = unique.length - 1;\n\n\t\t\t} else {\n\n\t\t\t\t//console.log('Duplicate vertex found. ', i, ' could be using ', verticesMap[key]);\n\t\t\t\tchanges[ i ] = changes[ verticesMap[ key ] ];\n\n\t\t\t}\n\n\t\t}\n\n\n\t\t// if faces are completely degenerate after merging vertices, we\n\t\t// have to remove them from the geometry.\n\t\tconst faceIndicesToRemove = [];\n\n\t\tfor ( let i = 0, il = this.faces.length; i < il; i ++ ) {\n\n\t\t\tconst face = this.faces[ i ];\n\n\t\t\tface.a = changes[ face.a ];\n\t\t\tface.b = changes[ face.b ];\n\t\t\tface.c = changes[ face.c ];\n\n\t\t\tconst indices = [ face.a, face.b, face.c ];\n\n\t\t\t// if any duplicate vertices are found in a Face3\n\t\t\t// we have to remove the face as nothing can be saved\n\t\t\tfor ( let n = 0; n < 3; n ++ ) {\n\n\t\t\t\tif ( indices[ n ] === indices[ ( n + 1 ) % 3 ] ) {\n\n\t\t\t\t\tfaceIndicesToRemove.push( i );\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = faceIndicesToRemove.length - 1; i >= 0; i -- ) {\n\n\t\t\tconst idx = faceIndicesToRemove[ i ];\n\n\t\t\tthis.faces.splice( idx, 1 );\n\n\t\t\tfor ( let j = 0, jl = this.faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tthis.faceVertexUvs[ j ].splice( idx, 1 );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Use unique set of vertices\n\n\t\tconst diff = this.vertices.length - unique.length;\n\t\tthis.vertices = unique;\n\t\treturn diff;\n\n\t}\n\n\tsetFromPoints( points ) {\n\n\t\tthis.vertices = [];\n\n\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\n\n\t\t\tconst point = points[ i ];\n\t\t\tthis.vertices.push( new Vector3( point.x, point.y, point.z || 0 ) );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\tsortFacesByMaterialIndex() {\n\n\t\tconst faces = this.faces;\n\t\tconst length = faces.length;\n\n\t\t// tag faces\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tfaces[ i ]._id = i;\n\n\t\t}\n\n\t\t// sort faces\n\n\t\tfunction materialIndexSort( a, b ) {\n\n\t\t\treturn a.materialIndex - b.materialIndex;\n\n\t\t}\n\n\t\tfaces.sort( materialIndexSort );\n\n\t\t// sort uvs\n\n\t\tconst uvs1 = this.faceVertexUvs[ 0 ];\n\t\tconst uvs2 = this.faceVertexUvs[ 1 ];\n\n\t\tlet newUvs1, newUvs2;\n\n\t\tif ( uvs1 && uvs1.length === length ) newUvs1 = [];\n\t\tif ( uvs2 && uvs2.length === length ) newUvs2 = [];\n\n\t\tfor ( let i = 0; i < length; i ++ ) {\n\n\t\t\tconst id = faces[ i ]._id;\n\n\t\t\tif ( newUvs1 ) newUvs1.push( uvs1[ id ] );\n\t\t\tif ( newUvs2 ) newUvs2.push( uvs2[ id ] );\n\n\t\t}\n\n\t\tif ( newUvs1 ) this.faceVertexUvs[ 0 ] = newUvs1;\n\t\tif ( newUvs2 ) this.faceVertexUvs[ 1 ] = newUvs2;\n\n\t}\n\n\ttoJSON() {\n\n\t\tconst data = {\n\t\t\tmetadata: {\n\t\t\t\tversion: 4.5,\n\t\t\t\ttype: 'Geometry',\n\t\t\t\tgenerator: 'Geometry.toJSON'\n\t\t\t}\n\t\t};\n\n\t\t// standard Geometry serialization\n\n\t\tdata.uuid = this.uuid;\n\t\tdata.type = this.type;\n\t\tif ( this.name !== '' ) data.name = this.name;\n\n\t\tif ( this.parameters !== undefined ) {\n\n\t\t\tconst parameters = this.parameters;\n\n\t\t\tfor ( const key in parameters ) {\n\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\n\n\t\t\t}\n\n\t\t\treturn data;\n\n\t\t}\n\n\t\tconst vertices = [];\n\n\t\tfor ( let i = 0; i < this.vertices.length; i ++ ) {\n\n\t\t\tconst vertex = this.vertices[ i ];\n\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\n\n\t\t}\n\n\t\tconst faces = [];\n\t\tconst normals = [];\n\t\tconst normalsHash = {};\n\t\tconst colors = [];\n\t\tconst colorsHash = {};\n\t\tconst uvs = [];\n\t\tconst uvsHash = {};\n\n\t\tfor ( let i = 0; i < this.faces.length; i ++ ) {\n\n\t\t\tconst face = this.faces[ i ];\n\n\t\t\tconst hasMaterial = true;\n\t\t\tconst hasFaceUv = false; // deprecated\n\t\t\tconst hasFaceVertexUv = this.faceVertexUvs[ 0 ][ i ] !== undefined;\n\t\t\tconst hasFaceNormal = face.normal.length() > 0;\n\t\t\tconst hasFaceVertexNormal = face.vertexNormals.length > 0;\n\t\t\tconst hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n\t\t\tconst hasFaceVertexColor = face.vertexColors.length > 0;\n\n\t\t\tlet faceType = 0;\n\n\t\t\tfaceType = setBit( faceType, 0, 0 ); // isQuad\n\t\t\tfaceType = setBit( faceType, 1, hasMaterial );\n\t\t\tfaceType = setBit( faceType, 2, hasFaceUv );\n\t\t\tfaceType = setBit( faceType, 3, hasFaceVertexUv );\n\t\t\tfaceType = setBit( faceType, 4, hasFaceNormal );\n\t\t\tfaceType = setBit( faceType, 5, hasFaceVertexNormal );\n\t\t\tfaceType = setBit( faceType, 6, hasFaceColor );\n\t\t\tfaceType = setBit( faceType, 7, hasFaceVertexColor );\n\n\t\t\tfaces.push( faceType );\n\t\t\tfaces.push( face.a, face.b, face.c );\n\t\t\tfaces.push( face.materialIndex );\n\n\t\t\tif ( hasFaceVertexUv ) {\n\n\t\t\t\tconst faceVertexUvs = this.faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 0 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 1 ] ),\n\t\t\t\t\tgetUvIndex( faceVertexUvs[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceNormal ) {\n\n\t\t\t\tfaces.push( getNormalIndex( face.normal ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexNormal ) {\n\n\t\t\t\tconst vertexNormals = face.vertexNormals;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 0 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 1 ] ),\n\t\t\t\t\tgetNormalIndex( vertexNormals[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( hasFaceColor ) {\n\n\t\t\t\tfaces.push( getColorIndex( face.color ) );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexColor ) {\n\n\t\t\t\tconst vertexColors = face.vertexColors;\n\n\t\t\t\tfaces.push(\n\t\t\t\t\tgetColorIndex( vertexColors[ 0 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 1 ] ),\n\t\t\t\t\tgetColorIndex( vertexColors[ 2 ] )\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction setBit( value, position, enabled ) {\n\n\t\t\treturn enabled ? value | ( 1 << position ) : value & ( ~ ( 1 << position ) );\n\n\t\t}\n\n\t\tfunction getNormalIndex( normal ) {\n\n\t\t\tconst hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n\t\t\tif ( normalsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn normalsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tnormalsHash[ hash ] = normals.length / 3;\n\t\t\tnormals.push( normal.x, normal.y, normal.z );\n\n\t\t\treturn normalsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getColorIndex( color ) {\n\n\t\t\tconst hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n\t\t\tif ( colorsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn colorsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tcolorsHash[ hash ] = colors.length;\n\t\t\tcolors.push( color.getHex() );\n\n\t\t\treturn colorsHash[ hash ];\n\n\t\t}\n\n\t\tfunction getUvIndex( uv ) {\n\n\t\t\tconst hash = uv.x.toString() + uv.y.toString();\n\n\t\t\tif ( uvsHash[ hash ] !== undefined ) {\n\n\t\t\t\treturn uvsHash[ hash ];\n\n\t\t\t}\n\n\t\t\tuvsHash[ hash ] = uvs.length / 2;\n\t\t\tuvs.push( uv.x, uv.y );\n\n\t\t\treturn uvsHash[ hash ];\n\n\t\t}\n\n\t\tdata.data = {};\n\n\t\tdata.data.vertices = vertices;\n\t\tdata.data.normals = normals;\n\t\tif ( colors.length > 0 ) data.data.colors = colors;\n\t\tif ( uvs.length > 0 ) data.data.uvs = [ uvs ]; // temporal backward compatibility\n\t\tdata.data.faces = faces;\n\n\t\treturn data;\n\n\t}\n\n\tclone() {\n\n\t\t/*\n\t\t // Handle primitives\n\n\t\t const parameters = this.parameters;\n\n\t\t if ( parameters !== undefined ) {\n\n\t\t const values = [];\n\n\t\t for ( const key in parameters ) {\n\n\t\t values.push( parameters[ key ] );\n\n\t\t }\n\n\t\t const geometry = Object.create( this.constructor.prototype );\n\t\t this.constructor.apply( geometry, values );\n\t\t return geometry;\n\n\t\t }\n\n\t\t return new this.constructor().copy( this );\n\t\t */\n\n\t\treturn new Geometry().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\t// reset\n\n\t\tthis.vertices = [];\n\t\tthis.colors = [];\n\t\tthis.faces = [];\n\t\tthis.faceVertexUvs = [[]];\n\t\tthis.morphTargets = [];\n\t\tthis.morphNormals = [];\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\t\tthis.lineDistances = [];\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// name\n\n\t\tthis.name = source.name;\n\n\t\t// vertices\n\n\t\tconst vertices = source.vertices;\n\n\t\tfor ( let i = 0, il = vertices.length; i < il; i ++ ) {\n\n\t\t\tthis.vertices.push( vertices[ i ].clone() );\n\n\t\t}\n\n\t\t// colors\n\n\t\tconst colors = source.colors;\n\n\t\tfor ( let i = 0, il = colors.length; i < il; i ++ ) {\n\n\t\t\tthis.colors.push( colors[ i ].clone() );\n\n\t\t}\n\n\t\t// faces\n\n\t\tconst faces = source.faces;\n\n\t\tfor ( let i = 0, il = faces.length; i < il; i ++ ) {\n\n\t\t\tthis.faces.push( faces[ i ].clone() );\n\n\t\t}\n\n\t\t// face vertex uvs\n\n\t\tfor ( let i = 0, il = source.faceVertexUvs.length; i < il; i ++ ) {\n\n\t\t\tconst faceVertexUvs = source.faceVertexUvs[ i ];\n\n\t\t\tif ( this.faceVertexUvs[ i ] === undefined ) {\n\n\t\t\t\tthis.faceVertexUvs[ i ] = [];\n\n\t\t\t}\n\n\t\t\tfor ( let j = 0, jl = faceVertexUvs.length; j < jl; j ++ ) {\n\n\t\t\t\tconst uvs = faceVertexUvs[ j ], uvsCopy = [];\n\n\t\t\t\tfor ( let k = 0, kl = uvs.length; k < kl; k ++ ) {\n\n\t\t\t\t\tconst uv = uvs[ k ];\n\n\t\t\t\t\tuvsCopy.push( uv.clone() );\n\n\t\t\t\t}\n\n\t\t\t\tthis.faceVertexUvs[ i ].push( uvsCopy );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// morph targets\n\n\t\tconst morphTargets = source.morphTargets;\n\n\t\tfor ( let i = 0, il = morphTargets.length; i < il; i ++ ) {\n\n\t\t\tconst morphTarget = {};\n\t\t\tmorphTarget.name = morphTargets[ i ].name;\n\n\t\t\t// vertices\n\n\t\t\tif ( morphTargets[ i ].vertices !== undefined ) {\n\n\t\t\t\tmorphTarget.vertices = [];\n\n\t\t\t\tfor ( let j = 0, jl = morphTargets[ i ].vertices.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphTarget.vertices.push( morphTargets[ i ].vertices[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// normals\n\n\t\t\tif ( morphTargets[ i ].normals !== undefined ) {\n\n\t\t\t\tmorphTarget.normals = [];\n\n\t\t\t\tfor ( let j = 0, jl = morphTargets[ i ].normals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphTarget.normals.push( morphTargets[ i ].normals[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.push( morphTarget );\n\n\t\t}\n\n\t\t// morph normals\n\n\t\tconst morphNormals = source.morphNormals;\n\n\t\tfor ( let i = 0, il = morphNormals.length; i < il; i ++ ) {\n\n\t\t\tconst morphNormal = {};\n\n\t\t\t// vertex normals\n\n\t\t\tif ( morphNormals[ i ].vertexNormals !== undefined ) {\n\n\t\t\t\tmorphNormal.vertexNormals = [];\n\n\t\t\t\tfor ( let j = 0, jl = morphNormals[ i ].vertexNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tconst srcVertexNormal = morphNormals[ i ].vertexNormals[ j ];\n\t\t\t\t\tconst destVertexNormal = {};\n\n\t\t\t\t\tdestVertexNormal.a = srcVertexNormal.a.clone();\n\t\t\t\t\tdestVertexNormal.b = srcVertexNormal.b.clone();\n\t\t\t\t\tdestVertexNormal.c = srcVertexNormal.c.clone();\n\n\t\t\t\t\tmorphNormal.vertexNormals.push( destVertexNormal );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// face normals\n\n\t\t\tif ( morphNormals[ i ].faceNormals !== undefined ) {\n\n\t\t\t\tmorphNormal.faceNormals = [];\n\n\t\t\t\tfor ( let j = 0, jl = morphNormals[ i ].faceNormals.length; j < jl; j ++ ) {\n\n\t\t\t\t\tmorphNormal.faceNormals.push( morphNormals[ i ].faceNormals[ j ].clone() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.morphNormals.push( morphNormal );\n\n\t\t}\n\n\t\t// skin weights\n\n\t\tconst skinWeights = source.skinWeights;\n\n\t\tfor ( let i = 0, il = skinWeights.length; i < il; i ++ ) {\n\n\t\t\tthis.skinWeights.push( skinWeights[ i ].clone() );\n\n\t\t}\n\n\t\t// skin indices\n\n\t\tconst skinIndices = source.skinIndices;\n\n\t\tfor ( let i = 0, il = skinIndices.length; i < il; i ++ ) {\n\n\t\t\tthis.skinIndices.push( skinIndices[ i ].clone() );\n\n\t\t}\n\n\t\t// line distances\n\n\t\tconst lineDistances = source.lineDistances;\n\n\t\tfor ( let i = 0, il = lineDistances.length; i < il; i ++ ) {\n\n\t\t\tthis.lineDistances.push( lineDistances[ i ] );\n\n\t\t}\n\n\t\t// bounding box\n\n\t\tconst boundingBox = source.boundingBox;\n\n\t\tif ( boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = boundingBox.clone();\n\n\t\t}\n\n\t\t// bounding sphere\n\n\t\tconst boundingSphere = source.boundingSphere;\n\n\t\tif ( boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = boundingSphere.clone();\n\n\t\t}\n\n\t\t// update flags\n\n\t\tthis.elementsNeedUpdate = source.elementsNeedUpdate;\n\t\tthis.verticesNeedUpdate = source.verticesNeedUpdate;\n\t\tthis.uvsNeedUpdate = source.uvsNeedUpdate;\n\t\tthis.normalsNeedUpdate = source.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = source.colorsNeedUpdate;\n\t\tthis.lineDistancesNeedUpdate = source.lineDistancesNeedUpdate;\n\t\tthis.groupsNeedUpdate = source.groupsNeedUpdate;\n\n\t\treturn this;\n\n\t}\n\n\ttoBufferGeometry() {\n\n\t\tconst geometry = new DirectGeometry().fromGeometry( this );\n\n\t\tconst buffergeometry = new BufferGeometry();\n\n\t\tconst positions = new Float32Array( geometry.vertices.length * 3 );\n\t\tbuffergeometry.setAttribute( 'position', new BufferAttribute( positions, 3 ).copyVector3sArray( geometry.vertices ) );\n\n\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\tconst normals = new Float32Array( geometry.normals.length * 3 );\n\t\t\tbuffergeometry.setAttribute( 'normal', new BufferAttribute( normals, 3 ).copyVector3sArray( geometry.normals ) );\n\n\t\t}\n\n\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\tconst colors = new Float32Array( geometry.colors.length * 3 );\n\t\t\tbuffergeometry.setAttribute( 'color', new BufferAttribute( colors, 3 ).copyColorsArray( geometry.colors ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\tconst uvs = new Float32Array( geometry.uvs.length * 2 );\n\t\t\tbuffergeometry.setAttribute( 'uv', new BufferAttribute( uvs, 2 ).copyVector2sArray( geometry.uvs ) );\n\n\t\t}\n\n\t\tif ( geometry.uvs2.length > 0 ) {\n\n\t\t\tconst uvs2 = new Float32Array( geometry.uvs2.length * 2 );\n\t\t\tbuffergeometry.setAttribute( 'uv2', new BufferAttribute( uvs2, 2 ).copyVector2sArray( geometry.uvs2 ) );\n\n\t\t}\n\n\t\t// groups\n\n\t\tbuffergeometry.groups = geometry.groups;\n\n\t\t// morphs\n\n\t\tfor ( const name in geometry.morphTargets ) {\n\n\t\t\tconst array = [];\n\t\t\tconst morphTargets = geometry.morphTargets[ name ];\n\n\t\t\tfor ( let i = 0, l = morphTargets.length; i < l; i ++ ) {\n\n\t\t\t\tconst morphTarget = morphTargets[ i ];\n\n\t\t\t\tconst attribute = new Float32BufferAttribute( morphTarget.data.length * 3, 3 );\n\t\t\t\tattribute.name = morphTarget.name;\n\n\t\t\t\tarray.push( attribute.copyVector3sArray( morphTarget.data ) );\n\n\t\t\t}\n\n\t\t\tbuffergeometry.morphAttributes[ name ] = array;\n\n\t\t}\n\n\t\t// skinning\n\n\t\tif ( geometry.skinIndices.length > 0 ) {\n\n\t\t\tconst skinIndices = new Float32BufferAttribute( geometry.skinIndices.length * 4, 4 );\n\t\t\tbuffergeometry.setAttribute( 'skinIndex', skinIndices.copyVector4sArray( geometry.skinIndices ) );\n\n\t\t}\n\n\t\tif ( geometry.skinWeights.length > 0 ) {\n\n\t\t\tconst skinWeights = new Float32BufferAttribute( geometry.skinWeights.length * 4, 4 );\n\t\t\tbuffergeometry.setAttribute( 'skinWeight', skinWeights.copyVector4sArray( geometry.skinWeights ) );\n\n\t\t}\n\n\t\t//\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tbuffergeometry.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tbuffergeometry.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n\tcomputeTangents() {\n\n\t\tconsole.error( 'THREE.Geometry: .computeTangents() has been removed.' );\n\n\t}\n\n\tcomputeLineDistances() {\n\n\t\tconsole.error( 'THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.' );\n\n\t}\n\n\tapplyMatrix( matrix ) {\n\n\t\tconsole.warn( 'THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4().' );\n\t\treturn this.applyMatrix4( matrix );\n\n\t}\n\n\tdispose() {\n\n\t\tthis.dispatchEvent( { type: 'dispose' } );\n\n\t}\n\n\tstatic createBufferGeometryFromObject( object ) {\n\n\t\tlet buffergeometry = new BufferGeometry();\n\n\t\tconst geometry = object.geometry;\n\n\t\tif ( object.isPoints || object.isLine ) {\n\n\t\t\tconst positions = new Float32BufferAttribute( geometry.vertices.length * 3, 3 );\n\t\t\tconst colors = new Float32BufferAttribute( geometry.colors.length * 3, 3 );\n\n\t\t\tbuffergeometry.setAttribute( 'position', positions.copyVector3sArray( geometry.vertices ) );\n\t\t\tbuffergeometry.setAttribute( 'color', colors.copyColorsArray( geometry.colors ) );\n\n\t\t\tif ( geometry.lineDistances && geometry.lineDistances.length === geometry.vertices.length ) {\n\n\t\t\t\tconst lineDistances = new Float32BufferAttribute( geometry.lineDistances.length, 1 );\n\n\t\t\t\tbuffergeometry.setAttribute( 'lineDistance', lineDistances.copyArray( geometry.lineDistances ) );\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\t\tbuffergeometry.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t\t}\n\n\t\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\t\tbuffergeometry.boundingBox = geometry.boundingBox.clone();\n\n\t\t\t}\n\n\t\t} else if ( object.isMesh ) {\n\n\t\t\tbuffergeometry = geometry.toBufferGeometry();\n\n\t\t}\n\n\t\treturn buffergeometry;\n\n\t}\n\n}\n\nGeometry.prototype.isGeometry = true;\n\nclass DirectGeometry {\n\n\tconstructor() {\n\n\t\tthis.vertices = [];\n\t\tthis.normals = [];\n\t\tthis.colors = [];\n\t\tthis.uvs = [];\n\t\tthis.uvs2 = [];\n\n\t\tthis.groups = [];\n\n\t\tthis.morphTargets = {};\n\n\t\tthis.skinWeights = [];\n\t\tthis.skinIndices = [];\n\n\t\t// this.lineDistances = [];\n\n\t\tthis.boundingBox = null;\n\t\tthis.boundingSphere = null;\n\n\t\t// update flags\n\n\t\tthis.verticesNeedUpdate = false;\n\t\tthis.normalsNeedUpdate = false;\n\t\tthis.colorsNeedUpdate = false;\n\t\tthis.uvsNeedUpdate = false;\n\t\tthis.groupsNeedUpdate = false;\n\n\t}\n\n\tcomputeGroups( geometry ) {\n\n\t\tconst groups = [];\n\n\t\tlet group, i;\n\t\tlet materialIndex = undefined;\n\n\t\tconst faces = geometry.faces;\n\n\t\tfor ( i = 0; i < faces.length; i ++ ) {\n\n\t\t\tconst face = faces[ i ];\n\n\t\t\t// materials\n\n\t\t\tif ( face.materialIndex !== materialIndex ) {\n\n\t\t\t\tmaterialIndex = face.materialIndex;\n\n\t\t\t\tif ( group !== undefined ) {\n\n\t\t\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\t\t\tgroups.push( group );\n\n\t\t\t\t}\n\n\t\t\t\tgroup = {\n\t\t\t\t\tstart: i * 3,\n\t\t\t\t\tmaterialIndex: materialIndex\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( group !== undefined ) {\n\n\t\t\tgroup.count = ( i * 3 ) - group.start;\n\t\t\tgroups.push( group );\n\n\t\t}\n\n\t\tthis.groups = groups;\n\n\t}\n\n\tfromGeometry( geometry ) {\n\n\t\tconst faces = geometry.faces;\n\t\tconst vertices = geometry.vertices;\n\t\tconst faceVertexUvs = geometry.faceVertexUvs;\n\n\t\tconst hasFaceVertexUv = faceVertexUvs[ 0 ] && faceVertexUvs[ 0 ].length > 0;\n\t\tconst hasFaceVertexUv2 = faceVertexUvs[ 1 ] && faceVertexUvs[ 1 ].length > 0;\n\n\t\t// morphs\n\n\t\tconst morphTargets = geometry.morphTargets;\n\t\tconst morphTargetsLength = morphTargets.length;\n\n\t\tlet morphTargetsPosition;\n\n\t\tif ( morphTargetsLength > 0 ) {\n\n\t\t\tmorphTargetsPosition = [];\n\n\t\t\tfor ( let i = 0; i < morphTargetsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsPosition[ i ] = {\n\t\t\t\t\tname: morphTargets[ i ].name,\n\t\t\t\t \tdata: []\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.position = morphTargetsPosition;\n\n\t\t}\n\n\t\tconst morphNormals = geometry.morphNormals;\n\t\tconst morphNormalsLength = morphNormals.length;\n\n\t\tlet morphTargetsNormal;\n\n\t\tif ( morphNormalsLength > 0 ) {\n\n\t\t\tmorphTargetsNormal = [];\n\n\t\t\tfor ( let i = 0; i < morphNormalsLength; i ++ ) {\n\n\t\t\t\tmorphTargetsNormal[ i ] = {\n\t\t\t\t\tname: morphNormals[ i ].name,\n\t\t\t\t \tdata: []\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tthis.morphTargets.normal = morphTargetsNormal;\n\n\t\t}\n\n\t\t// skins\n\n\t\tconst skinIndices = geometry.skinIndices;\n\t\tconst skinWeights = geometry.skinWeights;\n\n\t\tconst hasSkinIndices = skinIndices.length === vertices.length;\n\t\tconst hasSkinWeights = skinWeights.length === vertices.length;\n\n\t\t//\n\n\t\tif ( vertices.length > 0 && faces.length === 0 ) {\n\n\t\t\tconsole.error( 'THREE.DirectGeometry: Faceless geometries are not supported.' );\n\n\t\t}\n\n\t\tfor ( let i = 0; i < faces.length; i ++ ) {\n\n\t\t\tconst face = faces[ i ];\n\n\t\t\tthis.vertices.push( vertices[ face.a ], vertices[ face.b ], vertices[ face.c ] );\n\n\t\t\tconst vertexNormals = face.vertexNormals;\n\n\t\t\tif ( vertexNormals.length === 3 ) {\n\n\t\t\t\tthis.normals.push( vertexNormals[ 0 ], vertexNormals[ 1 ], vertexNormals[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tconst normal = face.normal;\n\n\t\t\t\tthis.normals.push( normal, normal, normal );\n\n\t\t\t}\n\n\t\t\tconst vertexColors = face.vertexColors;\n\n\t\t\tif ( vertexColors.length === 3 ) {\n\n\t\t\t\tthis.colors.push( vertexColors[ 0 ], vertexColors[ 1 ], vertexColors[ 2 ] );\n\n\t\t\t} else {\n\n\t\t\t\tconst color = face.color;\n\n\t\t\t\tthis.colors.push( color, color, color );\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv === true ) {\n\n\t\t\t\tconst vertexUvs = faceVertexUvs[ 0 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ', i );\n\n\t\t\t\t\tthis.uvs.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( hasFaceVertexUv2 === true ) {\n\n\t\t\t\tconst vertexUvs = faceVertexUvs[ 1 ][ i ];\n\n\t\t\t\tif ( vertexUvs !== undefined ) {\n\n\t\t\t\t\tthis.uvs2.push( vertexUvs[ 0 ], vertexUvs[ 1 ], vertexUvs[ 2 ] );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.warn( 'THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ', i );\n\n\t\t\t\t\tthis.uvs2.push( new Vector2(), new Vector2(), new Vector2() );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// morphs\n\n\t\t\tfor ( let j = 0; j < morphTargetsLength; j ++ ) {\n\n\t\t\t\tconst morphTarget = morphTargets[ j ].vertices;\n\n\t\t\t\tmorphTargetsPosition[ j ].data.push( morphTarget[ face.a ], morphTarget[ face.b ], morphTarget[ face.c ] );\n\n\t\t\t}\n\n\t\t\tfor ( let j = 0; j < morphNormalsLength; j ++ ) {\n\n\t\t\t\tconst morphNormal = morphNormals[ j ].vertexNormals[ i ];\n\n\t\t\t\tmorphTargetsNormal[ j ].data.push( morphNormal.a, morphNormal.b, morphNormal.c );\n\n\t\t\t}\n\n\t\t\t// skins\n\n\t\t\tif ( hasSkinIndices ) {\n\n\t\t\t\tthis.skinIndices.push( skinIndices[ face.a ], skinIndices[ face.b ], skinIndices[ face.c ] );\n\n\t\t\t}\n\n\t\t\tif ( hasSkinWeights ) {\n\n\t\t\t\tthis.skinWeights.push( skinWeights[ face.a ], skinWeights[ face.b ], skinWeights[ face.c ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.computeGroups( geometry );\n\n\t\tthis.verticesNeedUpdate = geometry.verticesNeedUpdate;\n\t\tthis.normalsNeedUpdate = geometry.normalsNeedUpdate;\n\t\tthis.colorsNeedUpdate = geometry.colorsNeedUpdate;\n\t\tthis.uvsNeedUpdate = geometry.uvsNeedUpdate;\n\t\tthis.groupsNeedUpdate = geometry.groupsNeedUpdate;\n\n\t\tif ( geometry.boundingSphere !== null ) {\n\n\t\t\tthis.boundingSphere = geometry.boundingSphere.clone();\n\n\t\t}\n\n\t\tif ( geometry.boundingBox !== null ) {\n\n\t\t\tthis.boundingBox = geometry.boundingBox.clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nclass Face3 {\n\n\tconstructor( a, b, c, normal, color, materialIndex = 0 ) {\n\n\t\tthis.a = a;\n\t\tthis.b = b;\n\t\tthis.c = c;\n\n\t\tthis.normal = ( normal && normal.isVector3 ) ? normal : new Vector3();\n\t\tthis.vertexNormals = Array.isArray( normal ) ? normal : [];\n\n\t\tthis.color = ( color && color.isColor ) ? color : new Color();\n\t\tthis.vertexColors = Array.isArray( color ) ? color : [];\n\n\t\tthis.materialIndex = materialIndex;\n\n\t}\n\n\tclone() {\n\n\t\treturn new this.constructor().copy( this );\n\n\t}\n\n\tcopy( source ) {\n\n\t\tthis.a = source.a;\n\t\tthis.b = source.b;\n\t\tthis.c = source.c;\n\n\t\tthis.normal.copy( source.normal );\n\t\tthis.color.copy( source.color );\n\n\t\tthis.materialIndex = source.materialIndex;\n\n\t\tfor ( let i = 0, il = source.vertexNormals.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexNormals[ i ] = source.vertexNormals[ i ].clone();\n\n\t\t}\n\n\t\tfor ( let i = 0, il = source.vertexColors.length; i < il; i ++ ) {\n\n\t\t\tthis.vertexColors[ i ] = source.vertexColors[ i ].clone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n}\n\nexport { Face3, Geometry };\n"],"names":["OrbitControls","React","ref","makeDefault","camera","regress","domElement","enableDamping","onChange","onStart","onEnd","restProps","invalidate","useThree","state","defaultCamera","gl","events","set","get","performance","explCamera","explDomElement","connected","controls","OrbitControls$1","useFrame","enabled","update","connect","dispose","callback","e","addEventListener","removeEventListener","old","_extends","object","Sky","BoxGeometry","material","Mesh","_defineProperty","uniforms","turbidity","value","rayleigh","mieCoefficient","mieDirectionalG","sunPosition","Vector3","up","vertexShader","join","fragmentShader","ShaderMaterial","name","SkyShader","UniformsUtils","side","BackSide","depthWrite","inclination","azimuth","distance","vector","theta","Math","PI","phi","x","cos","y","sin","z","calcPosFromAngles","props","scale","setScalar","Sky$1","sky","shaderMaterial","onInit","entries","Object","reduce","acc","uniform","THREE","forEach","defineProperty","v","F2","sqrt","G2","G3","F4","G4","grad3","Float32Array","grad4","SimplexNoise","randomOrSeed","random","alea","this","p","buildPermutationTable","perm","Uint8Array","permMod12","i","i1","j1","n0","n1","n2","s","floor","j","t","x0","y0","x1","y1","x2","y2","ii","jj","t0","gi0","t1","gi1","t2","gi2","n3","k1","i2","j2","k2","k","z0","z1","z2","x3","y3","z3","kk","t3","gi3","w","n4","l","w0","rankx","ranky","rankz","rankw","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","t4","gi4","r","aux","seed","s0","s1","s2","c","mash","n","data","toString","length","h","charCodeAt","masher","_m1","Matrix4","_obj","Object3D","_offset","Geometry","uuid","MathUtils","type","vertices","colors","faces","faceVertexUvs","morphTargets","morphNormals","skinWeights","skinIndices","lineDistances","boundingBox","boundingSphere","elementsNeedUpdate","verticesNeedUpdate","uvsNeedUpdate","normalsNeedUpdate","colorsNeedUpdate","lineDistancesNeedUpdate","groupsNeedUpdate","matrix","normalMatrix","Matrix3","getNormalMatrix","il","applyMatrix4","face","normal","applyMatrix3","normalize","jl","vertexNormals","computeBoundingBox","computeBoundingSphere","angle","makeRotationX","makeRotationY","makeRotationZ","makeTranslation","makeScale","lookAt","updateMatrix","geometry","scope","index","undefined","attributes","position","console","error","color","uv","uv2","count","push","fromBufferAttribute","Color","addFace","a","b","materialIndex","vertexColors","clone","Face3","Vector2","groups","group","start","getX","computeFaceNormals","getCenter","negate","translate","center","radius","cb","ab","f","fl","vA","vB","vC","subVectors","cross","copy","areaWeighted","Array","vl","add","__originalFaceNormal","__originalVertexNormals","tmpGeo","faceNormals","dstNormalsFace","dstNormalsVertex","faceNormal","computeVertexNormals","Box3","setFromPoints","Sphere","materialIndexOffset","isGeometry","vertexOffset","vertices1","vertices2","faces1","faces2","colors1","colors2","vertex","vertexCopy","faceVertexNormals","faceVertexColors","faceCopy","faceVertexUvs2","uvs2","uvsCopy","kl","mesh","isMesh","matrixAutoUpdate","merge","precisionPoints","verticesMap","unique","changes","precision","pow","key","round","faceIndicesToRemove","indices","idx","splice","diff","points","point","_id","sort","newUvs1","newUvs2","uvs1","id","metadata","version","generator","parameters","normals","normalsHash","colorsHash","uvs","uvsHash","hasFaceVertexUv","hasFaceNormal","hasFaceVertexNormal","hasFaceColor","g","hasFaceVertexColor","faceType","setBit","getUvIndex","getNormalIndex","getColorIndex","hash","getHex","source","morphTarget","morphNormal","srcVertexNormal","destVertexNormal","DirectGeometry","fromGeometry","buffergeometry","BufferGeometry","positions","setAttribute","BufferAttribute","copyVector3sArray","copyColorsArray","copyVector2sArray","array","attribute","Float32BufferAttribute","morphAttributes","copyVector4sArray","warn","dispatchEvent","isPoints","isLine","copyArray","toBufferGeometry","EventDispatcher","prototype","morphTargetsPosition","hasFaceVertexUv2","morphTargetsLength","morphTargetsNormal","morphNormalsLength","hasSkinIndices","hasSkinWeights","vertexUvs","computeGroups","isVector3","isArray","isColor","constructor"],"sourceRoot":""}