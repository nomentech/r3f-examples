{"version":3,"file":"static/js/51.e09c1657.chunk.js","mappings":"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","sources":["basic-examples/bezier-curves-nodes/Nodes.tsx","basic-examples/bezier-curves-nodes/Example.tsx"],"sourcesContent":["import { createContext, forwardRef, useContext, useEffect, useLayoutEffect, useMemo, useRef, useState } from 'react'\nimport * as THREE from 'three'\nimport { useFrame, useThree } from '@react-three/fiber'\nimport { Line, Text } from '@react-three/drei'\nimport { useDrag } from '@use-gesture/react'\nimport without from 'lodash-es/without'\n\nconst removeZ = new THREE.Vector3(1, 1, 0)\nconst temp = new THREE.Vector3()\nconst context: any = createContext(null)\n\nconst Dot = (props: any) => {\n  return (\n    <mesh {...props}>\n      <circleGeometry args={[0.05, 16]} />\n      <meshBasicMaterial color='#ff1050' />\n    </mesh>\n  )\n}\n\nconst Nodes = ({ children, ...props }: any) => {\n  const [nodes, set] = useState<any[]>([])\n  const lines = useMemo(() => {\n    const lines: any[] = []\n    for (let node of nodes) {\n      if (node.connectedTo.length) {\n        const connections = node.connectedTo.map((ref: any) => [node.position, ref.current.position])\n        connections.forEach(([start, end]: any[]) => {\n          start = start.clone().add(temp.set(0.25, 0, 0))\n          end = end.clone().add(temp.set(-0.25, 0, 0))\n          const mid = start.clone().add(end.clone().sub(start)).add(new THREE.Vector3(0, (start.y-end.y), 0))\n          lines.push(new THREE.QuadraticBezierCurve3(start, mid, end).getPoints(20))\n        })\n      }\n    }\n    return lines\n  }, [nodes])\n\n  const group: any = useRef()\n  useFrame((_, delta) => group.current.children.forEach((line: any) => (line.material.uniforms.dashOffset.value -= delta)))\n\n  return (\n    <context.Provider value={set}>\n      <group ref={group}>\n        {lines.map((points, index) => (\n          <Line key={index} points={points} color='white' dashed dashScale={5} alphaWrite={undefined} />\n        ))}\n      </group>\n      { children }\n      {lines.map((points, i) => (\n        <group key={i} position-z={1}>\n          <Dot position={points[0]} />\n          <Dot position={points[points.length-1]} />\n        </group>\n      ))}\n    </context.Provider>\n  )\n}\n\nconst Node = forwardRef(({ name, connectedTo=[], position=[0, 0, 0], ...props }: any, ref: any) => {\n  const set: any = useContext(context)\n  const { size, camera } = useThree()\n  const [pos, setPos] = useState(() => new THREE.Vector3(...position))\n  const state = useMemo(() => ({ position: pos, connectedTo }), [pos, connectedTo])\n\n  useLayoutEffect(() => {\n    // Register this node on mount\n    set((nodes: any) => [...nodes, state])\n    // Unregister on unmount\n    return () => void set((nodes: any) => without(nodes, state))\n  }, [state, pos])\n\n  // Drag n drop, hover\n  const [hovered, setHovered] = useState(false)\n  useEffect(() => void (document.body.style.cursor = hovered ? 'grab' : 'auto'), [hovered])\n  const bind = useDrag(({ down, xy: [x, y] }) => {\n    document.body.style.cursor = down ? 'grabbing' : 'grab'\n    const unprojectedPoint = temp\n      .set((x / size.width) * 2 - 1, -(y / size.height) * 2 + 1, 0)\n      .unproject(camera)\n      .multiply(removeZ)\n      .clone()\n    setPos(unprojectedPoint)\n  })\n\n  return (\n    <mesh ref={ref} {...bind()} onPointerOver={() => setHovered(true)} onPointerOut={() => setHovered(false)} position={pos} {...props}>\n      <boxBufferGeometry args={[0.5, 0.5, 0.5]} />\n      <meshBasicMaterial color={hovered ? '#ff1050' : 'black'} />\n      <Text position={[0, 0, 1]} fontSize={0.25}>\n        {name}\n      </Text>\n    </mesh>\n  )\n})\n\nexport { Nodes, Node }","import { createRef, Suspense, useState } from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport { Nodes, Node } from './Nodes'\n\nconst Example = ({ children }: any) => {\n  const [[a, b, c, d, e]] = useState(() => [...Array(5)].map(createRef))\n  return (\n    <>\n      { children }\n      <Canvas orthographic camera={{ zoom: 80 }} dpr={[1, 2]}>\n        <color attach='background' args={[0x505050]} />\n        <Suspense fallback={null}>\n          <Nodes dashed color='#ff1050' lineWidth={1}>\n            <Node ref={a} name=\"a\" position={[-2, 2.5, 0]} connectedTo={[b, c, e]} />\n            <Node ref={b} name=\"b\" position={[0, 1, 0]} connectedTo={[d, a]} />\n            <Node ref={c} name=\"c\" position={[-0.25, 0, 0]} />\n            <Node ref={d} name=\"d\" position={[2, 0.5, 0]} />\n            <Node ref={e} name=\"e\" position={[-0.5, -1, 0]} />\n          </Nodes>\n        </Suspense>\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example"],"names":["removeZ","THREE","temp","context","createContext","Dot","props","args","color","Nodes","children","useState","nodes","set","lines","useMemo","node","connectedTo","length","map","ref","position","current","forEach","start","end","clone","add","mid","sub","y","push","getPoints","group","useRef","useFrame","_","delta","line","material","uniforms","dashOffset","value","Provider","points","index","Line","dashed","dashScale","alphaWrite","undefined","i","Node","forwardRef","name","useContext","useThree","size","camera","pos","setPos","state","useLayoutEffect","without","hovered","setHovered","useEffect","document","body","style","cursor","bind","useDrag","down","xy","x","unprojectedPoint","width","height","unproject","multiply","onPointerOver","onPointerOut","Text","fontSize","Array","createRef","a","b","c","d","e","orthographic","zoom","dpr","attach","Suspense","fallback","lineWidth"],"sourceRoot":""}