{"version":3,"file":"static/js/6557.dfdb2cf5.chunk.js","mappings":"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","sources":["showcase/r3f-fairly-realistic-grass-forked/WindLayer.ts","showcase/r3f-fairly-realistic-grass-forked/Flower.tsx","showcase/r3f-fairly-realistic-grass-forked/Grass.tsx","showcase/r3f-fairly-realistic-grass-forked/BlobGeometry.tsx","showcase/r3f-fairly-realistic-grass-forked/Butterfly.tsx","showcase/r3f-fairly-realistic-grass-forked/Example.tsx"],"sourcesContent":["import * as THREE from 'three'\nimport { Abstract } from 'lamina/vanilla'\n\nexport default class WindLayer extends Abstract {\n  static u_time = 0\n  static u_sway = 0.5\n  static u_length = 1\n  static u_spherePos = new THREE.Vector3(0, 0, 0)\n  static u_noiseScale = 10.0\n  static u_noiseStrength = 10.0\n  static u_colorA = new THREE.Color('#ade266').convertSRGBToLinear()\n  static u_colorB = new THREE.Color('#ade266').convertSRGBToLinear()\n\n  static vertexShader = `   \n    uniform float u_time;\n    uniform float u_sway;\n    uniform float u_length;\n    uniform vec3 u_spherePos;\n    varying vec3 v_pos;\n    \n    vec3 main() {\n      float cover = .25;\n      vec3 pos = position.xyz;\n      vec3 base = vec3(pos.x, pos.y, 0.0);\n      vec4 baseGP = instanceMatrix * vec4(base, 1.0);\n      v_pos = baseGP.xyz;\n      vec2 noise = (lamina_noise_curl(baseGP.xyz * vec3(0.1) + u_time * 0.5 * u_sway)).xy;\n      noise = smoothstep(-1.0, 1.0, noise);\n      float swingX = sin(u_time * 2.0 + noise.x * 2.0 * PI) * pow(pos.z, 2.0);\n      float swingY = cos(u_time * 2.0 + noise.y * 2.0 * PI) * pow(pos.z, 2.0);\n      float d = distance(u_spherePos, baseGP.xyz);\n      float radius = 0.75;\n      float intensity = (1. - min(d, radius) / radius) * 0.5;\n      pos.x += swingX + intensity;\n      pos.y += swingY + intensity;\n      return (pos * u_length);\n    }\n  `\n\n  static fragmentShader = `\n  varying vec3 v_pos;\n  uniform float u_noiseScale;\n  uniform float u_noiseStrength;\n  uniform vec3 u_colorA;\n  uniform vec3 u_colorB;\n\n  vec4 main() {\n    float n = lamina_noise_perlin(v_pos * u_noiseScale) * u_noiseStrength;\n    vec3 c =  mix(u_colorB, u_colorA, n);\n    return vec4(vec3(c), 1.);\n  }\n  `\n\n  constructor(props: any) {\n    super(WindLayer as any, {\n      name: 'GrassLayer',\n      ...props\n    })\n  }\n}\n","import * as THREE from 'three'\nimport { forwardRef } from 'react'\nimport { useGLTF, useTexture } from '@react-three/drei'\nimport { LayerMaterial, Texture } from 'lamina'\n\nimport flower from './models/flower.glb'\nimport Albedo_2K__vkbgaihha from './models/Sea_Thrift_vkbgaihha/Albedo_2K__vkbgaihha.jpg'\nimport AO_2K__vkbgaihha from './models/Sea_Thrift_vkbgaihha/AO_2K__vkbgaihha.jpg'\n\nexport const Flower = forwardRef((props, ref: any) => {\n  const { nodes }: any = useGLTF(flower)\n  const map = useTexture(Albedo_2K__vkbgaihha)\n  const ao = useTexture(AO_2K__vkbgaihha)\n\n  return (\n    <group>\n      <instancedMesh ref={ref} args={[undefined, undefined, 1000]} castShadow receiveShadow geometry={nodes._ndyj_Var10_LOD0.geometry} {...props}>\n        <LayerMaterial lighting=\"standard\" side={THREE.DoubleSide}>\n          <Texture map={map} />\n          <Texture map={ao} mode=\"multiply\" />\n        </LayerMaterial>\n      </instancedMesh>\n    </group>\n  )\n})\n","import * as THREE from 'three'\nimport { cloneElement, useEffect, useRef } from 'react'\nimport { extend, Object3DNode, useFrame } from '@react-three/fiber'\nimport { Sampler } from '@react-three/drei'\nimport { Depth, LayerMaterial } from 'lamina'\nimport Perlin from 'perlin.js'\nimport WindLayer from './WindLayer'\nimport { Flower } from './Flower'\n\nPerlin.seed(Math.random())\nextend({ WindLayer })\ndeclare global {\n  namespace JSX {\n      interface IntrinsicElements {\n          'windLayer': Object3DNode<any, typeof WindLayer>,\n      }\n  }\n}\n\nexport function Grass({ children, strands = 50000, ...props }: any) {\n  const geomRef: any = useRef()\n  const meshRef: any = useRef(null)\n  const windLayer: any = useRef(null)\n  const flowerRef: any = useRef()\n\n  useEffect(() => {\n    meshRef.current.geometry.applyMatrix4(new THREE.Matrix4().makeRotationX(Math.PI / 2))\n    meshRef.current.geometry.applyMatrix4(new THREE.Matrix4().makeTranslation(0, 0, 0.5))\n    flowerRef.current.geometry.applyMatrix4(new THREE.Matrix4().makeRotationX(Math.PI / 2))\n    flowerRef.current.geometry.applyMatrix4(new THREE.Matrix4().makeTranslation(0, 0, 0.5))\n  }, [])\n\n  useFrame(() => (windLayer.current.time += 0.005))\n\n  return (\n    <>\n      {cloneElement(children, { ref: geomRef })}\n      <instancedMesh ref={meshRef} args={[undefined, undefined, strands]} {...props}>\n        <coneGeometry args={[0.05, 1.0, 2, 20, false, 0, Math.PI]} />\n        <LayerMaterial side={THREE.DoubleSide} lighting=\"standard\" envMapIntensity={1}>\n          <Depth colorA=\"#221600\" colorB=\"#ade266\" near={0.14} far={1.52} mapping=\"world\" />\n          <windLayer\n            args={[{ mode: 'multiply' }]}\n            colorA=\"#ffffff\"\n            colorB=\"#acf5ce\"\n            noiseScale={10}\n            noiseStrength={5}\n            length={1.2}\n            sway={0.5}\n            ref={windLayer}\n          />\n        </LayerMaterial>\n      </instancedMesh>\n      <Flower ref={flowerRef} />\n      <group>\n        <Sampler\n          transform={(props) => {\n            const object = transform(props)\n            const n = Perlin.simplex3(...props.position.clone().multiplyScalar(5).toArray())\n            object.scale.setScalar(THREE.MathUtils.mapLinear(n, -1, 1, 0.3, 1) * 0.1)\n            return object\n          }}\n          mesh={geomRef}\n          instances={meshRef}\n        />\n        <Sampler transform={transform} mesh={geomRef} instances={flowerRef} weight=\"density\" />\n      </group>\n    </>\n  )\n}\n\nconst transform = ({ position, normal, dummy: object }: any) => {\n  object.scale.setScalar(Math.random() * 0.0075)\n  object.position.copy(position)\n  object.lookAt(normal.add(position))\n  object.rotation.y += Math.random() - 0.5 * (Math.PI * 0.5)\n  object.rotation.x += Math.random() - 0.5 * (Math.PI * 0.5)\n  object.rotation.z += Math.random() - 0.5 * (Math.PI * 0.5)\n  object.updateMatrix()\n  return object\n}\n","import * as THREE from 'three'\nimport { useEffect, useRef, forwardRef } from 'react'\nimport { ComputedAttribute } from '@react-three/drei'\nimport Perlin from 'perlin.js'\n\nPerlin.seed(Math.random())\n\nconst computeFlowerDensity = (geometry: any) => {\n  const position = geometry.getAttribute('position')\n  const density = []\n  const vertex = new THREE.Vector3()\n  for (let i = 0; i < position.count; i++) {\n    vertex.fromBufferAttribute(position, i)\n    const p = vertex.clone().multiplyScalar(1)\n    const n = Perlin.simplex3(...p.toArray())\n    let m = THREE.MathUtils.mapLinear(n, -1, 1, 0, 1)\n    if (m > 0.15) m = 0\n    density.push(m)\n  }\n  return new THREE.Float32BufferAttribute(density, 1)\n}\n\nexport const BlobGeometry = forwardRef((props, ref: any) => {\n  const geom: any = useRef()\n\n  useEffect(() => {\n    const vertex = new THREE.Vector3()\n    const normal = new THREE.Vector3()\n    let newPositionAttribute = []\n    const positionAttribute = geom.current.getAttribute('position')\n    const normalAttribute = geom.current.getAttribute('normal')\n    for (let i = 0; i < positionAttribute.count; i++) {\n      vertex.fromBufferAttribute(positionAttribute, i)\n      normal.fromBufferAttribute(normalAttribute, i)\n      const v = vertex.multiplyScalar(0.5)\n      const n = Perlin.simplex3(...v.toArray())\n      vertex.add(normal.multiplyScalar(n * 0.3))\n      newPositionAttribute.push(vertex.x, vertex.y, vertex.z)\n    }\n    geom.current.setAttribute('position', new THREE.Float32BufferAttribute(newPositionAttribute, 3))\n    geom.current.attributes.position.needsUpdate = true\n    geom.current.computeVertexNormals()\n  }, [])\n\n  return (\n    <mesh ref={ref}>\n      <icosahedronBufferGeometry args={[1.5, 16]} ref={geom}>\n        <ComputedAttribute name=\"density\" compute={computeFlowerDensity} usage={THREE.StaticReadUsage} />\n      </icosahedronBufferGeometry>\n      <meshBasicMaterial color=\"#221600\" />\n    </mesh>\n  )\n})\n","import * as THREE from 'three'\nimport { useRef, useEffect, useMemo, useState } from 'react'\nimport { useFrame } from '@react-three/fiber'\nimport { useGLTF, useAnimations } from '@react-three/drei'\nimport { SkeletonUtils } from 'three-stdlib'\nimport { FBM } from 'three-noise'\n\nimport butterfly from './models/butterfly.glb'\n\nconst vec = new THREE.Vector2()\nexport function Butterfly(props: any) {\n  const group: any = useRef()\n  const { scene, animations }: any = useGLTF(butterfly)\n  const cloneScene = useMemo(() => SkeletonUtils.clone(scene), [scene])\n  const { actions }: any = useAnimations(animations, group)\n  const [fbm] = useState(() => new FBM({ seed: Math.random() }))\n  const [offset] = useState(() => Math.random() * 100)\n\n  useEffect(() => {\n    actions['ArmatureAction.001'].setEffectiveTimeScale(6)\n    const timeout = setTimeout(() => actions['ArmatureAction.001'].play(), Math.random() * 1000)\n    group.current.rotation.y = offset\n    return () => {\n      clearTimeout(timeout)\n      actions['ArmatureAction.001']?.stop()\n    }\n  }, [])\n\n  useFrame(({ clock }, dt) => {\n    vec.set(clock.elapsedTime, clock.elapsedTime)\n    group.current.position.set(0, fbm.get2(vec), 0)\n    group.current.rotation.y -= dt\n  })\n\n  return (\n    <group ref={group} dispose={null}>\n      <group {...props}>\n        <group scale={0.1} rotation-y={Math.PI / 4} position-y={THREE.MathUtils.randFloat(-3, 1)}>\n          <primitive object={cloneScene} />\n        </group>\n      </group>\n    </group>\n  )\n}\n\nuseGLTF.preload(butterfly)\n","import * as THREE from 'three'\nimport { Canvas } from '@react-three/fiber'\nimport { CameraShake, Cloud, Environment, OrbitControls, Sky } from '@react-three/drei'\n\nimport { Grass } from './Grass'\nimport { BlobGeometry } from './BlobGeometry'\nimport { Butterfly } from './Butterfly'\n// import Particles from './Particles'\n\nconst rand = Array.from({ length: 15 }, () => ({\n  position: [THREE.MathUtils.randFloat(0.5, 0.7), THREE.MathUtils.randFloat(0.5, 0.7), THREE.MathUtils.randFloat(0.5, 0.7)],\n  scale: THREE.MathUtils.randFloat(0.5, 1)\n}))\n\nconst Clouds = () => {\n  return (\n    <group>\n      <Cloud depthTest={false} position={[-10, -6, -10]} speed={0.2} opacity={0.4} />\n      <Cloud depthTest={false} position={[10, 6, -15]} speed={0.2} opacity={0.25} />\n      <Cloud depthTest={false} position={[0, 10, 0]} speed={0.2} opacity={0.2} />\n      <Cloud depthTest={false} position={[0, -10, 0]} speed={0.2} opacity={0.2} />\n      <Cloud depthTest={false} position={[-10, -6, 15]} speed={0.2} opacity={0.3} />\n      <Cloud depthTest={false} position={[10, 6, 10]} speed={0.2} opacity={0.25} />\n    </group>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas dpr={1.5} camera={{position: [1, -1.25, 1] }}>\n        <Grass>\n          <BlobGeometry />\n        </Grass>\n        {rand.map((e, i) => (\n          <Butterfly key={i} {...e} />\n        ))}\n        {/* <Particles amount={333} size={0.01} opacity={0.6} /> */}\n        <Clouds />\n        <Environment preset='sunset' />\n        <OrbitControls makeDefault autoRotate autoRotateSpeed={1.5} />\n        <CameraShake maxRoll={0.2} maxPitch={0.2} maxYaw={0.2} />\n        <Sky />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example"],"names":["WindLayer","props","name","Abstract","u_time","u_sway","u_length","u_spherePos","THREE","u_noiseScale","u_noiseStrength","u_colorA","convertSRGBToLinear","u_colorB","vertexShader","fragmentShader","Flower","forwardRef","ref","nodes","useGLTF","flower","map","useTexture","Albedo_2K__vkbgaihha","ao","AO_2K__vkbgaihha","args","undefined","castShadow","receiveShadow","geometry","_ndyj_Var10_LOD0","lighting","side","mode","Grass","children","strands","geomRef","useRef","meshRef","windLayer","flowerRef","useEffect","current","applyMatrix4","makeRotationX","Math","PI","makeTranslation","useFrame","time","cloneElement","envMapIntensity","colorA","colorB","near","far","mapping","noiseScale","noiseStrength","length","sway","Sampler","transform","object","n","Perlin","position","clone","multiplyScalar","toArray","scale","setScalar","mesh","instances","weight","random","extend","normal","dummy","copy","lookAt","add","rotation","y","x","z","updateMatrix","computeFlowerDensity","getAttribute","density","vertex","i","count","fromBufferAttribute","p","m","push","BlobGeometry","geom","newPositionAttribute","positionAttribute","normalAttribute","v","setAttribute","attributes","needsUpdate","computeVertexNormals","ComputedAttribute","compute","usage","color","vec","Butterfly","group","butterfly","scene","animations","cloneScene","useMemo","SkeletonUtils","actions","useAnimations","useState","FBM","seed","fbm","offset","setEffectiveTimeScale","timeout","setTimeout","play","clearTimeout","stop","dt","clock","set","elapsedTime","get2","dispose","rand","Array","from","Clouds","Cloud","depthTest","speed","opacity","dpr","camera","e","Environment","preset","OrbitControls","makeDefault","autoRotate","autoRotateSpeed","CameraShake","maxRoll","maxPitch","maxYaw","Sky"],"sourceRoot":""}