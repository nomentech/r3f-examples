{"version":3,"file":"static/js/6278.19f5c1a6.chunk.js","mappings":"qNAMMA,GAAeC,EAAAA,EAAAA,GACnB,CACEC,KAAM,EACNC,WAAY,IAAIC,EAAAA,MAAY,WAC5BC,SAAU,IAAID,EAAAA,MAAY,UAJK,2yIAmCnCE,EAAAA,EAAAA,GAAO,CAAEN,aAAAA,I,aCrCHO,EAAc,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,UACjB,GAA0BC,EAAAA,EAAAA,IAAS,SAACC,GAAD,OAAWA,EAAMC,YAA5CC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OAEf,OADAC,EAAAA,EAAAA,IAAS,SAACJ,EAAOK,GAAR,OAAmBR,EAAIS,QAAQf,MAAQc,MAE9C,kBAAME,MAAO,CAACL,EAAOC,EAAQ,GAA7B,WACE,8BACA,yBAAcN,IAAKA,EAAqCW,YAAY,EAAMhB,WAAY,UAAWE,SAAU,SAA7EL,EAAAA,SAgBpC,EAXgB,SAAC,GAAuB,IAArBoB,EAAoB,EAApBA,SACjB,OACE,gCACIA,GACF,SAAC,KAAD,WACE,SAACb,EAAD,W,kJCnBR,SAASN,EAAeoB,EAAUC,EAAcC,EAAgBC,GAC9D,iDACE,aAAc,sBACZ,IAAMC,EAAUC,OAAOD,QAAQJ,GADnB,OAGZ,cAAM,CACJA,SAAUI,EAAQE,QAAO,SAACC,EAAD,GAAwB,mBAAjBC,EAAiB,KAAXC,EAAW,KACzCC,EAAU3B,EAAAA,cAAAA,OAAA,UACbyB,EAAO,CACNC,MAAAA,KAGJ,yBAAYF,GACPG,KAEJ,IACHT,aAAAA,EACAC,eAAAA,IAGFE,EAAQO,SAAQ,gBAAEH,GAAF,sBAAYH,OAAOO,gBAAP,UAA4BJ,EAAM,CAC5DK,IAAK,kBAAM,EAAKb,SAASQ,GAAMC,OAC/BK,IAAK,SAAAC,GAAC,OAAI,EAAKf,SAASQ,GAAMC,MAAQM,QAEpCZ,GAAQA,GAAO,WAtBP,EADhB,kBAAqBpB,EAAAA","sources":["basic-examples/shader-hmr/WaveMaterial.tsx","basic-examples/shader-hmr/Example.tsx","../node_modules/@react-three/drei/core/shaderMaterial.js"],"sourcesContent":["import { extend, Object3DNode } from '@react-three/fiber'\nimport { shaderMaterial } from '@react-three/drei'\nimport * as THREE from 'three'\nimport glsl from 'babel-plugin-glsl/macro'\n\n// This shader is from Bruno Simons Threejs-Journey: https://threejs-journey.xyz\nconst WaveMaterial = shaderMaterial(\n  {\n    time: 0,\n    colorStart: new THREE.Color('#505050'),\n    colorEnd: new THREE.Color('black')\n  },\n  glsl`\n      varying vec2 vUv;\n      void main() {\n        vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n        vec4 viewPosition = viewMatrix * modelPosition;\n        vec4 projectionPosition = projectionMatrix * viewPosition;\n        gl_Position = projectionPosition;\n        vUv = uv;\n      }`,\n  glsl`\n      #pragma glslify: cnoise3 = require(glsl-noise/classic/3d.glsl) \n      uniform float time;\n      uniform vec3 colorStart;\n      uniform vec3 colorEnd;\n      varying vec2 vUv;\n      void main() {\n        vec2 displacedUv = vUv + cnoise3(vec3(vUv * 1.0, time * 0.05));\n        float strength = cnoise3(vec3(displacedUv * 10.0, time * 0.2));\n        float outerGlow = distance(vUv, vec2(0.5)) * 2.0 - 0.5;\n        strength += outerGlow;\n        strength += step(-0.2, strength) * 0.6;\n        strength = clamp(strength, 0.0, 1.0);\n        vec3 color = mix(colorStart, colorEnd, strength);\n        gl_FragColor = vec4(color, 1.0);\n        #include <tonemapping_fragment>\n        #include <encodings_fragment>\n      }`\n)\n\nextend({ WaveMaterial })\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      waveMaterial: Object3DNode<any, typeof WaveMaterial>\n    }\n  }\n}\n\nexport { WaveMaterial }\n","import { useRef } from 'react'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport { WaveMaterial } from './WaveMaterial'\n\nconst ShaderPlane = () => {\n  const ref: any = useRef()\n  const { width, height } = useThree((state) => state.viewport)\n  useFrame((state, delta) => (ref.current.time += delta))\n  return (\n    <mesh scale={[width, height, 1]}>\n      <planeGeometry />\n      <waveMaterial ref={ref} key={(WaveMaterial as any).key} toneMapped={true} colorStart={'#505050'} colorEnd={'black'} />\n    </mesh>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas>\n        <ShaderPlane />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  return class extends THREE.ShaderMaterial {\n    constructor() {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      }); // Create getter/setters\n\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      }));\n      if (onInit) onInit(this);\n    }\n\n  };\n}\n\nexport { shaderMaterial };\n"],"names":["WaveMaterial","shaderMaterial","time","colorStart","THREE","colorEnd","extend","ShaderPlane","ref","useRef","useThree","state","viewport","width","height","useFrame","delta","current","scale","toneMapped","children","uniforms","vertexShader","fragmentShader","onInit","entries","Object","reduce","acc","name","value","uniform","forEach","defineProperty","get","set","v"],"sourceRoot":""}