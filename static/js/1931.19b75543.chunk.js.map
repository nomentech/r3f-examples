{"version":3,"file":"static/js/1931.19b75543.chunk.js","mappings":"qSAMMA,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,aAAe,kCACP,CACJC,QAAS,CAAEC,WAAY,KAAMC,QAAS,KACtCC,SAAU,CACRC,QAAS,CAAEC,KAAM,IAAKC,MAAO,MAC7BC,MAAO,CAAEF,KAAM,IAAKC,MAAO,MAC3BE,KAAM,CAAEH,KAAM,IAAKC,MAAO,GAC1BG,KAAM,CAAEJ,KAAM,IAAKC,MAAO,GAC1BI,eAAgB,CAAEL,KAAM,KAAMC,MAAO,MACrCK,MAAO,CAAEN,KAAM,KAAMC,MAAO,MAC5BM,WAAY,CAAEP,KAAM,KAAMC,MAAO,IAAIO,EAAAA,QAAc,EAAG,EAAG,EAAG,KAC5DC,UAAW,CAAET,KAAM,IAAKC,MAAO,KAC/BS,WAAY,CAAEV,KAAM,IAAKC,MAAO,GAChCU,KAAM,CAAEX,KAAM,IAAKC,MAAO,KAE5BW,aAAa,yNAMbC,eAAe,64JAyDlB,iBA/EGnB,CAAqBc,EAAAA,iBAkF3BM,EAAAA,EAAAA,GAAO,CAAEpB,aAAAA,IAST,IAAMqB,EAAO,SAAC,GAA8B,IAA5Bb,EAA2B,EAA3BA,MAAUc,GAAiB,YACnCC,GAAWC,EAAAA,EAAAA,UACXC,GAAUC,EAAAA,EAAAA,GAAUZ,EAAAA,c,k4UAkB1B,OAjBAa,EAAAA,EAAAA,IAAS,SAACC,GACR,IAAMjB,EAAiBY,EAAIM,QAAQC,SAAS1B,SAASO,eAAeJ,MACpEgB,EAAIM,QAAQE,oBACZpB,EAAeqB,KAAKT,EAAIM,QAAQI,aAAaC,SAC7CX,EAAIM,QAAQC,SAAS1B,SAASK,KAAKF,MAAQqB,EAAMO,MAAMC,YACvDb,EAAIM,QAAQC,SAAS1B,SAASO,eAAeJ,MAAQI,EACrDY,EAAIM,QAAQC,SAAS1B,SAASQ,MAAML,MAAQgB,EAAIM,QAAQjB,UAE1DyB,EAAAA,EAAAA,kBAAgB,WACdZ,EAAQa,UAAYb,EAAQc,UAAYzB,EAAAA,aACxCW,EAAQe,MAAQf,EAAQgB,MAAQ3B,EAAAA,oBAChCS,EAAIM,QAAQC,SAAS1B,SAASC,QAAQE,MAAQkB,EAC9CF,EAAIM,QAAQC,SAAS1B,SAASI,MAAMD,MAAQC,GAAS,IAAIM,EAAAA,MAAY,UACrES,EAAIM,QAAQC,SAAS1B,SAASO,eAAeJ,MAAQ,IAAIO,EAAAA,QACzDS,EAAIM,QAAQC,SAAS1B,SAASQ,MAAML,MAAQ,IAAIO,EAAAA,QAAc,EAAG,EAAG,GACpES,EAAIM,QAAQC,SAAS1B,SAASM,KAAKH,MAAwB,MAAhBmC,KAAKC,WAC/C,KAED,kCAAMpB,IAAKA,GAASD,GAApB,eACE,4BACA,yBAAcsB,aAAW,EAACC,YAAY,EAAOC,WAAW,SCnG9D,EAfgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SACjB,OACE,gCACIA,GACF,UAAC,KAAD,CAAQC,OAAQ,CAAEC,SAAU,CAAC,GAAI,EAAG,GAAIC,IAAK,IAA7C,WACE,kBAAOC,OAAO,aAAaC,KAAM,CAAC,YAClC,SAAC,EAAAC,SAAD,CAAUC,SAAU,KAApB,UACE,SAACjC,EAAD,CAAMT,MAAO,OAEf,SAAC2C,EAAA,EAAD,Y,yMCVFA,EAA6BC,EAAAA,YAAiB,WAUjDjC,GAAQ,IATTkC,EASS,EATTA,YACAT,EAQS,EARTA,OACAU,EAOS,EAPTA,QACAC,EAMS,EANTA,WAMS,IALTC,cAAAA,OAKS,SAJTC,EAIS,EAJTA,SACAC,EAGS,EAHTA,QACAC,EAES,EAFTA,MACGC,GACM,YACHC,GAAaC,EAAAA,EAAAA,IAAS,SAAAtC,GAAK,OAAIA,EAAMqC,cACrCE,GAAgBD,EAAAA,EAAAA,IAAS,SAAAtC,GAAK,OAAIA,EAAMoB,UACxCoB,GAAKF,EAAAA,EAAAA,IAAS,SAAAtC,GAAK,OAAIA,EAAMwC,MAC7BC,GAASH,EAAAA,EAAAA,IAAS,SAAAtC,GAAK,OAAIA,EAAMyC,UACjCC,GAAMJ,EAAAA,EAAAA,IAAS,SAAAtC,GAAK,OAAIA,EAAM0C,OAC9BC,GAAML,EAAAA,EAAAA,IAAS,SAAAtC,GAAK,OAAIA,EAAM2C,OAC9BC,GAAcN,EAAAA,EAAAA,IAAS,SAAAtC,GAAK,OAAIA,EAAM4C,eACtCC,EAAazB,GAAUmB,EACvBO,EAAiBf,GAAcU,EAAOM,WAAaP,EAAGT,WACtDiB,EAAWpB,EAAAA,SAAc,kBAAM,IAAIqB,EAAAA,EAAgBJ,KAAa,CAACA,IAmCvE,OAlCA9C,EAAAA,EAAAA,IAAS,WACHiD,EAASE,SAASF,EAASG,YAC7B,GACJvB,EAAAA,WAAgB,WAEd,OADAoB,EAASI,QAAQN,GACV,WAAWE,EAASK,aAC1B,CAACP,EAAgBhB,EAASkB,EAAUX,IACvCT,EAAAA,WAAgB,WACd,IAAM0B,EAAW,SAAAC,GACflB,IACIP,GAASc,EAAYd,UACrBG,GAAUA,EAASsB,IAMzB,OAHAP,EAASQ,iBAAiB,SAAUF,GAChCpB,GAASc,EAASQ,iBAAiB,QAAStB,GAC5CC,GAAOa,EAASQ,iBAAiB,MAAOrB,GACrC,WACDD,GAASc,EAASS,oBAAoB,QAASvB,GAC/CC,GAAOa,EAASS,oBAAoB,MAAOtB,GAC/Ca,EAASS,oBAAoB,SAAUH,MAExC,CAACrB,EAAUC,EAASC,IACvBP,EAAAA,WAAgB,WACd,GAAIC,EAAa,CACf,IAAM6B,EAAMf,IAAMK,SAIlB,OAHAN,EAAI,CACFM,SAAAA,IAEK,kBAAMN,EAAI,CACfM,SAAUU,QAGb,CAAC7B,EAAamB,IACGpB,EAAAA,cAAoB,aAAa+B,EAAAA,EAAAA,GAAS,CAC5DhE,IAAKA,EACLiE,OAAQZ,EACRhB,cAAeA,GACdI","sources":["basic-examples/shader-fire/shaders/Fire.tsx","basic-examples/shader-fire/Example.tsx","../node_modules/@react-three/drei/core/OrbitControls.js"],"sourcesContent":["import * as THREE from 'three'\nimport { extend, Object3DNode, useFrame, useLoader } from '@react-three/fiber'\nimport glsl from 'babel-plugin-glsl/macro'\nimport fireImg from './fire.png'\nimport { useLayoutEffect, useRef } from 'react'\n\nclass FireMaterial extends THREE.ShaderMaterial {\n  constructor() {\n    super({\n      defines: { ITERATIONS: '20', OCTIVES: '3' },\n      uniforms: {\n        fireTex: { type: 't', value: null } as any,\n        color: { type: 'c', value: null } as any,\n        time: { type: 'f', value: 0.0 } as any,\n        seed: { type: 'f', value: 0.0 } as any,\n        invModelMatrix: { type: 'm4', value: null } as any,\n        scale: { type: 'v3', value: null } as any,\n        noiseScale: { type: 'v4', value: new THREE.Vector4(1, 2, 1, 0.3) } as any,\n        magnitude: { type: 'f', value: 2.5 } as any,\n        lacunarity: { type: 'f', value: 3.0 } as any,\n        gain: { type: 'f', value: 0.6 } as any\n      },\n      vertexShader: `\n        varying vec3 vWorldPos;\n        void main() {\n          gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n          vWorldPos = (modelMatrix * vec4(position, 1.0)).xyz;\n        }`,\n      fragmentShader: glsl`\n        #pragma glslify: snoise = require(glsl-noise/simplex/3d.glsl) \n\n        uniform vec3 color;\n        uniform float time;\n        uniform float seed;\n        uniform mat4 invModelMatrix;\n        uniform vec3 scale;\n        uniform vec4 noiseScale;\n        uniform float magnitude;\n        uniform float lacunarity;\n        uniform float gain;\n        uniform sampler2D fireTex;\n        varying vec3 vWorldPos;              \n\n        float turbulence(vec3 p) {\n          float sum = 0.0;\n          float freq = 1.0;\n          float amp = 1.0;\n          for(int i = 0; i < OCTIVES; i++) {\n            sum += abs(snoise(p * freq)) * amp;\n            freq *= lacunarity;\n            amp *= gain;\n          }\n          return sum;\n        }\n\n        vec4 samplerFire (vec3 p, vec4 scale) {\n          vec2 st = vec2(sqrt(dot(p.xz, p.xz)), p.y);\n          if(st.x <= 0.0 || st.x >= 1.0 || st.y <= 0.0 || st.y >= 1.0) return vec4(0.0);\n          p.y -= (seed + time) * scale.w;\n          p *= scale.xyz;\n          st.y += sqrt(st.y) * magnitude * turbulence(p);\n          if(st.y <= 0.0 || st.y >= 1.0) return vec4(0.0);\n          return texture2D(fireTex, st);\n        }\n\n        vec3 localize(vec3 p) {\n          return (invModelMatrix * vec4(p, 1.0)).xyz;\n        }\n\n        void main() {\n          vec3 rayPos = vWorldPos;\n          vec3 rayDir = normalize(rayPos - cameraPosition);\n          float rayLen = 0.0288 * length(scale.xyz);\n          vec4 col = vec4(0.0);\n          for(int i = 0; i < ITERATIONS; i++) {\n            rayPos += rayDir * rayLen;\n            vec3 lp = localize(rayPos);\n            lp.y += 0.5;\n            lp.xz *= 2.0;\n            col += samplerFire(lp, noiseScale);\n          }\n          col.a = col.r;\n          gl_FragColor = col;\n        }`\n    })\n  }\n}\n\nextend({ FireMaterial })\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      fireMaterial: Object3DNode<any, typeof FireMaterial>\n    }\n  }\n}\n\nconst Fire = ({ color, ...props }: any) => {\n  const ref: any = useRef()\n  const texture = useLoader(THREE.TextureLoader, fireImg)\n  useFrame((state) => {\n    const invModelMatrix = ref.current.material.uniforms.invModelMatrix.value\n    ref.current.updateMatrixWorld()\n    invModelMatrix.copy(ref.current.matrixWorld).invert()\n    ref.current.material.uniforms.time.value = state.clock.elapsedTime\n    ref.current.material.uniforms.invModelMatrix.value = invModelMatrix\n    ref.current.material.uniforms.scale.value = ref.current.scale\n  })\n  useLayoutEffect(() => {\n    texture.magFilter = texture.minFilter = THREE.LinearFilter\n    texture.wrapS = texture.wrapT = THREE.ClampToEdgeWrapping\n    ref.current.material.uniforms.fireTex.value = texture\n    ref.current.material.uniforms.color.value = color || new THREE.Color(0xeeeeee)\n    ref.current.material.uniforms.invModelMatrix.value = new THREE.Matrix4()\n    ref.current.material.uniforms.scale.value = new THREE.Vector3(1, 1, 1)\n    ref.current.material.uniforms.seed.value = Math.random() * 19.19\n  }, [])\n  return (\n    <mesh ref={ref} {...props}>\n      <boxGeometry />\n      <fireMaterial transparent depthWrite={false} depthTest={false} />\n    </mesh>\n  )\n}\n\nexport { Fire }","import { Suspense } from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport { OrbitControls } from '@react-three/drei'\n\nimport { Fire } from './shaders/Fire'\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas camera={{ position: [0, -4, 5], fov: 50 }}>\n        <color attach='background' args={[0x101010]} />\n        <Suspense fallback={null}>\n          <Fire scale={7} />\n        </Suspense>\n        <OrbitControls />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport * as React from 'react';\nimport { OrbitControls as OrbitControls$1 } from 'three-stdlib';\n\nconst OrbitControls = /*#__PURE__*/React.forwardRef(({\n  makeDefault,\n  camera,\n  regress,\n  domElement,\n  enableDamping = true,\n  onChange,\n  onStart,\n  onEnd,\n  ...restProps\n}, ref) => {\n  const invalidate = useThree(state => state.invalidate);\n  const defaultCamera = useThree(state => state.camera);\n  const gl = useThree(state => state.gl);\n  const events = useThree(state => state.events);\n  const set = useThree(state => state.set);\n  const get = useThree(state => state.get);\n  const performance = useThree(state => state.performance);\n  const explCamera = camera || defaultCamera;\n  const explDomElement = domElement || events.connected || gl.domElement;\n  const controls = React.useMemo(() => new OrbitControls$1(explCamera), [explCamera]);\n  useFrame(() => {\n    if (controls.enabled) controls.update();\n  }, -1);\n  React.useEffect(() => {\n    controls.connect(explDomElement);\n    return () => void controls.dispose();\n  }, [explDomElement, regress, controls, invalidate]);\n  React.useEffect(() => {\n    const callback = e => {\n      invalidate();\n      if (regress) performance.regress();\n      if (onChange) onChange(e);\n    };\n\n    controls.addEventListener('change', callback);\n    if (onStart) controls.addEventListener('start', onStart);\n    if (onEnd) controls.addEventListener('end', onEnd);\n    return () => {\n      if (onStart) controls.removeEventListener('start', onStart);\n      if (onEnd) controls.removeEventListener('end', onEnd);\n      controls.removeEventListener('change', callback);\n    };\n  }, [onChange, onStart, onEnd]);\n  React.useEffect(() => {\n    if (makeDefault) {\n      const old = get().controls;\n      set({\n        controls\n      });\n      return () => set({\n        controls: old\n      });\n    }\n  }, [makeDefault, controls]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls,\n    enableDamping: enableDamping\n  }, restProps));\n});\n\nexport { OrbitControls };\n"],"names":["FireMaterial","defines","ITERATIONS","OCTIVES","uniforms","fireTex","type","value","color","time","seed","invModelMatrix","scale","noiseScale","THREE","magnitude","lacunarity","gain","vertexShader","fragmentShader","extend","Fire","props","ref","useRef","texture","useLoader","useFrame","state","current","material","updateMatrixWorld","copy","matrixWorld","invert","clock","elapsedTime","useLayoutEffect","magFilter","minFilter","wrapS","wrapT","Math","random","transparent","depthWrite","depthTest","children","camera","position","fov","attach","args","Suspense","fallback","OrbitControls","React","makeDefault","regress","domElement","enableDamping","onChange","onStart","onEnd","restProps","invalidate","useThree","defaultCamera","gl","events","set","get","performance","explCamera","explDomElement","connected","controls","OrbitControls$1","enabled","update","connect","dispose","callback","e","addEventListener","removeEventListener","old","_extends","object"],"sourceRoot":""}