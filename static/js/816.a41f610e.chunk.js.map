{"version":3,"file":"static/js/816.a41f610e.chunk.js","mappings":"iMAMMA,EAAS,MACTC,EAAI,IAAIC,EAAAA,SACRC,EAAI,IAAID,EAAAA,MACRE,EAASC,MAAMC,KACnB,CAAEN,OAAAA,IACF,kBAAMO,EAAAA,IAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,cAGjCC,EAAQ,WACZ,IAAMC,GAAWC,EAAAA,EAAAA,UACjB,GAAqBC,EAAAA,EAAAA,WAAS,kBAC5BC,aAAaT,KACXD,MAAMC,KAAK,CAAEN,OAAAA,IACb,SAACgB,EAAGC,GAAJ,OACEd,EAAEe,IAAId,EAAOa,IAAIE,sBAAsBC,aAAWC,WAJjDC,GAAP,eAqBA,OAbAC,EAAAA,EAAAA,kBAAgB,WAEd,IADA,IAAIN,EAAI,EACCO,EAAE,EAAGA,EAAE,GAAIA,IAClB,IAAK,IAAIC,EAAE,EAAGA,EAAE,GAAIA,IAClB,IAAK,IAAIC,EAAE,EAAGA,EAAE,GAAIA,IAAK,CACvB,IAAMC,EAAKV,IACXhB,EAAE2B,SAASV,IAAI,GAAGM,EAAG,GAAGC,EAAG,GAAGC,GAC9BzB,EAAE4B,eACFjB,EAAIkB,QAAQC,YAAYJ,EAAI1B,EAAE+B,QAEpCpB,EAAIkB,QAAQG,eAAeC,YAAa,IACvC,KAGD,2BAAetB,IAAKA,EAAKuB,KAAM,MAACC,OAAWA,EAAWpC,GAAtD,WACE,wBAAamC,KAAM,CAAC,IAAM,IAAM,KAAhC,UACE,qCAA0BE,OAAO,mBAAmBF,KAAM,CAACb,EAAY,QAEzE,gCAAqBgB,cAAc,EAAMC,YAAY,QAoB3D,UAfgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SACjB,OACE,gCACIA,GACF,UAAC,KAAD,CAAQC,OAAQ,CAAEb,SAAU,CAAC,EAAG,EAAG,KAAnC,WACE,kBAAOS,OAAO,aAAaF,KAAM,CAAC,aAClC,6BACA,6BAAkBP,SAAU,CAAC,IAAK,IAAK,KAAMc,UAAW,OACxD,SAAC/B,EAAD,KACA,SAAC,IAAD,CAAgBgC,WAAW,Y","sources":["basic-examples/instances/Example.tsx"],"sourcesContent":["import { useLayoutEffect, useRef, useState } from 'react'\nimport * as THREE from 'three'\nimport { Canvas } from '@react-three/fiber'\nimport { OrbitControls } from '@react-three/drei'\nimport niceColors from 'nice-color-palettes'\n\nconst length = 125000\nconst o = new THREE.Object3D()\nconst c = new THREE.Color()\nconst colors = Array.from(\n  { length }, \n  () => niceColors[17][Math.floor(Math.random() * 5)]\n)\n\nconst Boxes = () => {\n  const ref: any = useRef()\n  const [colorArray] = useState(() => \n    Float32Array.from(\n      Array.from({ length }, \n      (_, i) => \n        c.set(colors[i]).convertSRGBToLinear().toArray()).flat()\n    )\n  )\n\n  useLayoutEffect(() => {\n    let i = 0\n    for (let x=0; x<50; x++)\n      for (let y=0; y<50; y++)\n        for (let z=0; z<50; z++) {\n          const id = i++\n          o.position.set(25-x, 25-y, 25-z)\n          o.updateMatrix()\n          ref.current.setMatrixAt(id, o.matrix)\n        }\n    ref.current.instanceMatrix.needUpdate = true\n  }, [])\n\n  return (\n    <instancedMesh ref={ref} args={[undefined, undefined, length]}>\n      <boxGeometry args={[0.15, 0.15, 0.15]}>\n        <instancedBufferAttribute attach='attributes-color' args={[colorArray, 3]} />  \n      </boxGeometry>\n      <meshLambertMaterial vertexColors={true} toneMapped={false} />\n    </instancedMesh>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas camera={{ position: [0, 0, 0.1] }} >\n        <color attach='background' args={[0xf0f0f0]} />\n        <ambientLight />\n        <directionalLight position={[150, 150, 150]} intensity={0.55} />\n        <Boxes />\n        <OrbitControls  enablePan={false} />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example"],"names":["length","o","THREE","c","colors","Array","from","niceColors","Math","floor","random","Boxes","ref","useRef","useState","Float32Array","_","i","set","convertSRGBToLinear","toArray","flat","colorArray","useLayoutEffect","x","y","z","id","position","updateMatrix","current","setMatrixAt","matrix","instanceMatrix","needUpdate","args","undefined","attach","vertexColors","toneMapped","children","camera","intensity","enablePan"],"sourceRoot":""}