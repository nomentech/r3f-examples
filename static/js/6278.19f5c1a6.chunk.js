"use strict";(self.webpackChunkr3f_examples=self.webpackChunkr3f_examples||[]).push([[6278],{6278:function(n,e,t){t.r(e),t.d(e,{default:function(){return f}});var r=t(2791),o=t(4647),c=t(1690),i=t(3429),v=t(7760),g=(0,i.g)({time:0,colorStart:new v.Color("#505050"),colorEnd:new v.Color("black")},"\n      varying vec2 vUv;\n      void main() {\n        vec4 modelPosition = modelMatrix * vec4(position, 1.0);\n        vec4 viewPosition = viewMatrix * modelPosition;\n        vec4 projectionPosition = projectionMatrix * viewPosition;\n        gl_Position = projectionPosition;\n        vUv = uv;\n      }",'\n      //\n// GLSL textureless classic 3D noise "cnoise",\n// with an RSL-style periodic variant "pnoise".\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\n// Version: 2011-10-11\n//\n// Many thanks to Ian McEwan of Ashima Arts for the\n// ideas for permutation and gradient selection.\n//\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\n// Distributed under the MIT license. See LICENSE file.\n// https://github.com/ashima/webgl-noise\n//\n\nvec3 mod289_3998469664(vec3 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289_3998469664(vec4 x)\n{\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute_3998469664(vec4 x)\n{\n  return mod289_3998469664(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt_3998469664(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nvec3 fade_3998469664(vec3 t) {\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\n}\n\n// Classic Perlin noise\nfloat cnoise3(vec3 P)\n{\n  vec3 Pi0 = floor(P); // Integer part for indexing\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\n  Pi0 = mod289_3998469664(Pi0);\n  Pi1 = mod289_3998469664(Pi1);\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\n  vec4 iz0 = Pi0.zzzz;\n  vec4 iz1 = Pi1.zzzz;\n\n  vec4 ixy = permute_3998469664(permute_3998469664(ix) + iy);\n  vec4 ixy0 = permute_3998469664(ixy + iz0);\n  vec4 ixy1 = permute_3998469664(ixy + iz1);\n\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\n  gx0 = fract(gx0);\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\n  vec4 sz0 = step(gz0, vec4(0.0));\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\n\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\n  gx1 = fract(gx1);\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\n  vec4 sz1 = step(gz1, vec4(0.0));\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\n\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\n\n  vec4 norm0 = taylorInvSqrt_3998469664(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\n  g000 *= norm0.x;\n  g010 *= norm0.y;\n  g100 *= norm0.z;\n  g110 *= norm0.w;\n  vec4 norm1 = taylorInvSqrt_3998469664(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\n  g001 *= norm1.x;\n  g011 *= norm1.y;\n  g101 *= norm1.z;\n  g111 *= norm1.w;\n\n  float n000 = dot(g000, Pf0);\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\n  float n111 = dot(g111, Pf1);\n\n  vec3 fade_xyz = fade_3998469664(Pf0);\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x);\n  return 2.2 * n_xyz;\n}\n\n      uniform float time;\n      uniform vec3 colorStart;\n      uniform vec3 colorEnd;\n      varying vec2 vUv;\n      void main() {\n        vec2 displacedUv = vUv + cnoise3(vec3(vUv * 1.0, time * 0.05));\n        float strength = cnoise3(vec3(displacedUv * 10.0, time * 0.2));\n        float outerGlow = distance(vUv, vec2(0.5)) * 2.0 - 0.5;\n        strength += outerGlow;\n        strength += step(-0.2, strength) * 0.6;\n        strength = clamp(strength, 0.0, 1.0);\n        vec3 color = mix(colorStart, colorEnd, strength);\n        gl_FragColor = vec4(color, 1.0);\n        #include <tonemapping_fragment>\n        #include <encodings_fragment>\n      }');(0,c.e)({WaveMaterial:g});var a=t(184),s=function(){var n=(0,r.useRef)(),e=(0,c.w)((function(n){return n.viewport})),t=e.width,o=e.height;return(0,c.x)((function(e,t){return n.current.time+=t})),(0,a.jsxs)("mesh",{scale:[t,o,1],children:[(0,a.jsx)("planeGeometry",{}),(0,a.jsx)("waveMaterial",{ref:n,toneMapped:!0,colorStart:"#505050",colorEnd:"black"},g.key)]})},f=function(n){var e=n.children;return(0,a.jsxs)(a.Fragment,{children:[e,(0,a.jsx)(o.Xz,{children:(0,a.jsx)(s,{})})]})}},3429:function(n,e,t){t.d(e,{g:function(){return x}});var r=t(1413),o=t(4942),c=t(9439),i=t(3144),v=t(5671),g=t(7326),a=t(136),s=t(9388),f=t(7760);function x(n,e,t,x){return function(l){(0,a.Z)(d,l);var u=(0,s.Z)(d);function d(){var i;(0,v.Z)(this,d);var a=Object.entries(n);return i=u.call(this,{uniforms:a.reduce((function(n,e){var t=(0,c.Z)(e,2),i=t[0],v=t[1],g=f.UniformsUtils.clone((0,o.Z)({},i,{value:v}));return(0,r.Z)((0,r.Z)({},n),g)}),{}),vertexShader:e,fragmentShader:t}),a.forEach((function(n){var e=(0,c.Z)(n,1)[0];return Object.defineProperty((0,g.Z)(i),e,{get:function(){return i.uniforms[e].value},set:function(n){return i.uniforms[e].value=n}})})),x&&x((0,g.Z)(i)),i}return(0,i.Z)(d)}(f.ShaderMaterial)}}}]);
//# sourceMappingURL=6278.19f5c1a6.chunk.js.map