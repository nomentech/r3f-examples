{"version":3,"file":"static/js/69.26886eeb.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/core/OrthographicCamera.js","../node_modules/@react-three/drei/core/useCamera.js","basic-examples/viewcube/Example.tsx"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useThree } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\n\nconst OrthographicCamera = /*#__PURE__*/React.forwardRef(({\n  makeDefault,\n  ...props\n}, ref) => {\n  const set = useThree(({\n    set\n  }) => set);\n  const camera = useThree(({\n    camera\n  }) => camera);\n  const size = useThree(({\n    size\n  }) => size);\n  const cameraRef = React.useRef();\n  React.useLayoutEffect(() => {\n    if (cameraRef.current && !props.manual) {\n      cameraRef.current.updateProjectionMatrix();\n    }\n  }, [size, props]);\n  React.useLayoutEffect(() => {\n    if (makeDefault && cameraRef.current) {\n      const oldCam = camera;\n      set(() => ({\n        camera: cameraRef.current\n      }));\n      return () => set(() => ({\n        camera: oldCam\n      }));\n    }\n  }, [camera, cameraRef, makeDefault, set]);\n  return /*#__PURE__*/React.createElement(\"orthographicCamera\", _extends({\n    left: size.width / -2,\n    right: size.width / 2,\n    top: size.height / 2,\n    bottom: size.height / -2,\n    ref: mergeRefs([cameraRef, ref])\n  }, props));\n});\n\nexport { OrthographicCamera };\n","import * as React from 'react';\nimport { Raycaster, Camera } from 'three';\nimport { useThree, applyProps } from '@react-three/fiber';\n\nfunction useCamera(camera, props) {\n  const pointer = useThree(state => state.pointer);\n  const [raycast] = React.useState(() => {\n    const raycaster = new Raycaster();\n    /**\n     * applyProps is an internal method of r3f and\n     * therefore requires its first arg to be an\n     * \"Instance\" a term used with the Reconciler\n     * so we have an expect error to mask this\n     */\n    // @ts-expect-error\n\n    if (props) applyProps(raycaster, props, {});\n    return function (_, intersects) {\n      raycaster.setFromCamera(pointer, camera instanceof Camera ? camera : camera.current);\n      const rc = this.constructor.prototype.raycast.bind(this);\n      if (rc) rc(raycaster, intersects);\n    };\n  });\n  return raycast;\n}\n\nexport { useCamera };\n","import { useMemo, useRef, useState } from 'react'\nimport { Matrix4, Scene } from 'three'\nimport { Canvas, createPortal, useFrame, useThree } from '@react-three/fiber'\nimport { OrbitControls, OrthographicCamera, useCamera } from '@react-three/drei'\n\nconst Viewcube =() => {\n  const { gl, scene, camera, size } = useThree()\n  const virtualScene = useMemo(() => new Scene(), [])\n  const virtualCam: any = useRef()\n  const ref: any = useRef()\n  const [hover, set] = useState<number | null>(null)\n  const matrix = new Matrix4()\n\n  useFrame(() => {\n    matrix.copy(camera.matrix).invert()\n    ref.current.quaternion.setFromRotationMatrix(matrix)\n    gl.autoClear = true\n    gl.render(scene, camera)\n    gl.autoClear = false\n    gl.clearDepth()\n    gl.render(virtualScene, virtualCam.current)\n  }, 1)\n  return createPortal(\n    <>\n      <OrthographicCamera ref={virtualCam} makeDefault={false} position={[0, 0, 100]} />\n      <mesh\n        ref={ref}\n        raycast={useCamera(virtualCam)}\n        position={[size.width/2 - 80, size.height/2 - 80, 0]}\n        onPointerOut={e => set(null)}\n        onPointerMove={(e: any) => set(Math.floor(e.faceIndex / 2))}>\n        {[...Array(6)].map((_, index) => (\n          <meshLambertMaterial attach={`material-${index}`} key={index} color={hover === index ? 'hotpink' : 'white'} />  \n        ))}\n        <boxGeometry args={[60, 60, 60]} />\n      </mesh>\n      <ambientLight intensity={0.5} />\n      <pointLight position={[10, 10, 10]} intensity={0.5} />\n    </>,\n    virtualScene\n  ) as any\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas>\n        <mesh>\n          <torusGeometry args={[1, 0.5, 32, 100]} />\n          <meshNormalMaterial />\n        </mesh>\n        <OrbitControls />\n        <Viewcube />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example"],"names":["OrthographicCamera","React","ref","makeDefault","props","set","useThree","camera","size","cameraRef","current","manual","updateProjectionMatrix","oldCam","_extends","left","width","right","top","height","bottom","mergeRefs","useCamera","pointer","state","raycaster","Raycaster","applyProps","_","intersects","setFromCamera","Camera","rc","this","constructor","prototype","raycast","bind","Viewcube","gl","scene","virtualScene","useMemo","Scene","virtualCam","useRef","useState","hover","matrix","Matrix4","useFrame","copy","invert","quaternion","setFromRotationMatrix","autoClear","render","clearDepth","createPortal","position","onPointerOut","e","onPointerMove","Math","floor","faceIndex","Array","map","index","attach","color","args","intensity","children","OrbitControls"],"sourceRoot":""}