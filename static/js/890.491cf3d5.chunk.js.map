{"version":3,"file":"static/js/890.491cf3d5.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/core/Edges.js","basic-examples/edgesgeometry/Example.tsx","../node_modules/three-stdlib/shaders/HorizontalBlurShader.js","../node_modules/three-stdlib/shaders/VerticalBlurShader.js","../node_modules/@react-three/drei/core/ContactShadows.js","../node_modules/@react-three/drei/core/Stage.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\n\nfunction Edges({\n  userData,\n  children,\n  geometry,\n  threshold = 15,\n  color = 'black',\n  ...props\n}) {\n  const ref = React.useRef(null);\n  React.useLayoutEffect(() => {\n    const parent = ref.current.parent;\n\n    if (parent) {\n      const geom = geometry || parent.geometry;\n\n      if (geom !== ref.current.userData.currentGeom || threshold !== ref.current.userData.currentThreshold) {\n        ref.current.userData.currentGeom = geom;\n        ref.current.userData.currentThreshold = threshold;\n        ref.current.geometry = new THREE.EdgesGeometry(geom, threshold);\n      }\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"lineSegments\", _extends({\n    ref: ref,\n    raycast: () => null\n  }, props), children ? children : /*#__PURE__*/React.createElement(\"lineBasicMaterial\", {\n    color: color\n  }));\n}\n\nexport { Edges };\n","import { Canvas } from '@react-three/fiber'\nimport { Edges, OrbitControls, Stage, useGLTF } from '@react-three/drei'\n\nimport modelPath from '../../models/headless.glb'\nimport { Suspense } from 'react'\n\nconst Model = () => {\n  const { nodes } = useGLTF(modelPath) as any\n  \n  return (\n    <group dispose={null}>\n      <mesh geometry={nodes.Cube.geometry}>\n        <meshStandardMaterial transparent />\n        <Edges />\n      </mesh>\n    </group>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas dpr={[1, 2]} camera={{ position: [0, 0, 3], fov: 50}}>\n        <Suspense fallback={null}>\n          <Stage>\n            <Model />\n          </Stage>\n        </Suspense>\n        <OrbitControls dampingFactor={0.3} />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst HorizontalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    h: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n      varying vec2 vUv;\n\n      void main() {\n\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n      }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n    uniform sampler2D tDiffuse;\n    uniform float h;\n\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvec4 sum = vec4( 0.0 );\n\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\n\n    \tgl_FragColor = sum;\n\n    }\n  `\n};\n\nexport { HorizontalBlurShader };\n","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst VerticalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    v: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n    varying vec2 vUv;\n\n    void main() {\n\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n    }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n\n  uniform sampler2D tDiffuse;\n  uniform float v;\n\n  varying vec2 vUv;\n\n  void main() {\n\n    vec4 sum = vec4( 0.0 );\n\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\n\n    gl_FragColor = sum;\n\n  }\n  `\n};\n\nexport { VerticalBlurShader };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale = 10,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 512,\n  smooth = true,\n  color = '#000000',\n  depthWrite = false,\n  renderOrder,\n  ...props\n}, ref) => {\n  const scene = useThree(state => state.scene);\n  const gl = useThree(state => state.gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color).convertSRGBToLinear()\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale, color]);\n\n  const blurShadows = blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  };\n\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: renderOrder,\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    \"map-encoding\": gl.outputEncoding,\n    transparent: true,\n    opacity: opacity,\n    depthWrite: depthWrite\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Environment } from './Environment.js';\nimport { ContactShadows } from './ContactShadows.js';\n\nconst presets = {\n  rembrandt: {\n    main: [1, 2, 1],\n    fill: [-2, -0.5, -2]\n  },\n  portrait: {\n    main: [-1, 2, 0.5],\n    fill: [-1, 0.5, -1.5]\n  },\n  upfront: {\n    main: [0, 2, 1],\n    fill: [-1, 0.5, -1.5]\n  },\n  soft: {\n    main: [-2, 4, 4],\n    fill: [-1, 0.5, -1.5]\n  }\n};\nfunction Stage({\n  children,\n  controls,\n  shadows = true,\n  adjustCamera = true,\n  environment = 'city',\n  intensity = 1,\n  preset = 'rembrandt',\n  shadowBias = 0,\n  contactShadow = {\n    blur: 2,\n    opacity: 0.5,\n    position: [0, 0, 0]\n  },\n  ...props\n}) {\n  const config = presets[preset];\n  const camera = useThree(state => state.camera); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const defaultControls = useThree(state => state.controls);\n  const outer = React.useRef(null);\n  const inner = React.useRef(null);\n  const [{\n    radius,\n    width,\n    height\n  }, set] = React.useState({\n    radius: 0,\n    width: 0,\n    height: 0\n  });\n  React.useLayoutEffect(() => {\n    outer.current.position.set(0, 0, 0);\n    outer.current.updateWorldMatrix(true, true);\n    const box3 = new THREE.Box3().setFromObject(inner.current);\n    const center = new THREE.Vector3();\n    const sphere = new THREE.Sphere();\n    const height = box3.max.y - box3.min.y;\n    const width = box3.max.x - box3.min.x;\n    box3.getCenter(center);\n    box3.getBoundingSphere(sphere);\n    set({\n      radius: sphere.radius,\n      width,\n      height\n    });\n    outer.current.position.set(-center.x, -center.y + height / 2, -center.z);\n  }, [children]);\n  React.useLayoutEffect(() => {\n    if (adjustCamera) {\n      const y = radius / (height > width ? 1.5 : 2.5);\n      camera.position.set(0, radius * 0.5, radius * 2.5);\n      camera.near = 0.1;\n      camera.far = Math.max(5000, radius * 4);\n      camera.lookAt(0, y, 0);\n      const ctrl = defaultControls || (controls == null ? void 0 : controls.current);\n\n      if (ctrl) {\n        ctrl.target.set(0, y, 0);\n        ctrl.update();\n      }\n    }\n  }, [defaultControls, radius, height, width, adjustCamera]);\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"group\", {\n    ref: outer\n  }, /*#__PURE__*/React.createElement(\"group\", {\n    ref: inner\n  }, children)), contactShadow && /*#__PURE__*/React.createElement(ContactShadows, _extends({\n    scale: radius * 2,\n    far: radius / 2\n  }, contactShadow)), environment && /*#__PURE__*/React.createElement(Environment, {\n    preset: environment\n  }), /*#__PURE__*/React.createElement(\"ambientLight\", {\n    intensity: intensity / 3\n  }), /*#__PURE__*/React.createElement(\"spotLight\", {\n    penumbra: 1,\n    position: [config.main[0] * radius, config.main[1] * radius, config.main[2] * radius],\n    intensity: intensity * 2,\n    castShadow: shadows,\n    \"shadow-bias\": shadowBias\n  }), /*#__PURE__*/React.createElement(\"pointLight\", {\n    position: [config.fill[0] * radius, config.fill[1] * radius, config.fill[2] * radius],\n    intensity: intensity\n  }));\n}\n\nexport { Stage };\n"],"names":["Edges","userData","children","geometry","threshold","color","props","ref","React","parent","current","geom","currentGeom","currentThreshold","THREE","_extends","raycast","Model","nodes","useGLTF","modelPath","dispose","Cube","transparent","dpr","camera","position","fov","Suspense","fallback","Stage","OrbitControls","dampingFactor","HorizontalBlurShader","uniforms","tDiffuse","value","h","vertexShader","fragmentShader","VerticalBlurShader","v","ContactShadows","scale","frames","Infinity","opacity","width","height","blur","far","resolution","smooth","depthWrite","renderOrder","scene","useThree","state","gl","shadowCamera","Array","isArray","renderTarget","renderTargetBlur","texture","generateMipmaps","planeGeometry","rotateX","Math","PI","blurPlane","depthMaterial","depthTest","onBeforeCompile","shader","ucolor","convertSRGBToLinear","replace","horizontalBlurMaterial","verticalBlurMaterial","blurShadows","visible","material","setRenderTarget","render","count","useFrame","initialBackground","background","initialOverrideMaterial","overrideMaterial","rotation","map","outputEncoding","args","presets","rembrandt","main","fill","portrait","upfront","soft","controls","shadows","adjustCamera","environment","intensity","preset","shadowBias","contactShadow","config","defaultControls","outer","inner","radius","set","updateWorldMatrix","box3","setFromObject","center","sphere","max","y","min","x","getCenter","getBoundingSphere","z","near","lookAt","ctrl","target","update","Environment","penumbra","castShadow"],"sourceRoot":""}