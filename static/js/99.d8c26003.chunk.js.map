{"version":3,"file":"static/js/99.d8c26003.chunk.js","mappings":"oLAIMA,EAAQ,SAACC,GACb,OAAqBC,EAAAA,EAAAA,KAAS,0BAASC,KAAM,UAAaF,MAAnDG,GAAP,eAEA,OACE,kBAAMC,eAAa,EAACD,IAAKA,EAAzB,WACE,0BAAeE,KAAM,CAAC,EAAG,MACzB,iCAAsBC,MAAM,gBAK5BC,EAAe,SAACP,GACpB,OAAqBQ,EAAAA,EAAAA,KAAgB,0BAAC,QACpCC,KAAM,IACHT,GAFgC,IAGnCU,OAAQ,CACN,CAAER,KAAM,MAAOS,SAAU,CAAC,EAAG,EAAG,GAAIC,SAAU,CAAC,EAAG,EAAG,GAAIP,KAAM,CAAC,EAAG,EAAG,IACtE,CAAEH,KAAM,SAAUS,SAAU,CAAC,EAAG,EAAG,GAAIC,SAAU,CAAC,EAAG,EAAG,GAAIP,KAAM,CAAC,YALhEF,GAAP,eASA,OACE,mBAAOA,IAAKA,EAAZ,WACE,kBAAMC,eAAa,EAACS,YAAU,EAA9B,WACE,wBAAaR,KAAM,CAAC,EAAG,EAAG,MAC1B,sCAEF,kBAAMD,eAAa,EAACS,YAAU,EAACF,SAAU,CAAC,EAAG,EAAG,GAAhD,WACE,2BAAgBN,KAAM,CAAC,IAAM,GAAI,OACjC,yCAiCR,UA3BgB,SAAC,GAAuB,IAArBS,EAAoB,EAApBA,SAEjB,GAAoBC,EAAAA,EAAAA,WAAS,GAA7B,eAAOC,EAAP,KAAaC,EAAb,KAGA,OAFAC,EAAAA,EAAAA,YAAU,WAAWC,YAAW,kBAAMF,GAAI,KAAO,OAAO,KAGtD,gCACIH,GACF,UAAC,KAAD,CAAQM,IAAK,CAAC,EAAG,GAAIC,SAAO,EAACC,GAAI,CAAEC,OAAO,GACxCC,OAAQ,CAAEb,SAAU,EAAE,EAAG,EAAG,GAAIc,IAAK,IADvC,WAEE,kBAAOC,OAAO,aAAarB,KAAM,CAAC,cAClC,4BAAiBsB,UAAW,KAC5B,sBAAWhB,SAAU,CAAC,EAAG,EAAG,GAAIiB,MAAO,IAAMC,SAAU,EAAGF,UAAW,EACnEd,YAAU,EAAC,iBAAgB,CAAC,KAAM,SACpC,SAAC,KAAD,CAASiB,WAAY,EAArB,UACE,UAAC,KAAD,CAAOC,MAAO,IAAKzB,MAAM,QAAzB,WACE,SAACP,EAAD,CAAOa,SAAU,EAAEoB,KAAKC,GAAG,EAAG,EAAG,MACjC,SAAC1B,EAAD,CAAcI,SAAU,CAAC,IAAK,EAAG,IAAMC,SAAU,CAAC,KAAM,EAAG,MAC3D,SAACL,EAAD,CAAcI,SAAU,CAAC,IAAK,EAAG,KAAOC,SAAU,CAAC,MAAO,KAAM,KAC/DI,IAAQ,SAACT,EAAD,CAAcI,SAAU,CAAC,IAAK,EAAG,KAAOC,SAAU,CAAC,MAAO,KAAM","sources":["basic-examples/simple-physics-demo-with-debug-bounds/Example.tsx"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport { Debug, Physics, useCompoundBody, usePlane } from '@react-three/cannon'\n\nconst Plane = (props: any) => {\n  const [ref]: any[] = usePlane(() => ({ type: 'Static', ...props }))\n\n  return (\n    <mesh receiveShadow ref={ref}>\n      <planeGeometry args={[8, 8]} />\n      <meshStandardMaterial color='#ffb385' />\n    </mesh>\n  )\n}\n\nconst CompoundBody = (props: any) => {\n  const [ref]: any[] = useCompoundBody(() => ({\n    mass: 12,\n    ...props,\n    shapes: [\n      { type: 'Box', position: [0, 0, 0], rotation: [0, 0, 0], args: [1, 1, 1] },\n      { type: 'Sphere', position: [1, 0, 0], rotation: [0, 0, 0], args: [0.65] }\n    ]\n  }))\n\n  return (\n    <group ref={ref}>\n      <mesh receiveShadow castShadow>\n        <boxGeometry args={[1, 1, 1]} />\n        <meshNormalMaterial />\n      </mesh>\n      <mesh receiveShadow castShadow position={[1, 0, 0]}>\n        <sphereGeometry args={[0.65, 16, 16]} />\n        <meshNormalMaterial />\n      </mesh>\n    </group>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  // Mount a 3rd <CompoundBody /> object after 2 seconds\n  const [flag, set] = useState(false)\n  useEffect(() => void setTimeout(() => set(true), 2000), [])\n\n  return (\n    <>\n      { children }\n      <Canvas dpr={[1, 2]} shadows gl={{ alpha: false }} \n        camera={{ position: [-2, 1, 7], fov: 50 }}>\n        <color attach='background' args={['#f6d186']} />\n        <hemisphereLight intensity={1} />\n        <spotLight position={[5, 5, 5]} angle={0.75} penumbra={1} intensity={1} \n          castShadow shadow-mapSize={[1024, 1024]} />\n        <Physics iterations={6} >\n          <Debug scale={1.1} color='black'>\n            <Plane rotation={[-Math.PI/2, 0, 0]} />\n            <CompoundBody position={[1.5, 5, 0.5]} rotation={[1.25, 0, 0]} />\n            <CompoundBody position={[2.5, 3, 0.25]} rotation={[1.25, -1.25, 0]} />\n            {flag && <CompoundBody position={[2.5, 4, 0.25]} rotation={[1.25, -1.25, 0]} />}\n          </Debug>\n        </Physics>\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example"],"names":["Plane","props","usePlane","type","ref","receiveShadow","args","color","CompoundBody","useCompoundBody","mass","shapes","position","rotation","castShadow","children","useState","flag","set","useEffect","setTimeout","dpr","shadows","gl","alpha","camera","fov","attach","intensity","angle","penumbra","iterations","scale","Math","PI"],"sourceRoot":""}