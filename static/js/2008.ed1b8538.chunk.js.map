{"version":3,"file":"static/js/2008.ed1b8538.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/core/Lightformer.js","showcase/building-live-envmaps/Example.tsx","../node_modules/@react-three/drei/core/BakeShadows.js","../node_modules/three-stdlib/shaders/HorizontalBlurShader.js","../node_modules/three-stdlib/shaders/VerticalBlurShader.js","../node_modules/@react-three/drei/core/ContactShadows.js","../node_modules/@react-three/drei/core/Float.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport { applyProps } from '@react-three/fiber';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport mergeRefs from 'react-merge-refs';\n\nconst Lightformer = /*#__PURE__*/React.forwardRef(({\n  args,\n  map,\n  toneMapped = false,\n  color = 'white',\n  form: Form = 'rect',\n  intensity = 1,\n  scale = 1,\n  target,\n  children,\n  ...props\n}, forwardRef) => {\n  // Apply emissive power\n  const ref = React.useRef(null);\n  React.useLayoutEffect(() => {\n    if (!children && !props.material) {\n      applyProps(ref.current.material, {\n        color\n      });\n      ref.current.material.color.multiplyScalar(intensity);\n    }\n  }, [color, intensity, children, props.material]); // Target light\n\n  React.useLayoutEffect(() => {\n    if (target) ref.current.lookAt(Array.isArray(target) ? new THREE.Vector3(...target) : target);\n  }, [target]); // Fix 2-dimensional scale\n\n  scale = Array.isArray(scale) && scale.length === 2 ? [scale[0], scale[1], 1] : scale;\n  return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: mergeRefs([ref, forwardRef]),\n    scale: scale\n  }, props), Form === 'circle' ? /*#__PURE__*/React.createElement(\"ringGeometry\", {\n    args: [0, 1, 64]\n  }) : Form === 'ring' ? /*#__PURE__*/React.createElement(\"ringGeometry\", {\n    args: [0.5, 1, 64]\n  }) : Form === 'rect' ? /*#__PURE__*/React.createElement(\"planeGeometry\", null) : /*#__PURE__*/React.createElement(Form, {\n    args: args\n  }), children ? children : !props.material ? /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    toneMapped: toneMapped,\n    map: map,\n    side: THREE.DoubleSide\n  }) : null);\n});\n\nexport { Lightformer };\n","import { useMemo, useRef } from 'react'\nimport * as THREE from 'three'\nimport { applyProps, Canvas, useFrame } from '@react-three/fiber'\nimport { BakeShadows, ContactShadows, Environment, Float, Lightformer, useGLTF } from '@react-three/drei'\n\nimport porsche from './911-transformed.glb'\nimport { Depth, LayerMaterial } from 'lamina'\n\nconst Porsche = (props: any) => {\n  const { scene, nodes, materials }: any = useGLTF(porsche)\n  useMemo(() => {\n    Object.values(nodes).forEach((node: any) => node.isMesh && (node.receiveShadow = node.castShadow = true))\n    applyProps(materials.rubber, { color: '#222', roughness: 0.6, roughnessMap: null, normalScale: [4, 4] })\n    applyProps(materials.window, { color: 'black', roughness: 0, clearcoat: 0.1 })\n    applyProps(materials.coat, { envMapIntensity: 4, roughness: 0.5, metalness: 1 })\n    applyProps(materials.paint, { roughness: 0.5, metalness: 0.8, color: '#555', envMapIntensity: 2 })\n  }, [nodes, materials])\n  return <primitive object={scene} {...props} />\n}\n\nconst CameraRig = ({ v = new THREE.Vector3() }) => {\n  return useFrame((state) => {\n    const t = state.clock.elapsedTime\n    state.camera.position.lerp(v.set(Math.sin(t/5), 0, 10+Math.cos(t/5)), 0.05)\n    state.camera.lookAt(0, 0, 0)\n  })\n}\n\nconst MovingSpots = ({ position = [2, 0, 2, 0, 2, 0, 2, 0]}) => {\n  const group: any = useRef()\n  useFrame((_, delta) => (group.current.position.z += delta * 15) > 60 && ( group.current.position.z = -60))\n  return (\n    <group rotation={[0, 0.5, 0]}>\n      <group ref={group}>\n        {position.map((x, i) => (\n          <Lightformer key={i} form='circle' intensity={4} rotation={[Math.PI / 2, 0, 0]} position={[x, 4, i*4]} scale={[3, 1, 1]} />\n        ))}\n      </group>\n    </group>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas shadows dpr={[1, 2]} camera={{ position: [-10, 0, 15], fov: 30 }}>\n        <color attach='background' args={[0x101060]} />\n        <ambientLight intensity={0.2} />\n        <spotLight position={[0, 15, 0]} angle={0.3} penumbra={1} castShadow intensity={2} shadow-bias={-0.0001} />\n        <ContactShadows resolution={1024} frames={1} position={[0, -1.16, 0]} scale={10} blur={3} opacity={1} far={10} />\n        <Porsche scale={1.6} position={[-0.5, -0.18, 0]} rotation={[0, Math.PI / 5, 0]} />\n        \n        {/* Renders contents \"live\" into a HDRI environment (scene.environment). */}\n        <Environment frames={Infinity} resolution={256} >\n          {/* Ceiling */}\n          <Lightformer intensity={0.75} rotation-x={Math.PI / 2} position={[0, 5, -9]} scale={[10, 10, 1]} />\n          <MovingSpots />\n          {/* Sides */}\n          <Lightformer intensity={4} rotation-y={Math.PI/2} position={[-5, 1, -1]} scale={[20, 0.1, 1]} />\n          <Lightformer rotation-y={Math.PI / 2} position={[-5, -1, -1]} scale={[20, 0.5, 1]} />\n          <Lightformer rotation-y={-Math.PI / 2} position={[10, 1, 0]} scale={[20, 1, 1]} />\n          {/* Accent (red) */}\n          <Float speed={5} floatIntensity={2} rotationIntensity={2}>\n            <Lightformer form='ring' color='red' intensity={1} scale={10} position={[-15, 4, -18]} target={[0, 0, 0]} />\n          </Float>\n          {/* Background */}\n          <mesh scale={100}>\n            <sphereGeometry args={[1, 64, 64]} />\n            <LayerMaterial side={THREE.BackSide} color='#444' alpha={1} >\n              <Depth colorA='blue' colorB='black' alpha={0.5} mode='normal' near={0} far={300} origin={[100, 100, 100]} />\n            </LayerMaterial>\n          </mesh>\n        </Environment>\n\n        <BakeShadows />\n        <CameraRig />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","import { useEffect } from 'react';\nimport { useThree } from '@react-three/fiber';\n\nfunction BakeShadows() {\n  const gl = useThree(state => state.gl);\n  useEffect(() => {\n    gl.shadowMap.autoUpdate = false;\n    gl.shadowMap.needsUpdate = true;\n    return () => {\n      gl.shadowMap.autoUpdate = gl.shadowMap.needsUpdate = true;\n    };\n  }, [gl.shadowMap]);\n  return null;\n}\n\nexport { BakeShadows };\n","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst HorizontalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    h: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n      varying vec2 vUv;\n\n      void main() {\n\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n      }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n    uniform sampler2D tDiffuse;\n    uniform float h;\n\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvec4 sum = vec4( 0.0 );\n\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\n\n    \tgl_FragColor = sum;\n\n    }\n  `\n};\n\nexport { HorizontalBlurShader };\n","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst VerticalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    v: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n    varying vec2 vUv;\n\n    void main() {\n\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n    }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n\n  uniform sampler2D tDiffuse;\n  uniform float v;\n\n  varying vec2 vUv;\n\n  void main() {\n\n    vec4 sum = vec4( 0.0 );\n\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\n\n    gl_FragColor = sum;\n\n  }\n  `\n};\n\nexport { VerticalBlurShader };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale = 10,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 512,\n  smooth = true,\n  color = '#000000',\n  depthWrite = false,\n  renderOrder,\n  ...props\n}, ref) => {\n  const scene = useThree(state => state.scene);\n  const gl = useThree(state => state.gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color).convertSRGBToLinear()\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale, color]);\n\n  const blurShadows = blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  };\n\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: renderOrder,\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    \"map-encoding\": gl.outputEncoding,\n    transparent: true,\n    opacity: opacity,\n    depthWrite: depthWrite\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n","import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\n\nconst Float = /*#__PURE__*/React.forwardRef(({\n  children,\n  speed = 1,\n  rotationIntensity = 1,\n  floatIntensity = 1,\n  ...props\n}, forwardRef) => {\n  const ref = React.useRef(null);\n  const offset = React.useRef(Math.random() * 10000);\n  useFrame(state => {\n    const t = offset.current + state.clock.getElapsedTime();\n    ref.current.rotation.x = Math.cos(t / 4 * speed) / 8 * rotationIntensity;\n    ref.current.rotation.y = Math.sin(t / 4 * speed) / 8 * rotationIntensity;\n    ref.current.rotation.z = Math.sin(t / 4 * speed) / 20 * rotationIntensity;\n    ref.current.position.y = Math.sin(t / 4 * speed) / 10 * floatIntensity;\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"group\", {\n    ref: mergeRefs([ref, forwardRef])\n  }, children));\n});\n\nexport { Float };\n"],"names":["Lightformer","React","forwardRef","args","map","toneMapped","color","form","Form","intensity","scale","target","children","props","ref","material","applyProps","current","multiplyScalar","lookAt","Array","isArray","THREE","length","_extends","mergeRefs","side","Porsche","useGLTF","porsche","scene","nodes","materials","useMemo","Object","values","forEach","node","isMesh","receiveShadow","castShadow","rubber","roughness","roughnessMap","normalScale","window","clearcoat","coat","envMapIntensity","metalness","paint","object","CameraRig","v","useFrame","state","t","clock","elapsedTime","camera","position","lerp","set","Math","sin","cos","MovingSpots","group","useRef","_","delta","z","rotation","x","i","PI","shadows","dpr","fov","attach","angle","penumbra","ContactShadows","resolution","frames","blur","opacity","far","Environment","Infinity","Float","speed","floatIntensity","rotationIntensity","alpha","colorA","colorB","mode","near","origin","BakeShadows","gl","useThree","useEffect","shadowMap","autoUpdate","needsUpdate","HorizontalBlurShader","uniforms","tDiffuse","value","h","vertexShader","fragmentShader","VerticalBlurShader","width","height","smooth","depthWrite","renderOrder","shadowCamera","renderTarget","renderTargetBlur","texture","generateMipmaps","planeGeometry","rotateX","blurPlane","depthMaterial","depthTest","onBeforeCompile","shader","ucolor","convertSRGBToLinear","replace","horizontalBlurMaterial","verticalBlurMaterial","blurShadows","visible","setRenderTarget","render","count","initialBackground","background","initialOverrideMaterial","overrideMaterial","geometry","outputEncoding","transparent","offset","random","getElapsedTime","y"],"sourceRoot":""}