{"version":3,"file":"static/js/2360.408e7d97.chunk.js","mappings":"8NAGaA,GAAoBC,E,QAAAA,GAC/B,CACEC,aAAc,IACdC,WAAY,EACZC,IAAK,KACLC,KAAM,KACNC,KAAM,MANqC,w7BAkC/CC,EAAAA,EAAAA,GAAO,CAAEP,kBAAAA,I,oKC3BHQ,EAAc,WAClB,IAAMC,GAAWC,EAAAA,EAAAA,UACjB,GAA0CC,EAAAA,EAAAA,GAAW,CAACC,EAAMC,EAAMP,IAAlE,eAAOQ,EAAP,KAAiBC,EAAjB,KAA2BC,EAA3B,KACA,GAA4BC,EAAAA,EAAAA,UAAiB,GAA7C,eAAOC,EAAP,KAAgBC,EAAhB,KAGA,OAFAC,EAAAA,EAAAA,IAAS,kBAAOX,EAAIY,QAAQlB,WAAamB,EAAAA,UAAAA,KAAqBb,EAAIY,QAAQlB,WAAYe,EAAS,QAG7F,kBAAMK,cAAe,kBAAMJ,EAAS,IAAIK,aAAc,kBAAML,EAAS,IAArE,WACE,8BACA,8BACEV,IAAKA,EACLL,IAAKU,EACL,eAAcQ,EAAAA,aACdjB,KAAMU,EACN,gBAAeO,EAAAA,aACfhB,KAAMU,EACN,gBAAeM,EAAAA,aACfG,YAAY,QAmBpB,EAbgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SACjB,OACE,gCACIA,GACF,SAAC,KAAD,CAAQC,OAAQ,CAAEC,SAAU,CAAC,EAAG,EAAG,GAAIC,IAAK,IAA5C,UACE,SAAC,EAAAC,SAAD,CAAUC,SAAU,KAApB,UACE,SAACvB,EAAD,a,kJCrCV,SAASP,EAAe+B,EAAUC,EAAcC,EAAgBC,GAC9D,iDACE,aAAc,sBACZ,IAAMC,EAAUC,OAAOD,QAAQJ,GADnB,OAGZ,cAAM,CACJA,SAAUI,EAAQE,QAAO,SAACC,EAAD,GAAwB,mBAAjBC,EAAiB,KAAXC,EAAW,KACzCC,EAAUpB,EAAAA,cAAAA,OAAA,UACbkB,EAAO,CACNC,MAAAA,KAGJ,yBAAYF,GACPG,KAEJ,IACHT,aAAAA,EACAC,eAAAA,IAGFE,EAAQO,SAAQ,gBAAEH,GAAF,sBAAYH,OAAOO,gBAAP,UAA4BJ,EAAM,CAC5DK,IAAK,kBAAM,EAAKb,SAASQ,GAAMC,OAC/BK,IAAK,SAAAC,GAAC,OAAI,EAAKf,SAASQ,GAAMC,MAAQM,QAEpCZ,GAAQA,GAAO,WAtBP,EADhB,kBAAqBb,EAAAA,kB,iGCCjB0B,EAAW,SAAAC,GAAG,OAAIA,IAAQZ,OAAOY,KAASC,MAAMC,QAAQF,IAAuB,oBAARA,GAC7E,SAAStC,EAAWyC,GAClB,IAAMC,GAAKC,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIA,EAAMF,MAC7BG,GAAWC,EAAAA,EAAAA,GAAUC,EAAAA,cAAeV,EAASI,GAASf,OAAOsB,OAAOP,GAASA,GAQnF,IALAQ,EAAAA,EAAAA,YAAU,YACMV,MAAMC,QAAQK,GAAYA,EAAW,CAACA,IAC9Cb,QAAQU,EAAGQ,eAChB,CAACR,EAAIG,IAEJR,EAASI,GAAQ,CACnB,IAAMU,EAAOzB,OAAOyB,KAAKV,GACnBW,EAAQ,GAId,OAHAD,EAAKnB,SAAQ,SAAAqB,GAAG,OAAI3B,OAAO4B,OAAOF,GAAd,UACjBC,EAAMR,EAASM,EAAKI,QAAQF,SAExBD,EAEP,OAAOP,EAIX7C,EAAWwD,QAAU,SAAAlB,GAAG,OAAIQ,EAAAA,EAAAA,QAAkBC,EAAAA,cAAeT,IAE7DtC,EAAWyD,MAAQ,SAAAhB,GAAK,OAAIK,EAAAA,EAAAA,MAAgBC,EAAAA,cAAeN","sources":["basic-examples/shadermaterials/ImageFadeMaterial.tsx","basic-examples/shadermaterials/Example.tsx","../node_modules/@react-three/drei/core/shaderMaterial.js","../node_modules/@react-three/drei/core/useTexture.js"],"sourcesContent":["import { extend, Object3DNode } from \"@react-three/fiber\"\nimport { shaderMaterial } from \"@react-three/drei\"\n\nexport const ImageFadeMaterial = shaderMaterial(\n  {\n    effectFactor: 1.2,\n    dispFactor: 0,\n    tex: null,\n    tex2: null,\n    disp: null\n  },\n  `varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n      }`,\n  `varying vec2 vUv;\n      uniform sampler2D tex;\n      uniform sampler2D tex2;\n      uniform sampler2D disp;\n      uniform float _rot;\n      uniform float dispFactor;\n      uniform float effectFactor;\n      void main() {\n        vec2 uv = vUv;\n        vec4 disp = texture2D(disp, uv);\n        vec2 distortedPosition = vec2(uv.x, uv.y + dispFactor * (disp.r*effectFactor));\n        vec2 distortedPosition2 = vec2(uv.x, uv.y - (1.0 - dispFactor) * (disp.r*effectFactor));\n        vec4 _texture = texture2D(tex, distortedPosition);\n        vec4 _texture2 = texture2D(tex2, distortedPosition2);\n        vec4 finalTexture = mix(_texture, _texture2, dispFactor);\n        gl_FragColor = finalTexture;\n        #include <tonemapping_fragment>\n        #include <encodings_fragment>\n      }`\n)\n\nextend({ ImageFadeMaterial })\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      imageFadeMaterial: Object3DNode<any, typeof ImageFadeMaterial>\n    }\n  }\n}","import { Suspense, useRef, useState } from 'react'\nimport * as THREE from 'three'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { useTexture } from '@react-three/drei'\n\nimport './ImageFadeMaterial'\nimport img1 from '../../textures/Img1.jpg'\nimport img2 from '../../textures/Img2.jpg'\nimport disp from '../../textures/10.jpg'\n\nconst FadingImage = () => {\n  const ref: any = useRef()\n  const [texture1, texture2, dispTexture] = useTexture([img1, img2, disp])\n  const [hovered, setHover] = useState<number>(0)\n  useFrame(() => (ref.current.dispFactor = THREE.MathUtils.lerp(ref.current.dispFactor, hovered, 0.1)))\n\n  return (\n    <mesh onPointerMove={() => setHover(1)} onPointerOut={() => setHover(0)} >\n      <planeGeometry />\n      <imageFadeMaterial\n        ref={ref}\n        tex={texture1}\n        tex-encoding={THREE.sRGBEncoding}\n        tex2={texture2}\n        tex2-encoding={THREE.sRGBEncoding}\n        disp={dispTexture}\n        disp-encoding={THREE.sRGBEncoding}\n        toneMapped={false}\n      />\n    </mesh>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas camera={{ position: [0, 0, 2], fov: 50 }}>\n        <Suspense fallback={null}>\n          <FadingImage />\n        </Suspense>\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","import * as THREE from 'three';\n\nfunction shaderMaterial(uniforms, vertexShader, fragmentShader, onInit) {\n  return class extends THREE.ShaderMaterial {\n    constructor() {\n      const entries = Object.entries(uniforms); // Create unforms and shaders\n\n      super({\n        uniforms: entries.reduce((acc, [name, value]) => {\n          const uniform = THREE.UniformsUtils.clone({\n            [name]: {\n              value\n            }\n          });\n          return { ...acc,\n            ...uniform\n          };\n        }, {}),\n        vertexShader,\n        fragmentShader\n      }); // Create getter/setters\n\n      entries.forEach(([name]) => Object.defineProperty(this, name, {\n        get: () => this.uniforms[name].value,\n        set: v => this.uniforms[name].value = v\n      }));\n      if (onInit) onInit(this);\n    }\n\n  };\n}\n\nexport { shaderMaterial };\n","import { TextureLoader } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { useEffect } from 'react';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input) {\n  const gl = useThree(state => state.gl);\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input); // https://github.com/mrdoob/three.js/issues/22696\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n\n  useEffect(() => {\n    const array = Array.isArray(textures) ? textures : [textures];\n    array.forEach(gl.initTexture);\n  }, [gl, textures]);\n\n  if (IsObject(input)) {\n    const keys = Object.keys(input);\n    const keyed = {};\n    keys.forEach(key => Object.assign(keyed, {\n      [key]: textures[keys.indexOf(key)]\n    }));\n    return keyed;\n  } else {\n    return textures;\n  }\n}\n\nuseTexture.preload = url => useLoader.preload(TextureLoader, url);\n\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\nexport { IsObject, useTexture };\n"],"names":["ImageFadeMaterial","shaderMaterial","effectFactor","dispFactor","tex","tex2","disp","extend","FadingImage","ref","useRef","useTexture","img1","img2","texture1","texture2","dispTexture","useState","hovered","setHover","useFrame","current","THREE","onPointerMove","onPointerOut","toneMapped","children","camera","position","fov","Suspense","fallback","uniforms","vertexShader","fragmentShader","onInit","entries","Object","reduce","acc","name","value","uniform","forEach","defineProperty","get","set","v","IsObject","url","Array","isArray","input","gl","useThree","state","textures","useLoader","TextureLoader","values","useEffect","initTexture","keys","keyed","key","assign","indexOf","preload","clear"],"sourceRoot":""}