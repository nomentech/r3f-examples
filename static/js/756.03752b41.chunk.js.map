{"version":3,"file":"static/js/756.03752b41.chunk.js","mappings":"kRAOMA,EAAQ,WACZ,IAAMC,ECNR,SAAmBC,EAAOC,GAAoB,IAAZC,EAAY,uDAAH,EACnCC,GAAIC,EAAAA,EAAAA,IAAS,SAAAC,GAAK,OAAIA,EAAMC,YAC5BC,EAAgBN,GAAUE,EAAEK,OAASR,EAAQC,EAASE,EAAEH,MAAQA,EAAQG,EAAEF,OAASA,GAEzF,MAAO,CADcD,GAASG,EAAEK,OAASR,EAAQC,EAASE,EAAEH,MAAQA,EAAQG,EAAEF,OAASA,GAChEC,EAAQK,EAAgBL,EAAQ,GDE1CO,CAAU,KAAM,KAC7B,GAAgBC,EAAAA,EAAAA,WAAS,kBACvBC,OAAOC,OACLC,SAASC,cAAc,SACvB,CACEC,IAAKC,EACLC,YAAa,YACbC,MAAM,EACNC,OAAO,OAPNC,GAAP,eAaA,OAFAC,EAAAA,EAAAA,YAAU,WAAWD,EAAME,SAAQ,CAACF,KAGlC,kBAAMG,MAAOxB,EAAb,WACE,8BACA,8BAAmByB,YAAY,EAA/B,UACE,yBAAcC,OAAO,MAAMC,KAAM,CAACN,GAAQO,SAAUC,EAAAA,qBAiB5D,EAXgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SACjB,OACE,gCACIA,GACF,SAAC,KAAD,CAAQC,cAAY,EAApB,UACE,SAAChC,EAAD","sources":["basic-examples/video-textures/Example.tsx","../node_modules/@react-three/drei/core/useAspect.js"],"sourcesContent":["import { useEffect, useState } from 'react'\nimport * as THREE from 'three'\nimport { Canvas } from '@react-three/fiber'\nimport { useAspect } from '@react-three/drei'\n\nimport videoPath from '../../videos/10.mp4'\n\nconst Scene = () => {\n  const size = useAspect(1800, 1000)\n  const [video] = useState(() => \n    Object.assign(\n      document.createElement('video'),\n      {\n        src: videoPath,\n        crossOrigin: 'Anonymous', \n        loop: true, \n        muted: true\n      }\n    )\n  )\n  useEffect(() => void video.play(), [video])\n\n  return (\n    <mesh scale={size}>\n      <planeGeometry />\n      <meshBasicMaterial toneMapped={false}>\n        <videoTexture attach='map' args={[video]} encoding={THREE.sRGBEncoding} />\n      </meshBasicMaterial>\n    </mesh>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas orthographic>\n        <Scene />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","import { useThree } from '@react-three/fiber';\n\nfunction useAspect(width, height, factor = 1) {\n  const v = useThree(state => state.viewport);\n  const adaptedHeight = height * (v.aspect > width / height ? v.width / width : v.height / height);\n  const adaptedWidth = width * (v.aspect > width / height ? v.width / width : v.height / height);\n  return [adaptedWidth * factor, adaptedHeight * factor, 1];\n}\n\nexport { useAspect };\n"],"names":["Scene","size","width","height","factor","v","useThree","state","viewport","adaptedHeight","aspect","useAspect","useState","Object","assign","document","createElement","src","videoPath","crossOrigin","loop","muted","video","useEffect","play","scale","toneMapped","attach","args","encoding","THREE","children","orthographic"],"sourceRoot":""}