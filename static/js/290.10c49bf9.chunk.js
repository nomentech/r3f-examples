"use strict";(self.webpackChunkr3f_examples=self.webpackChunkr3f_examples||[]).push([[290],{6567:function(e,t,r){r.r(t),r.d(t,{default:function(){return G}});var o=r(4925),s=r(1413),n=r(9439),a=r(2791),i=r(7760),l=r(4647),h=r(3655),c=r(5712),u=r(5671),v=r(3144),f=r(136),m=r(9388),p=new i.Matrix4,d=new i.Object3D,g=new i.Vector3,x=function(e){(0,f.Z)(r,e);var t=(0,m.Z)(r);function r(){var e;return(0,u.Z)(this,r),(e=t.call(this)).isGeometry=!0,e.uuid=i.MathUtils.generateUUID(),e.name="",e.type="Geometry",e.vertices=[],e.colors=[],e.faces=[],e.faceVertexUvs=[[]],e.morphTargets=[],e.morphNormals=[],e.skinWeights=[],e.skinIndices=[],e.lineDistances=[],e.boundingBox=null,e.boundingSphere=null,e.elementsNeedUpdate=!1,e.verticesNeedUpdate=!1,e.uvsNeedUpdate=!1,e.normalsNeedUpdate=!1,e.colorsNeedUpdate=!1,e.lineDistancesNeedUpdate=!1,e.groupsNeedUpdate=!1,e}return(0,v.Z)(r,[{key:"applyMatrix4",value:function(e){for(var t=(new i.Matrix3).getNormalMatrix(e),r=0,o=this.vertices.length;r<o;r++){this.vertices[r].applyMatrix4(e)}for(var s=0,n=this.faces.length;s<n;s++){var a=this.faces[s];a.normal.applyMatrix3(t).normalize();for(var l=0,h=a.vertexNormals.length;l<h;l++)a.vertexNormals[l].applyMatrix3(t).normalize()}return null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this.verticesNeedUpdate=!0,this.normalsNeedUpdate=!0,this}},{key:"rotateX",value:function(e){return p.makeRotationX(e),this.applyMatrix4(p),this}},{key:"rotateY",value:function(e){return p.makeRotationY(e),this.applyMatrix4(p),this}},{key:"rotateZ",value:function(e){return p.makeRotationZ(e),this.applyMatrix4(p),this}},{key:"translate",value:function(e,t,r){return p.makeTranslation(e,t,r),this.applyMatrix4(p),this}},{key:"scale",value:function(e,t,r){return p.makeScale(e,t,r),this.applyMatrix4(p),this}},{key:"lookAt",value:function(e){return d.lookAt(e),d.updateMatrix(),this.applyMatrix4(d.matrix),this}},{key:"fromBufferGeometry",value:function(e){var t=this,r=null!==e.index?e.index:void 0,o=e.attributes;if(void 0===o.position)return console.error("THREE.Geometry.fromBufferGeometry(): Position attribute required for conversion."),this;var s=o.position,n=o.normal,a=o.color,l=o.uv,h=o.uv2;void 0!==h&&(this.faceVertexUvs[1]=[]);for(var c=0;c<s.count;c++)t.vertices.push((new i.Vector3).fromBufferAttribute(s,c)),void 0!==a&&t.colors.push((new i.Color).fromBufferAttribute(a,c));function u(e,r,o,s){var c=void 0===a?[]:[t.colors[e].clone(),t.colors[r].clone(),t.colors[o].clone()],u=void 0===n?[]:[(new i.Vector3).fromBufferAttribute(n,e),(new i.Vector3).fromBufferAttribute(n,r),(new i.Vector3).fromBufferAttribute(n,o)],v=new b(e,r,o,u,c,s);t.faces.push(v),void 0!==l&&t.faceVertexUvs[0].push([(new i.Vector2).fromBufferAttribute(l,e),(new i.Vector2).fromBufferAttribute(l,r),(new i.Vector2).fromBufferAttribute(l,o)]),void 0!==h&&t.faceVertexUvs[1].push([(new i.Vector2).fromBufferAttribute(h,e),(new i.Vector2).fromBufferAttribute(h,r),(new i.Vector2).fromBufferAttribute(h,o)])}var v=e.groups;if(v.length>0)for(var f=0;f<v.length;f++)for(var m=v[f],p=m.start,d=p,g=p+m.count;d<g;d+=3)void 0!==r?u(r.getX(d),r.getX(d+1),r.getX(d+2),m.materialIndex):u(d,d+1,d+2,m.materialIndex);else if(void 0!==r)for(var x=0;x<r.count;x+=3)u(r.getX(x),r.getX(x+1),r.getX(x+2));else for(var y=0;y<s.count;y+=3)u(y,y+1,y+2);return this.computeFaceNormals(),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),this}},{key:"center",value:function(){return this.computeBoundingBox(),this.boundingBox.getCenter(g).negate(),this.translate(g.x,g.y,g.z),this}},{key:"normalize",value:function(){this.computeBoundingSphere();var e=this.boundingSphere.center,t=this.boundingSphere.radius,r=0===t?1:1/t,o=new i.Matrix4;return o.set(r,0,0,-r*e.x,0,r,0,-r*e.y,0,0,r,-r*e.z,0,0,0,1),this.applyMatrix4(o),this}},{key:"computeFaceNormals",value:function(){for(var e=new i.Vector3,t=new i.Vector3,r=0,o=this.faces.length;r<o;r++){var s=this.faces[r],n=this.vertices[s.a],a=this.vertices[s.b],l=this.vertices[s.c];e.subVectors(l,a),t.subVectors(n,a),e.cross(t),e.normalize(),s.normal.copy(e)}}},{key:"computeVertexNormals",value:function(){for(var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=new Array(this.vertices.length),r=0,o=this.vertices.length;r<o;r++)t[r]=new i.Vector3;if(e)for(var s=new i.Vector3,n=new i.Vector3,a=0,l=this.faces.length;a<l;a++){var h=this.faces[a],c=this.vertices[h.a],u=this.vertices[h.b],v=this.vertices[h.c];s.subVectors(v,u),n.subVectors(c,u),s.cross(n),t[h.a].add(s),t[h.b].add(s),t[h.c].add(s)}else{this.computeFaceNormals();for(var f=0,m=this.faces.length;f<m;f++){var p=this.faces[f];t[p.a].add(p.normal),t[p.b].add(p.normal),t[p.c].add(p.normal)}}for(var d=0,g=this.vertices.length;d<g;d++)t[d].normalize();for(var x=0,y=this.faces.length;x<y;x++){var b=this.faces[x],N=b.vertexNormals;3===N.length?(N[0].copy(t[b.a]),N[1].copy(t[b.b]),N[2].copy(t[b.c])):(N[0]=t[b.a].clone(),N[1]=t[b.b].clone(),N[2]=t[b.c].clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)}},{key:"computeFlatVertexNormals",value:function(){this.computeFaceNormals();for(var e=0,t=this.faces.length;e<t;e++){var r=this.faces[e],o=r.vertexNormals;3===o.length?(o[0].copy(r.normal),o[1].copy(r.normal),o[2].copy(r.normal)):(o[0]=r.normal.clone(),o[1]=r.normal.clone(),o[2]=r.normal.clone())}this.faces.length>0&&(this.normalsNeedUpdate=!0)}},{key:"computeMorphNormals",value:function(){for(var e=0,t=this.faces.length;e<t;e++){var o=this.faces[e];o.__originalFaceNormal?o.__originalFaceNormal.copy(o.normal):o.__originalFaceNormal=o.normal.clone(),o.__originalVertexNormals||(o.__originalVertexNormals=[]);for(var s=0,n=o.vertexNormals.length;s<n;s++)o.__originalVertexNormals[s]?o.__originalVertexNormals[s].copy(o.vertexNormals[s]):o.__originalVertexNormals[s]=o.vertexNormals[s].clone()}var a=new r;a.faces=this.faces;for(var l=0,h=this.morphTargets.length;l<h;l++){if(!this.morphNormals[l]){this.morphNormals[l]={},this.morphNormals[l].faceNormals=[],this.morphNormals[l].vertexNormals=[];for(var c=this.morphNormals[l].faceNormals,u=this.morphNormals[l].vertexNormals,v=0,f=this.faces.length;v<f;v++){var m=new i.Vector3,p={a:new i.Vector3,b:new i.Vector3,c:new i.Vector3};c.push(m),u.push(p)}}var d=this.morphNormals[l];a.vertices=this.morphTargets[l].vertices,a.computeFaceNormals(),a.computeVertexNormals();for(var g=0,x=this.faces.length;g<x;g++){var y=this.faces[g],b=d.faceNormals[g],N=d.vertexNormals[g];b.copy(y.normal),N.a.copy(y.vertexNormals[0]),N.b.copy(y.vertexNormals[1]),N.c.copy(y.vertexNormals[2])}}for(var w=0,V=this.faces.length;w<V;w++){var U=this.faces[w];U.normal=U.__originalFaceNormal,U.vertexNormals=U.__originalVertexNormals}}},{key:"computeBoundingBox",value:function(){null===this.boundingBox&&(this.boundingBox=new i.Box3),this.boundingBox.setFromPoints(this.vertices)}},{key:"computeBoundingSphere",value:function(){null===this.boundingSphere&&(this.boundingSphere=new i.Sphere),this.boundingSphere.setFromPoints(this.vertices)}},{key:"merge",value:function(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;if(e&&e.isGeometry){var o,s=this.vertices.length,n=this.vertices,a=e.vertices,l=this.faces,h=e.faces,c=this.colors,u=e.colors;void 0!==t&&(o=(new i.Matrix3).getNormalMatrix(t));for(var v=0,f=a.length;v<f;v++){var m=a[v],p=m.clone();void 0!==t&&p.applyMatrix4(t),n.push(p)}for(var d=0,g=u.length;d<g;d++)c.push(u[d].clone());for(var x=0,y=h.length;x<y;x++){var N=h[x],w=void 0,V=void 0,U=N.vertexNormals,k=N.vertexColors,B=new b(N.a+s,N.b+s,N.c+s);B.normal.copy(N.normal),void 0!==o&&B.normal.applyMatrix3(o).normalize();for(var A=0,S=U.length;A<S;A++)w=U[A].clone(),void 0!==o&&w.applyMatrix3(o).normalize(),B.vertexNormals.push(w);B.color.copy(N.color);for(var M=0,G=k.length;M<G;M++)V=k[M],B.vertexColors.push(V.clone());B.materialIndex=N.materialIndex+r,l.push(B)}for(var Z=0,F=e.faceVertexUvs.length;Z<F;Z++){var I=e.faceVertexUvs[Z];void 0===this.faceVertexUvs[Z]&&(this.faceVertexUvs[Z]=[]);for(var T=0,E=I.length;T<E;T++){for(var _=I[T],j=[],D=0,z=_.length;D<z;D++)j.push(_[D].clone());this.faceVertexUvs[Z].push(j)}}}else console.error("THREE.Geometry.merge(): geometry not an instance of THREE.Geometry.",e)}},{key:"mergeMesh",value:function(e){e&&e.isMesh?(e.matrixAutoUpdate&&e.updateMatrix(),this.merge(e.geometry,e.matrix)):console.error("THREE.Geometry.mergeMesh(): mesh not an instance of THREE.Mesh.",e)}},{key:"mergeVertices",value:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:4,t={},r=[],o=[],s=Math.pow(10,e),n=0,a=this.vertices.length;n<a;n++){var i=this.vertices[n],l="".concat(Math.round(i.x*s),"_").concat(Math.round(i.y*s),"_").concat(Math.round(i.z*s));void 0===t[l]?(t[l]=n,r.push(this.vertices[n]),o[n]=r.length-1):o[n]=o[t[l]]}for(var h=[],c=0,u=this.faces.length;c<u;c++){var v=this.faces[c];v.a=o[v.a],v.b=o[v.b],v.c=o[v.c];for(var f=[v.a,v.b,v.c],m=0;m<3;m++)if(f[m]===f[(m+1)%3]){h.push(c);break}}for(var p=h.length-1;p>=0;p--){var d=h[p];this.faces.splice(d,1);for(var g=0,x=this.faceVertexUvs.length;g<x;g++)this.faceVertexUvs[g].splice(d,1)}var y=this.vertices.length-r.length;return this.vertices=r,y}},{key:"setFromPoints",value:function(e){this.vertices=[];for(var t=0,r=e.length;t<r;t++){var o=e[t];this.vertices.push(new i.Vector3(o.x,o.y,o.z||0))}return this}},{key:"sortFacesByMaterialIndex",value:function(){for(var e=this.faces,t=e.length,r=0;r<t;r++)e[r]._id=r;e.sort((function(e,t){return e.materialIndex-t.materialIndex}));var o,s,n=this.faceVertexUvs[0],a=this.faceVertexUvs[1];n&&n.length===t&&(o=[]),a&&a.length===t&&(s=[]);for(var i=0;i<t;i++){var l=e[i]._id;o&&o.push(n[l]),s&&s.push(a[l])}o&&(this.faceVertexUvs[0]=o),s&&(this.faceVertexUvs[1]=s)}},{key:"toJSON",value:function(){var e={metadata:{version:4.5,type:"Geometry",generator:"Geometry.toJSON"}};if(e.uuid=this.uuid,e.type=this.type,""!==this.name&&(e.name=this.name),void 0!==this.parameters){var t=this.parameters;for(var r in t)void 0!==t[r]&&(e[r]=t[r]);return e}for(var o=[],s=0;s<this.vertices.length;s++){var n=this.vertices[s];o.push(n.x,n.y,n.z)}for(var a=[],i=[],l={},h=[],c={},u=[],v={},f=0;f<this.faces.length;f++){var m=this.faces[f],p=void 0!==this.faceVertexUvs[0][f],d=m.normal.length()>0,g=m.vertexNormals.length>0,x=1!==m.color.r||1!==m.color.g||1!==m.color.b,y=m.vertexColors.length>0,b=0;if(b=U(b,0,0),b=U(b,1,!0),b=U(b,2,!1),b=U(b,3,p),b=U(b,4,d),b=U(b,5,g),b=U(b,6,x),b=U(b,7,y),a.push(b),a.push(m.a,m.b,m.c),a.push(m.materialIndex),p){var N=this.faceVertexUvs[0][f];a.push(A(N[0]),A(N[1]),A(N[2]))}if(d&&a.push(k(m.normal)),g){var w=m.vertexNormals;a.push(k(w[0]),k(w[1]),k(w[2]))}if(x&&a.push(B(m.color)),y){var V=m.vertexColors;a.push(B(V[0]),B(V[1]),B(V[2]))}}function U(e,t,r){return r?e|1<<t:e&~(1<<t)}function k(e){var t=e.x.toString()+e.y.toString()+e.z.toString();return void 0!==l[t]||(l[t]=i.length/3,i.push(e.x,e.y,e.z)),l[t]}function B(e){var t=e.r.toString()+e.g.toString()+e.b.toString();return void 0!==c[t]||(c[t]=h.length,h.push(e.getHex())),c[t]}function A(e){var t=e.x.toString()+e.y.toString();return void 0!==v[t]||(v[t]=u.length/2,u.push(e.x,e.y)),v[t]}return e.data={},e.data.vertices=o,e.data.normals=i,h.length>0&&(e.data.colors=h),u.length>0&&(e.data.uvs=[u]),e.data.faces=a,e}},{key:"clone",value:function(){return(new r).copy(this)}},{key:"copy",value:function(e){this.vertices=[],this.colors=[],this.faces=[],this.faceVertexUvs=[[]],this.morphTargets=[],this.morphNormals=[],this.skinWeights=[],this.skinIndices=[],this.lineDistances=[],this.boundingBox=null,this.boundingSphere=null,this.name=e.name;for(var t=e.vertices,r=0,o=t.length;r<o;r++)this.vertices.push(t[r].clone());for(var s=e.colors,n=0,a=s.length;n<a;n++)this.colors.push(s[n].clone());for(var i=e.faces,l=0,h=i.length;l<h;l++)this.faces.push(i[l].clone());for(var c=0,u=e.faceVertexUvs.length;c<u;c++){var v=e.faceVertexUvs[c];void 0===this.faceVertexUvs[c]&&(this.faceVertexUvs[c]=[]);for(var f=0,m=v.length;f<m;f++){for(var p=v[f],d=[],g=0,x=p.length;g<x;g++){var y=p[g];d.push(y.clone())}this.faceVertexUvs[c].push(d)}}for(var b=e.morphTargets,N=0,w=b.length;N<w;N++){var V={};if(V.name=b[N].name,void 0!==b[N].vertices){V.vertices=[];for(var U=0,k=b[N].vertices.length;U<k;U++)V.vertices.push(b[N].vertices[U].clone())}if(void 0!==b[N].normals){V.normals=[];for(var B=0,A=b[N].normals.length;B<A;B++)V.normals.push(b[N].normals[B].clone())}this.morphTargets.push(V)}for(var S=e.morphNormals,M=0,G=S.length;M<G;M++){var Z={};if(void 0!==S[M].vertexNormals){Z.vertexNormals=[];for(var F=0,I=S[M].vertexNormals.length;F<I;F++){var T=S[M].vertexNormals[F],E={};E.a=T.a.clone(),E.b=T.b.clone(),E.c=T.c.clone(),Z.vertexNormals.push(E)}}if(void 0!==S[M].faceNormals){Z.faceNormals=[];for(var _=0,j=S[M].faceNormals.length;_<j;_++)Z.faceNormals.push(S[M].faceNormals[_].clone())}this.morphNormals.push(Z)}for(var D=e.skinWeights,z=0,C=D.length;z<C;z++)this.skinWeights.push(D[z].clone());for(var R=e.skinIndices,H=0,X=R.length;H<X;H++)this.skinIndices.push(R[H].clone());for(var W=e.lineDistances,L=0,P=W.length;L<P;L++)this.lineDistances.push(W[L]);var O=e.boundingBox;null!==O&&(this.boundingBox=O.clone());var Q=e.boundingSphere;return null!==Q&&(this.boundingSphere=Q.clone()),this.elementsNeedUpdate=e.elementsNeedUpdate,this.verticesNeedUpdate=e.verticesNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.lineDistancesNeedUpdate=e.lineDistancesNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,this}},{key:"toBufferGeometry",value:function(){var e=(new y).fromGeometry(this),t=new i.BufferGeometry,r=new Float32Array(3*e.vertices.length);if(t.setAttribute("position",new i.BufferAttribute(r,3).copyVector3sArray(e.vertices)),e.normals.length>0){var o=new Float32Array(3*e.normals.length);t.setAttribute("normal",new i.BufferAttribute(o,3).copyVector3sArray(e.normals))}if(e.colors.length>0){var s=new Float32Array(3*e.colors.length);t.setAttribute("color",new i.BufferAttribute(s,3).copyColorsArray(e.colors))}if(e.uvs.length>0){var n=new Float32Array(2*e.uvs.length);t.setAttribute("uv",new i.BufferAttribute(n,2).copyVector2sArray(e.uvs))}if(e.uvs2.length>0){var a=new Float32Array(2*e.uvs2.length);t.setAttribute("uv2",new i.BufferAttribute(a,2).copyVector2sArray(e.uvs2))}for(var l in t.groups=e.groups,e.morphTargets){for(var h=[],c=e.morphTargets[l],u=0,v=c.length;u<v;u++){var f=c[u],m=new i.Float32BufferAttribute(3*f.data.length,3);m.name=f.name,h.push(m.copyVector3sArray(f.data))}t.morphAttributes[l]=h}if(e.skinIndices.length>0){var p=new i.Float32BufferAttribute(4*e.skinIndices.length,4);t.setAttribute("skinIndex",p.copyVector4sArray(e.skinIndices))}if(e.skinWeights.length>0){var d=new i.Float32BufferAttribute(4*e.skinWeights.length,4);t.setAttribute("skinWeight",d.copyVector4sArray(e.skinWeights))}return null!==e.boundingSphere&&(t.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(t.boundingBox=e.boundingBox.clone()),t}},{key:"computeTangents",value:function(){console.error("THREE.Geometry: .computeTangents() has been removed.")}},{key:"computeLineDistances",value:function(){console.error("THREE.Geometry: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.")}},{key:"applyMatrix",value:function(e){return console.warn("THREE.Geometry: .applyMatrix() has been renamed to .applyMatrix4()."),this.applyMatrix4(e)}},{key:"dispose",value:function(){this.dispatchEvent({type:"dispose"})}}]),r}(i.EventDispatcher);x.createBufferGeometryFromObject=function(e){var t=new i.BufferGeometry,r=e.geometry;if(e.isPoints||e.isLine){var o=new i.Float32BufferAttribute(3*r.vertices.length,3),s=new i.Float32BufferAttribute(3*r.colors.length,3);if(t.setAttribute("position",o.copyVector3sArray(r.vertices)),t.setAttribute("color",s.copyColorsArray(r.colors)),r.lineDistances&&r.lineDistances.length===r.vertices.length){var n=new i.Float32BufferAttribute(r.lineDistances.length,1);t.setAttribute("lineDistance",n.copyArray(r.lineDistances))}null!==r.boundingSphere&&(t.boundingSphere=r.boundingSphere.clone()),null!==r.boundingBox&&(t.boundingBox=r.boundingBox.clone())}else e.isMesh&&(t=r.toBufferGeometry());return t};var y=function(){function e(){(0,u.Z)(this,e),this.vertices=[],this.normals=[],this.colors=[],this.uvs=[],this.uvs2=[],this.groups=[],this.morphTargets={},this.skinWeights=[],this.skinIndices=[],this.boundingBox=null,this.boundingSphere=null,this.verticesNeedUpdate=!1,this.normalsNeedUpdate=!1,this.colorsNeedUpdate=!1,this.uvsNeedUpdate=!1,this.groupsNeedUpdate=!1}return(0,v.Z)(e,[{key:"computeGroups",value:function(e){var t,r,o=[],s=void 0,n=e.faces;for(r=0;r<n.length;r++){var a=n[r];a.materialIndex!==s&&(s=a.materialIndex,void 0!==t&&(t.count=3*r-t.start,o.push(t)),t={start:3*r,materialIndex:s})}void 0!==t&&(t.count=3*r-t.start,o.push(t)),this.groups=o}},{key:"fromGeometry",value:function(e){var t,r=e.faces,o=e.vertices,s=e.faceVertexUvs,n=s[0]&&s[0].length>0,a=s[1]&&s[1].length>0,l=e.morphTargets,h=l.length;if(h>0){t=[];for(var c=0;c<h;c++)t[c]={name:l[c].name,data:[]};this.morphTargets.position=t}var u,v=e.morphNormals,f=v.length;if(f>0){u=[];for(var m=0;m<f;m++)u[m]={name:v[m].name,data:[]};this.morphTargets.normal=u}var p=e.skinIndices,d=e.skinWeights,g=p.length===o.length,x=d.length===o.length;o.length>0&&0===r.length&&console.error("THREE.DirectGeometry: Faceless geometries are not supported.");for(var y=0;y<r.length;y++){var b=r[y];this.vertices.push(o[b.a],o[b.b],o[b.c]);var N=b.vertexNormals;if(3===N.length)this.normals.push(N[0],N[1],N[2]);else{var w=b.normal;this.normals.push(w,w,w)}var V=b.vertexColors;if(3===V.length)this.colors.push(V[0],V[1],V[2]);else{var U=b.color;this.colors.push(U,U,U)}if(!0===n){var k=s[0][y];void 0!==k?this.uvs.push(k[0],k[1],k[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv ",y),this.uvs.push(new i.Vector2,new i.Vector2,new i.Vector2))}if(!0===a){var B=s[1][y];void 0!==B?this.uvs2.push(B[0],B[1],B[2]):(console.warn("THREE.DirectGeometry.fromGeometry(): Undefined vertexUv2 ",y),this.uvs2.push(new i.Vector2,new i.Vector2,new i.Vector2))}for(var A=0;A<h;A++){var S=l[A].vertices;t[A].data.push(S[b.a],S[b.b],S[b.c])}for(var M=0;M<f;M++){var G=v[M].vertexNormals[y];u[M].data.push(G.a,G.b,G.c)}g&&this.skinIndices.push(p[b.a],p[b.b],p[b.c]),x&&this.skinWeights.push(d[b.a],d[b.b],d[b.c])}return this.computeGroups(e),this.verticesNeedUpdate=e.verticesNeedUpdate,this.normalsNeedUpdate=e.normalsNeedUpdate,this.colorsNeedUpdate=e.colorsNeedUpdate,this.uvsNeedUpdate=e.uvsNeedUpdate,this.groupsNeedUpdate=e.groupsNeedUpdate,null!==e.boundingSphere&&(this.boundingSphere=e.boundingSphere.clone()),null!==e.boundingBox&&(this.boundingBox=e.boundingBox.clone()),this}}]),e}(),b=function(){function e(t,r,o,s,n){var a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;(0,u.Z)(this,e),this.a=t,this.b=r,this.c=o,this.normal=s&&s.isVector3?s:new i.Vector3,this.vertexNormals=Array.isArray(s)?s:[],this.color=n&&n.isColor?n:new i.Color,this.vertexColors=Array.isArray(n)?n:[],this.materialIndex=a}return(0,v.Z)(e,[{key:"clone",value:function(){return(new this.constructor).copy(this)}},{key:"copy",value:function(e){this.a=e.a,this.b=e.b,this.c=e.c,this.normal.copy(e.normal),this.color.copy(e.color),this.materialIndex=e.materialIndex;for(var t=0,r=e.vertexNormals.length;t<r;t++)this.vertexNormals[t]=e.vertexNormals[t].clone();for(var o=0,s=e.vertexColors.length;o<s;o++)this.vertexColors[o]=e.vertexColors[o].clone();return this}}]),e}(),N=r.p+"static/media/diamond.77a1a5ac741121afdba8.glb",w=r(184),V=["sides"],U=["size"],k=function(e){var t=(new x).fromBufferGeometry(e);return t.mergeVertices(),[t.vertices.map((function(e){return[e.x,e.y,e.z]})),t.faces.map((function(e){return[e.a,e.b,e.c]})),[]]},B=function(e){var t=(0,h.L)(N).nodes,r=(0,a.useMemo)((function(){return k(t.Cylinder.geometry)}),[t]),o=(0,c.XQ)((function(){return(0,s.Z)((0,s.Z)({mass:100},e),{},{args:r})})),i=(0,n.Z)(o,1)[0];return(0,w.jsx)("mesh",(0,s.Z)((0,s.Z)({castShadow:!0,receiveShadow:!0,ref:i,geometry:t.Cylinder.geometry},e),{},{children:(0,w.jsx)("meshStandardMaterial",{wireframe:!0,color:"white"})}))},A=function(e){var t=e.sides,r=(0,o.Z)(e,V),l=(0,a.useMemo)((function(){return k(new i.ConeGeometry(.7,.7,t,1))}),[]),h=(0,c.XQ)((function(){return(0,s.Z)((0,s.Z)({mass:100},r),{},{args:l})})),u=(0,n.Z)(h,1)[0];return(0,w.jsxs)("mesh",(0,s.Z)((0,s.Z)({castShadow:!0,ref:u},r),{},{children:[(0,w.jsx)("coneGeometry",{args:[.7,.7,t,1]}),(0,w.jsx)("meshNormalMaterial",{})]}))},S=function(e){var t=e.size,r=(0,o.Z)(e,U),l=(0,a.useMemo)((function(){return k(new i.BoxGeometry(t,t,t))}),[]),h=(0,c.XQ)((function(){return(0,s.Z)((0,s.Z)({mass:100},r),{},{args:l})})),u=(0,n.Z)(h,1)[0];return(0,w.jsxs)("mesh",(0,s.Z)((0,s.Z)({castShadow:!0,receiveShadow:!0,ref:u},r),{},{geometry:l,children:[(0,w.jsx)("boxGeometry",{args:[t,t,t]}),(0,w.jsx)("meshPhysicalMaterial",{color:"rebeccapurple"})]}))},M=function(e){var t=(0,c.xK)((function(){return(0,s.Z)({type:"Static"},e)})),r=(0,n.Z)(t,1)[0];return(0,w.jsxs)("mesh",{ref:r,receiveShadow:!0,children:[(0,w.jsx)("planeGeometry",{args:[10,10]}),(0,w.jsx)("shadowMaterial",{color:"#171717"})]})},G=function(e){var t=e.children;return(0,w.jsxs)(w.Fragment,{children:[t,(0,w.jsxs)(l.Xz,{shadows:!0,dpr:[1,2],camera:{position:[-1,1,5],fov:50},children:[(0,w.jsx)("color",{attach:"background",args:["lightpink"]}),(0,w.jsx)("spotLight",{position:[15,15,15],angle:.3,penumbra:1,intensity:2,castShadow:!0,"shadow-mapSize":[2048,2048]}),(0,w.jsx)(a.Suspense,{fallback:null,children:(0,w.jsxs)(c.wI,{children:[(0,w.jsx)(M,{rotation:[-Math.PI/2,0,0]}),(0,w.jsx)(B,{position:[1,5,0],rotation:[.4,.1,.1]}),(0,w.jsx)(A,{position:[-1,5,.5],rotation:[.1,.2,.1],sides:6}),(0,w.jsx)(A,{position:[-1,6,0],rotation:[.5,.1,.1],sides:8}),(0,w.jsx)(S,{position:[2,3,-.3],rotation:[.5,.4,-1],size:.4}),(0,w.jsx)(A,{position:[-.3,7,1],rotation:[1,.4,.1],sides:7})]})})]})]})}}}]);
//# sourceMappingURL=290.10c49bf9.chunk.js.map