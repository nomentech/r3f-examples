{"version":3,"file":"static/js/2085.78edfd50.chunk.js","mappings":"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","sources":["basic-examples/bounds-and-makedefault/Example.tsx","../node_modules/@react-three/drei/core/Bounds.js","../node_modules/three-stdlib/shaders/HorizontalBlurShader.js","../node_modules/three-stdlib/shaders/VerticalBlurShader.js","../node_modules/@react-three/drei/core/ContactShadows.js","../node_modules/@react-three/drei/core/OrbitControls.js"],"sourcesContent":["import { Suspense } from \"react\"\nimport { Canvas } from \"@react-three/fiber\"\nimport { Bounds, ContactShadows, OrbitControls, useBounds, useGLTF } from \"@react-three/drei\"\n\nimport model from '../../models/compressed.glb'\n\nconst Model = ({ name, ...props }: any) => {\n  const { nodes } = useGLTF(model) as any\n\n  return (\n    <mesh \n      geometry={nodes[name].geometry}\n      material={nodes[name].material}\n      material-emissive=\"red\"\n      material-roughness={1}\n      {...props}\n      dispose={null}\n    />\n  )\n}\n\n// This component wraps children in a group with a click handler\n// Clicking any object will refresh and fit bounds\nconst SelectToZoom = ({ children }: any) => {\n  const api = useBounds()\n\n  return (\n    <group\n      onClick={e => {\n        e.stopPropagation()\n        e.delta <= 2 && api.refresh(e.object).fit()\n      }}\n      onPointerMissed={e => (\n        e.button === 0 && api.refresh().fit()\n      )}>\n      { children }\n    </group>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children } \n      <Canvas camera={{ position: [0, -10, 80], fov: 50}} dpr={[1, 2]}>\n        <spotLight position={[-100, -100, -100]} intensity={0.2} angle={0.3} penumbra={1} />\n        <hemisphereLight color=\"white\" groundColor=\"#ff0f00\" position={[-7, 25, 13]} intensity={1} />\n        <Suspense fallback={null}>\n          <Bounds fit clip margin={1.2}>\n            <SelectToZoom>\n              <Model name=\"Curly\" position={[1, -11, -20]} rotation={[2, 0, 0]} />\n              <Model name=\"DNA\" position={[20, 0, -17]} rotation={[1, 1, -2]} />\n              <Model name=\"Headphones\" position={[20, 2, 4]} rotation={[1, 0, -1]} />\n              <Model name=\"Notebook\" position={[-21, -15, -13]} rotation={[2, 0, 1]} />\n              <Model name=\"Rocket003\" position={[18, 15, -25]} rotation={[1, 1, 0]} />\n              <Model name=\"Roundcube001\" position={[-25, -4, 5]} rotation={[1, 0, 0]} scale={0.5} />\n              <Model name=\"Table\" position={[1, -4, -28]} rotation={[1, 0, -1]} scale={0.5} />\n              <Model name=\"VR_Headset\" position={[7, -15, 28]} rotation={[1, 0, -1]} scale={5} />\n              <Model name=\"Zeppelin\" position={[-20, 10, 10]} rotation={[3, -1, 3]} scale={0.005} />\n            </SelectToZoom>\n          </Bounds>\n          <ContactShadows rotation-x={Math.PI / 2} position={[0, -35, 0]} opacity={0.2} width={200} height={200} blur={1} far={50} />\n        </Suspense>\n        <OrbitControls makeDefault minPolarAngle={0} maxPolarAngle={Math.PI / 1.75} />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","import * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\n\nconst isOrthographic = def => def && def.isOrthographicCamera;\n\nconst isBox3 = def => def && def.isBox3;\n\nconst context = /*#__PURE__*/React.createContext(null);\nfunction Bounds({\n  children,\n  damping = 6,\n  fit,\n  clip,\n  observe,\n  margin = 1.2,\n  eps = 0.01,\n  onFit\n}) {\n  const ref = React.useRef(null);\n  const {\n    camera,\n    invalidate,\n    size,\n    controls: controlsImpl\n  } = useThree();\n  const controls = controlsImpl;\n  const onFitRef = React.useRef(onFit);\n  onFitRef.current = onFit;\n\n  function equals(a, b) {\n    return Math.abs(a.x - b.x) < eps && Math.abs(a.y - b.y) < eps && Math.abs(a.z - b.z) < eps;\n  }\n\n  function damp(v, t, lambda, delta) {\n    v.x = THREE.MathUtils.damp(v.x, t.x, lambda, delta);\n    v.y = THREE.MathUtils.damp(v.y, t.y, lambda, delta);\n    v.z = THREE.MathUtils.damp(v.z, t.z, lambda, delta);\n  }\n\n  const [current] = React.useState(() => ({\n    animating: false,\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [goal] = React.useState(() => ({\n    focus: new THREE.Vector3(),\n    camera: new THREE.Vector3(),\n    zoom: 1\n  }));\n  const [box] = React.useState(() => new THREE.Box3());\n  const api = React.useMemo(() => {\n    function getSize() {\n      const size = box.getSize(new THREE.Vector3());\n      const center = box.getCenter(new THREE.Vector3());\n      const maxSize = Math.max(size.x, size.y, size.z);\n      const fitHeightDistance = isOrthographic(camera) ? maxSize * 4 : maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));\n      const fitWidthDistance = isOrthographic(camera) ? maxSize * 4 : fitHeightDistance / camera.aspect;\n      const distance = margin * Math.max(fitHeightDistance, fitWidthDistance);\n      return {\n        box,\n        size,\n        center,\n        distance\n      };\n    }\n\n    return {\n      getSize,\n\n      refresh(object) {\n        if (isBox3(object)) box.copy(object);else {\n          const target = object || ref.current;\n          target.updateWorldMatrix(true, true);\n          box.setFromObject(target);\n        }\n\n        if (box.isEmpty()) {\n          const max = camera.position.length() || 10;\n          box.setFromCenterAndSize(new THREE.Vector3(), new THREE.Vector3(max, max, max));\n        }\n\n        if ((controls == null ? void 0 : controls.constructor.name) === 'OrthographicTrackballControls') {\n          // Put camera on a sphere along which it should moves\n          const {\n            distance\n          } = getSize();\n          const direction = camera.position.clone().sub(controls.target).normalize().multiplyScalar(distance);\n          const newPos = controls.target.clone().add(direction);\n          camera.position.copy(newPos);\n        }\n\n        return this;\n      },\n\n      clip() {\n        const {\n          distance\n        } = getSize();\n        if (controls) controls.maxDistance = distance * 10;\n        camera.near = distance / 100;\n        camera.far = distance * 100;\n        camera.updateProjectionMatrix();\n        if (controls) controls.update();\n        invalidate();\n        return this;\n      },\n\n      fit() {\n        current.camera.copy(camera.position);\n        if (controls) current.focus.copy(controls.target);\n        const {\n          center,\n          distance\n        } = getSize();\n        const direction = center.clone().sub(camera.position).normalize().multiplyScalar(distance);\n        goal.camera.copy(center).sub(direction);\n        goal.focus.copy(center);\n\n        if (isOrthographic(camera)) {\n          current.zoom = camera.zoom;\n          let maxHeight = 0,\n              maxWidth = 0;\n          const vertices = [new THREE.Vector3(box.min.x, box.min.y, box.min.z), new THREE.Vector3(box.min.x, box.max.y, box.min.z), new THREE.Vector3(box.min.x, box.min.y, box.max.z), new THREE.Vector3(box.min.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.max.z), new THREE.Vector3(box.max.x, box.max.y, box.min.z), new THREE.Vector3(box.max.x, box.min.y, box.max.z), new THREE.Vector3(box.max.x, box.min.y, box.min.z)]; // Transform the center and each corner to camera space\n\n          center.applyMatrix4(camera.matrixWorldInverse);\n\n          for (const v of vertices) {\n            v.applyMatrix4(camera.matrixWorldInverse);\n            maxHeight = Math.max(maxHeight, Math.abs(v.y - center.y));\n            maxWidth = Math.max(maxWidth, Math.abs(v.x - center.x));\n          }\n\n          maxHeight *= 2;\n          maxWidth *= 2;\n          const zoomForHeight = (camera.top - camera.bottom) / maxHeight;\n          const zoomForWidth = (camera.right - camera.left) / maxWidth;\n          goal.zoom = Math.min(zoomForHeight, zoomForWidth) / margin;\n\n          if (!damping) {\n            camera.zoom = goal.zoom;\n            camera.updateProjectionMatrix();\n          }\n        }\n\n        if (damping) {\n          current.animating = true;\n        } else {\n          camera.position.copy(goal.camera);\n          camera.lookAt(goal.focus);\n\n          if (controls) {\n            controls.target.copy(goal.focus);\n            controls.update();\n          }\n        }\n\n        if (onFitRef.current) onFitRef.current(this.getSize());\n        invalidate();\n        return this;\n      }\n\n    };\n  }, [box, camera, controls, margin, damping, invalidate]);\n  React.useLayoutEffect(() => {\n    if (controls) {\n      // Try to prevent drag hijacking\n      const callback = () => current.animating = false;\n\n      controls.addEventListener('start', callback);\n      return () => controls.removeEventListener('start', callback);\n    }\n  }, [controls]); // Scale pointer on window resize\n\n  const count = React.useRef(0);\n  React.useLayoutEffect(() => {\n    if (observe || count.current++ === 0) {\n      api.refresh();\n      if (fit) api.fit();\n      if (clip) api.clip();\n    }\n  }, [size, clip, fit, observe, camera, controls]);\n  useFrame((state, delta) => {\n    if (current.animating) {\n      damp(current.focus, goal.focus, damping, delta);\n      damp(current.camera, goal.camera, damping, delta);\n      current.zoom = THREE.MathUtils.damp(current.zoom, goal.zoom, damping, delta);\n      camera.position.copy(current.camera);\n\n      if (isOrthographic(camera)) {\n        camera.zoom = current.zoom;\n        camera.updateProjectionMatrix();\n      }\n\n      if (!controls) {\n        camera.lookAt(current.focus);\n      } else {\n        controls.target.copy(current.focus);\n        controls.update();\n      }\n\n      invalidate();\n      if (isOrthographic(camera) && !(Math.abs(current.zoom - goal.zoom) < eps)) return;\n      if (!isOrthographic(camera) && !equals(current.camera, goal.camera)) return;\n      if (controls && !equals(current.focus, goal.focus)) return;\n      current.animating = false;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", {\n    ref: ref\n  }, /*#__PURE__*/React.createElement(context.Provider, {\n    value: api\n  }, children));\n}\nfunction useBounds() {\n  return React.useContext(context);\n}\n\nexport { Bounds, useBounds };\n","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst HorizontalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    h: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n      varying vec2 vUv;\n\n      void main() {\n\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n      }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n    uniform sampler2D tDiffuse;\n    uniform float h;\n\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvec4 sum = vec4( 0.0 );\n\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\n\n    \tgl_FragColor = sum;\n\n    }\n  `\n};\n\nexport { HorizontalBlurShader };\n","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst VerticalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    v: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n    varying vec2 vUv;\n\n    void main() {\n\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n    }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n\n  uniform sampler2D tDiffuse;\n  uniform float v;\n\n  varying vec2 vUv;\n\n  void main() {\n\n    vec4 sum = vec4( 0.0 );\n\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\n\n    gl_FragColor = sum;\n\n  }\n  `\n};\n\nexport { VerticalBlurShader };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale = 10,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 512,\n  smooth = true,\n  color = '#000000',\n  depthWrite = false,\n  renderOrder,\n  ...props\n}, ref) => {\n  const scene = useThree(state => state.scene);\n  const gl = useThree(state => state.gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color).convertSRGBToLinear()\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale, color]);\n\n  const blurShadows = blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  };\n\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: renderOrder,\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    \"map-encoding\": gl.outputEncoding,\n    transparent: true,\n    opacity: opacity,\n    depthWrite: depthWrite\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport * as React from 'react';\nimport { OrbitControls as OrbitControls$1 } from 'three-stdlib';\n\nconst OrbitControls = /*#__PURE__*/React.forwardRef(({\n  makeDefault,\n  camera,\n  regress,\n  domElement,\n  enableDamping = true,\n  onChange,\n  onStart,\n  onEnd,\n  ...restProps\n}, ref) => {\n  const invalidate = useThree(state => state.invalidate);\n  const defaultCamera = useThree(state => state.camera);\n  const gl = useThree(state => state.gl);\n  const events = useThree(state => state.events);\n  const set = useThree(state => state.set);\n  const get = useThree(state => state.get);\n  const performance = useThree(state => state.performance);\n  const explCamera = camera || defaultCamera;\n  const explDomElement = domElement || events.connected || gl.domElement;\n  const controls = React.useMemo(() => new OrbitControls$1(explCamera), [explCamera]);\n  useFrame(() => {\n    if (controls.enabled) controls.update();\n  }, -1);\n  React.useEffect(() => {\n    controls.connect(explDomElement);\n    return () => void controls.dispose();\n  }, [explDomElement, regress, controls, invalidate]);\n  React.useEffect(() => {\n    const callback = e => {\n      invalidate();\n      if (regress) performance.regress();\n      if (onChange) onChange(e);\n    };\n\n    controls.addEventListener('change', callback);\n    if (onStart) controls.addEventListener('start', onStart);\n    if (onEnd) controls.addEventListener('end', onEnd);\n    return () => {\n      if (onStart) controls.removeEventListener('start', onStart);\n      if (onEnd) controls.removeEventListener('end', onEnd);\n      controls.removeEventListener('change', callback);\n    };\n  }, [onChange, onStart, onEnd]);\n  React.useEffect(() => {\n    if (makeDefault) {\n      const old = get().controls;\n      set({\n        controls\n      });\n      return () => set({\n        controls: old\n      });\n    }\n  }, [makeDefault, controls]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls,\n    enableDamping: enableDamping\n  }, restProps));\n});\n\nexport { OrbitControls };\n"],"names":["Model","name","props","nodes","useGLTF","model","geometry","material","dispose","SelectToZoom","children","api","useBounds","onClick","e","stopPropagation","delta","refresh","object","fit","onPointerMissed","button","camera","position","fov","dpr","intensity","angle","penumbra","color","groundColor","Suspense","fallback","clip","margin","rotation","scale","Math","PI","opacity","width","height","blur","far","makeDefault","minPolarAngle","maxPolarAngle","isOrthographic","def","isOrthographicCamera","context","React","Bounds","damping","observe","eps","onFit","ref","useThree","invalidate","size","controls","onFitRef","equals","a","b","abs","x","y","z","damp","v","t","lambda","THREE","current","animating","focus","zoom","goal","box","getSize","center","getCenter","maxSize","max","fitHeightDistance","atan","fitWidthDistance","aspect","distance","isBox3","copy","target","updateWorldMatrix","setFromObject","isEmpty","length","setFromCenterAndSize","constructor","direction","clone","sub","normalize","multiplyScalar","newPos","add","this","maxDistance","near","updateProjectionMatrix","update","maxHeight","maxWidth","vertices","min","applyMatrix4","matrixWorldInverse","zoomForHeight","top","bottom","zoomForWidth","right","left","lookAt","callback","addEventListener","removeEventListener","count","useFrame","state","Provider","value","HorizontalBlurShader","uniforms","tDiffuse","h","vertexShader","fragmentShader","VerticalBlurShader","ContactShadows","frames","Infinity","resolution","smooth","depthWrite","renderOrder","scene","gl","shadowCamera","Array","isArray","renderTarget","renderTargetBlur","texture","generateMipmaps","planeGeometry","rotateX","blurPlane","depthMaterial","depthTest","onBeforeCompile","shader","ucolor","convertSRGBToLinear","replace","horizontalBlurMaterial","verticalBlurMaterial","blurShadows","visible","setRenderTarget","render","initialBackground","background","initialOverrideMaterial","overrideMaterial","_extends","map","outputEncoding","transparent","args","OrbitControls","regress","domElement","enableDamping","onChange","onStart","onEnd","restProps","defaultCamera","events","set","get","performance","explCamera","explDomElement","connected","OrbitControls$1","enabled","connect","old"],"sourceRoot":""}