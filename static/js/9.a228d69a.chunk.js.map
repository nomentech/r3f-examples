{"version":3,"file":"static/js/9.a228d69a.chunk.js","mappings":"qSAMMA,EAAa,IAAIC,EAAAA,SACjBC,EAAY,IAAID,EAAAA,MAChBE,EAAOC,MAAMC,KAAK,CAAEC,OAAQ,MAAQ,iBAAO,CAC/CC,MAAOC,EAAAA,IAAeC,KAAKC,MAAsB,EAAhBD,KAAKE,WACtCC,MAAO,MAGHC,EAAQ,WACZ,OAAuBC,EAAAA,EAAAA,YAAvB,eAAOC,EAAP,KAAgBC,EAAhB,KACMC,GAAaC,EAAAA,EAAAA,UAAQ,kBACzBC,aAAad,KACX,IAAID,MAAM,KAAMgB,KAAK,MAAMC,SAAQ,SAACC,EAAGC,GAAJ,OACjCrB,EAAUc,IAAIb,EAAKoB,GAAGhB,OAAOiB,gBACjC,IAEIC,GAAeC,EAAAA,EAAAA,UACfC,GAAeD,EAAAA,EAAAA,UA0BrB,OAzBAE,EAAAA,EAAAA,YAAU,WAAYD,EAAQE,QAAUd,IAAU,CAACA,KACnDe,EAAAA,EAAAA,IAAS,SAACC,GACR,IAAMC,EAAOD,EAAME,MAAMC,iBACzBT,EAAQI,QAAQM,SAASC,EAAI3B,KAAK4B,IAAIL,EAAO,GAC7CP,EAAQI,QAAQM,SAASG,EAAI7B,KAAK4B,IAAIL,EAAO,GAE7C,IADA,IAAIT,EAAI,EACCa,EAAI,EAAGA,EAAI,GAAIA,IACtB,IAAK,IAAIE,EAAI,EAAGA,EAAI,GAAIA,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC3B,IAAMC,EAAKjB,IACXvB,EAAWyC,SAASzB,IAAI,EAAIoB,EAAG,EAAIE,EAAG,EAAIC,GAC1CvC,EAAWmC,SAASG,EAAI7B,KAAK4B,IAAID,EAAI,EAAIJ,GAAQvB,KAAK4B,IAAIC,EAAI,EAAIN,GAAQvB,KAAK4B,IAAIE,EAAI,EAAIP,GAC3FhC,EAAWmC,SAASI,EAA4B,EAAxBvC,EAAWmC,SAASG,EACxCvB,IAAYY,EAAQe,UACtBxC,EAAUc,IAAIwB,IAAOzB,EAAU,QAAUZ,EAAKqC,GAAIjC,OAAOiB,QAAQP,EAAiB,EAALuB,GAC7Ef,EAAQI,QAAQc,SAASC,WAAWrC,MAAMsC,aAAc,GAE1D,IAAMjC,EAAST,EAAKqC,GAAI5B,MAAQX,EAAAA,UAAAA,KAAqBE,EAAKqC,GAAI5B,MAAO4B,IAAOzB,EAAU,EAAI,EAAG,IAC7Ff,EAAWY,MAAMkC,UAAUlC,GAC3BZ,EAAW+C,eACXtB,EAAQI,QAAQmB,YAAYR,EAAIxC,EAAWiD,QAEjDxB,EAAQI,QAAQqB,eAAeL,aAAc,MAI7C,2BAAeM,IAAK1B,EAAS2B,KAAM,MAACC,OAAWA,EAAW,KACxDC,cAAe,SAAAC,GAAC,OAAIvC,EAAIuC,EAAEC,aAAaC,aAAc,SAAAF,GAAC,OAAIvC,OAAIqC,IADhE,WAEE,wBAAaD,KAAM,CAAC,GAAK,GAAK,IAA9B,UACE,qCAA0BM,OAAO,mBAAmBN,KAAM,CAACnC,EAAY,QAEzE,8BAAmB0C,cAAc,QAuBvC,EAlBgB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,SACjB,OACE,gCACIA,GACF,UAAC,KAAD,CACEC,QAAM,EACNC,GAAI,CAAEC,WAAW,EAAOC,OAAO,GAC/BC,OAAQ,CAAExB,SAAU,CAAC,EAAG,EAAG,IAAKyB,KAAM,EAAGC,IAAK,IAC9CC,UAAW,qBAAGN,GAAYO,cAAc,YAJ1C,WAKE,6BACA,uBAAY5B,SAAU,CAAC,IAAK,IAAK,KAAM6B,UAAW,OAClD,SAACzD,EAAD","sources":["basic-examples/instanced-vertex-colors/Example.tsx"],"sourcesContent":["import { useEffect, useMemo, useRef, useState } from 'react'\nimport * as THREE from 'three'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport niceColors from 'nice-color-palettes'\nimport Effects from './Effects'\n\nconst tempObject = new THREE.Object3D()\nconst tempColor = new THREE.Color()\nconst data = Array.from({ length: 1000 }, () => ({\n  color: niceColors[17][Math.floor(Math.random() * 5)], \n  scale: 1\n}))\n\nconst Boxes = () => {\n  const [hovered, set] = useState<any>()\n  const colorArray = useMemo(() => \n    Float32Array.from(\n      new Array(1000).fill(null).flatMap((_, i) => \n        tempColor.set(data[i].color).toArray()))\n  , [])\n\n  const meshRef: any = useRef()\n  const prevRef: any = useRef()\n  useEffect(() => void (prevRef.current = hovered), [hovered])\n  useFrame((state) => {\n    const time = state.clock.getElapsedTime()\n    meshRef.current.rotation.x = Math.sin(time / 4)\n    meshRef.current.rotation.y = Math.sin(time / 2)\n    let i = 0\n    for (let x = 0; x < 10; x++)\n      for (let y = 0; y < 10; y++)\n        for (let z = 0; z < 10; z++) {\n          const id = i++\n          tempObject.position.set(5 - x, 5 - y, 5 - z)\n          tempObject.rotation.y = Math.sin(x / 4 + time) + Math.sin(y / 4 + time) + Math.sin(z / 4 + time)\n          tempObject.rotation.z = tempObject.rotation.y * 2\n          if (hovered !== prevRef.Current) {\n            tempColor.set(id === hovered ? 'white' : data[id].color).toArray(colorArray, id * 3)\n            meshRef.current.geometry.attributes.color.needsUpdate = true\n          }\n          const scale = (data[id].scale = THREE.MathUtils.lerp(data[id].scale, id === hovered ? 3 : 1, 0.1))\n          tempObject.scale.setScalar(scale)\n          tempObject.updateMatrix()\n          meshRef.current.setMatrixAt(id, tempObject.matrix)\n        }\n    meshRef.current.instanceMatrix.needsUpdate = true\n  })\n  \n  return (\n    <instancedMesh ref={meshRef} args={[undefined, undefined, 1000]} \n      onPointerMove={e => set(e.instanceId)} onPointerOut={e => set(undefined)}>\n      <boxGeometry args={[0.6, 0.6, 0.6]}>\n        <instancedBufferAttribute attach='attributes-color' args={[colorArray, 3]} />\n      </boxGeometry>\n      <meshPhongMaterial vertexColors={true} />\n    </instancedMesh>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas\n        linear\n        gl={{ antialias: false, alpha: false }}\n        camera={{ position: [0, 0, 15], near: 5, far: 20}}\n        onCreated={({ gl }) => gl.setClearColor('#f0f0f0')}>\n        <ambientLight />\n        <pointLight position={[150, 150, 150]} intensity={0.55} />\n        <Boxes />\n        {/* <Effects /> */}\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example"],"names":["tempObject","THREE","tempColor","data","Array","from","length","color","niceColors","Math","floor","random","scale","Boxes","useState","hovered","set","colorArray","useMemo","Float32Array","fill","flatMap","_","i","toArray","meshRef","useRef","prevRef","useEffect","current","useFrame","state","time","clock","getElapsedTime","rotation","x","sin","y","z","id","position","Current","geometry","attributes","needsUpdate","setScalar","updateMatrix","setMatrixAt","matrix","instanceMatrix","ref","args","undefined","onPointerMove","e","instanceId","onPointerOut","attach","vertexColors","children","linear","gl","antialias","alpha","camera","near","far","onCreated","setClearColor","intensity"],"sourceRoot":""}