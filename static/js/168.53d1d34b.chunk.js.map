{"version":3,"file":"static/js/168.53d1d34b.chunk.js","mappings":"6QAKMA,EAAwBC,EAAAA,YAAiB,WAI5CC,GAAQ,IAHTC,EAGS,EAHTA,SACAC,EAES,EAFTA,UACGC,GACM,YACHC,EAASL,EAAAA,OAAa,MAgB5B,OAfAA,EAAAA,iBAAsB,WACpB,IACWM,EACPD,EADFE,QAEFD,EAAIE,OAAOC,OAAS,EACpBH,EAAIJ,SAASQ,SAAQ,SAACC,EAAQC,GAAT,OAAmBN,EAAIE,OAAOK,KAAK,CACtDF,OAAAA,EACAG,SAAUX,EAAUS,YAGxBG,EAAAA,EAAAA,IAAS,SAAAC,GACP,IAAIC,EAEJ,OAA6C,OAArCA,EAAkBZ,EAAOE,cAAmB,EAASU,EAAgBC,OAAOF,EAAMG,WAExEnB,EAAAA,cAAoB,OAAOoB,EAAAA,EAAAA,GAAS,CACtDnB,KAAKoB,EAAAA,EAAAA,GAAU,CAAChB,EAAQJ,KACvBG,GAAQF,M,mQClBPoB,GAAY,OAAIC,MAAM,MAAMC,KAAI,iBAAO,CAC3CC,SAAU,CAAC,GAAqB,GAAhBC,KAAKC,SAAe,GAAqB,GAAhBD,KAAKC,SAAe,GAAqB,GAAhBD,KAAKC,UACvEC,SAAU,CAACF,KAAKC,SAAWD,KAAKG,GAAK,EAAGH,KAAKC,SAAWD,KAAKG,GAAK,EAAGH,KAAKC,SAAWD,KAAKG,GAAK,OAG3FC,EAAO,SAAC1B,GAEZ,IAAMI,GAASuB,EAAAA,EAAAA,GAAQ,CAACC,EAAOC,EAAOC,EAAOC,IAG7C,OACE,UAACpC,GAAD,gBAAUI,UAAW,CAAC,EAAG,GAAI,GAAI,GAAI,MAAUC,GAA/C,cAGGI,EAAOgB,KAAI,WAA4BZ,GAA5B,IAAGwB,EAAH,EAAGA,MAAOC,EAAV,EAAUA,UAAV,OACV,iBAAMC,eAAa,EAACC,YAAU,EAAaC,SAAUJ,EAAMK,UAAUD,SAAUE,SAAUL,EAAUM,QAAS,2BAA0B,KAAlG/B,OAEtC,yBAkCN,EA7BgB,SAAC,GAAuB,IAArBV,EAAoB,EAApBA,SACjB,OACE,gCACIA,GACF,SAAC,EAAA0C,SAAD,CAAUC,UAAU,yCAApB,UACE,UAAC,KAAD,CAEEC,SAAO,EAEPC,UAAU,SAEVC,IAAK,CAAC,EAAG,GACT7B,OAAQ,CAAEM,SAAU,CAAC,EAAG,EAAG,KAE3BwB,UAAW,gBAAGC,EAAH,EAAGA,GAAH,OAAcA,EAAGC,UAAUC,YAAa,EAASF,EAAGC,UAAUE,aAAc,GATzF,UAWG/B,EAAUE,KAAI,SAACpB,EAAOkD,GAAR,OACb,SAACxB,GAAD,UAAkB1B,GAAPkD,OAEb,SAACC,EAAA,EAAD,CAAeC,UAAW,QAC1B,uBAAY/B,SAAU,CAAC,EAAG,EAAG,GAAIgC,UAAW,MAC5C,sBAAWA,UAAW,IAAKhC,SAAU,CAAC,GAAI,GAAI,IAAKc,YAAU,KAC7D,SAACmB,EAAA,GAAD,CAAaC,OAAO","sources":["../node_modules/@react-three/drei/core/Detailed.js","basic-examples/re-using-geometry-and-level-of-detail/Example.tsx"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\n\nconst Detailed = /*#__PURE__*/React.forwardRef(({\n  children,\n  distances,\n  ...props\n}, ref) => {\n  const lodRef = React.useRef(null);\n  React.useLayoutEffect(() => {\n    const {\n      current: lod\n    } = lodRef;\n    lod.levels.length = 0;\n    lod.children.forEach((object, index) => lod.levels.push({\n      object,\n      distance: distances[index]\n    }));\n  });\n  useFrame(state => {\n    var _lodRef$current;\n\n    return (_lodRef$current = lodRef.current) == null ? void 0 : _lodRef$current.update(state.camera);\n  });\n  return /*#__PURE__*/React.createElement(\"lOD\", _extends({\n    ref: mergeRefs([lodRef, ref])\n  }, props), children);\n});\n\nexport { Detailed };\n","import { Suspense } from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport { Detailed, Environment, OrbitControls, useGLTF } from '@react-three/drei'\n\nimport bust1 from '../../models/bust-1-d.glb'\nimport bust2 from '../../models/bust-2-d.glb'\nimport bust3 from '../../models/bust-3-d.glb'\nimport bust4 from '../../models/bust-4-d.glb'\n\n// Create 800 objects with random position and rotation data\nconst positions = [...Array(800)].map(() => ({\n  position: [40 - Math.random() * 80, 40 - Math.random() * 80, 40 - Math.random() * 80],\n  rotation: [Math.random() * Math.PI * 2, Math.random() * Math.PI * 2, Math.random() * Math.PI * 2],\n}))\n\nconst Bust = (props: any) => {\n  // This will load 4 GLTF in parallel using React Suspense\n  const levels = useGLTF([bust1, bust2, bust3, bust4])\n  // By the time we're here these GLTFs exist, they're loaded\n  // There are 800 instances of this component, but the GLTF data is cached and will be re-used ootb\n  return (\n    <Detailed distances={[0, 15, 25, 35, 100]} {...props}>\n      {/* All we need to do is dump them into the Detailed component and define some distances\n          Since we use a JSX mesh to represent each bust the geometry is being re-used w/o cloning */}\n      {levels.map(({ nodes, materials }: any, index) => (\n        <mesh receiveShadow castShadow key={index} geometry={nodes.Mesh_0001.geometry} material={materials.default} material-envMapIntensity={0.25} />\n      ))}\n      <mesh />\n    </Detailed>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Suspense fallback={<span>loading...</span>}>\n        <Canvas\n          // Quick shortcut for setting up shadow maps\n          shadows\n          // Only render on changes and movement\n          frameloop=\"demand\"\n          // Pixelratio using window.devicePixelRatio, no less than 1, no higher than 2\n          dpr={[1, 2]}\n          camera={{ position: [0, 0, 40] }}\n          // Nice trick here, if your scene is static you can switch off shadowmap auto-update for more performance\n          onCreated={({ gl }) => ((gl.shadowMap.autoUpdate = false), (gl.shadowMap.needsUpdate = true))}>\n          {/* Let's render 800 Bust components with the data above */}\n          {positions.map((props, i) => (\n            <Bust key={i} {...props} />\n          ))}\n          <OrbitControls zoomSpeed={0.075} />\n          <pointLight position={[0, 0, 0]} intensity={0.5} />\n          <spotLight intensity={2.5} position={[50, 50, 50]} castShadow />\n          <Environment preset=\"city\" />\n        </Canvas>\n      </Suspense>\n    </>\n  )\n}\n\nexport default Example"],"names":["Detailed","React","ref","children","distances","props","lodRef","lod","current","levels","length","forEach","object","index","push","distance","useFrame","state","_lodRef$current","update","camera","_extends","mergeRefs","positions","Array","map","position","Math","random","rotation","PI","Bust","useGLTF","bust1","bust2","bust3","bust4","nodes","materials","receiveShadow","castShadow","geometry","Mesh_0001","material","default","Suspense","fallback","shadows","frameloop","dpr","onCreated","gl","shadowMap","autoUpdate","needsUpdate","i","OrbitControls","zoomSpeed","intensity","Environment","preset"],"sourceRoot":""}