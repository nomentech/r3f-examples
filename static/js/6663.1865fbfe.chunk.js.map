{"version":3,"file":"static/js/6663.1865fbfe.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/core/Billboard.js","../node_modules/@react-three/drei/core/Cloud.js","basic-examples/clouds/Example.tsx","../node_modules/three-stdlib/objects/Sky.js","../node_modules/@react-three/drei/core/Sky.js","../node_modules/@react-three/drei/core/shapes.js","../node_modules/@react-three/drei/core/useTexture.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\n\n/**\n * Wraps children in a billboarded group. Sample usage:\n *\n * ```js\n * <Billboard>\n *   <Text>hi</Text>\n * </Billboard>\n * ```\n */\nconst Billboard = /*#__PURE__*/React.forwardRef(function Billboard({\n  follow = true,\n  lockX = false,\n  lockY = false,\n  lockZ = false,\n  ...props\n}, ref) {\n  const localRef = React.useRef();\n  useFrame(({\n    camera\n  }) => {\n    if (!follow || !localRef.current) return; // save previous rotation in case we're locking an axis\n\n    const prevRotation = localRef.current.rotation.clone(); // always face the camera\n\n    localRef.current.quaternion.copy(camera.quaternion); // readjust any axis that is locked\n\n    if (lockX) localRef.current.rotation.x = prevRotation.x;\n    if (lockY) localRef.current.rotation.y = prevRotation.y;\n    if (lockZ) localRef.current.rotation.z = prevRotation.z;\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    ref: mergeRefs([localRef, ref])\n  }, props));\n});\n\nexport { Billboard };\n","import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { Billboard } from './Billboard.js';\nimport { Plane } from './shapes.js';\nimport { useTexture } from './useTexture.js';\n\nconst CLOUD_URL = 'https://rawcdn.githack.com/pmndrs/drei-assets/9225a9f1fbd449d9411125c2f419b843d0308c9f/cloud.png';\nfunction Cloud({\n  opacity = 0.5,\n  speed = 0.4,\n  width = 10,\n  depth = 1.5,\n  segments = 20,\n  texture = CLOUD_URL,\n  color = '#ffffff',\n  depthTest = true,\n  ...props\n}) {\n  const gl = useThree(state => state.gl);\n  const group = React.useRef();\n  const cloudTexture = useTexture(texture);\n  const clouds = React.useMemo(() => [...new Array(segments)].map((_, index) => ({\n    x: width / 2 - Math.random() * width,\n    y: width / 2 - Math.random() * width,\n    scale: 0.4 + Math.sin((index + 1) / segments * Math.PI) * ((0.2 + Math.random()) * 10),\n    density: Math.max(0.2, Math.random()),\n    rotation: Math.max(0.002, 0.005 * Math.random()) * speed\n  })), [width, segments, speed]);\n  useFrame(state => {\n    var _group$current;\n\n    return (_group$current = group.current) == null ? void 0 : _group$current.children.forEach((cloud, index) => {\n      cloud.children[0].rotation.z += clouds[index].rotation;\n      cloud.children[0].scale.setScalar(clouds[index].scale + (1 + Math.sin(state.clock.getElapsedTime() / 10)) / 2 * index / 10);\n    });\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"group\", {\n    position: [0, 0, segments / 2 * depth],\n    ref: group\n  }, clouds.map(({\n    x,\n    y,\n    scale,\n    density\n  }, index) => /*#__PURE__*/React.createElement(Billboard, {\n    key: index,\n    position: [x, y, -index * depth]\n  }, /*#__PURE__*/React.createElement(Plane, {\n    scale: scale,\n    rotation: [0, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    map: cloudTexture,\n    \"map-encoding\": gl.outputEncoding,\n    transparent: true,\n    opacity: scale / 6 * density * opacity,\n    depthTest: depthTest,\n    color: color\n  }))))));\n}\n\nexport { Cloud };\n","import { Suspense } from 'react'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport { Cloud, Sky } from '@react-three/drei'\n\nconst Rig = () => {\n  const { camera } = useThree()\n  \n  return useFrame((state) => {\n    camera.position.z = Math.sin(state.clock.elapsedTime) * 20\n  })\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas camera={{ position: [0, 0, 16], fov: 75 }}>\n        <ambientLight intensity={0.8} />\n        <pointLight intensity={2} position={[0, 0, -1000]} />\n        <Suspense fallback={null}>\n          <Cloud position={[-4, -2, -25]} speed={0.2} opacity={1} />\n          <Cloud position={[4, 2, -15]} speed={0.2} opacity={0.5} />\n          <Cloud position={[-4, 2, -10]} speed={0.2} opacity={1} />\n          <Cloud position={[4, -2, -5]} speed={0.2} opacity={0.5} />\n          <Cloud position={[4, 2, 0]} speed={0.2} opacity={0.75} />\n        </Suspense>\n        <Sky azimuth={0.1} turbidity={10} rayleigh={0.5} inclination={0.6} distance={1000} />\n        <Rig />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\nimport { Mesh, BoxGeometry, Vector3, ShaderMaterial, UniformsUtils, BackSide } from 'three';\n\n/**\n * Based on \"A Practical Analytic Model for Daylight\"\n * aka The Preetham Model, the de facto standard analytic skydome model\n * https://www.researchgate.net/publication/220720443_A_Practical_Analytic_Model_for_Daylight\n *\n * First implemented by Simon Wallner\n * http://www.simonwallner.at/projects/atmospheric-scattering\n *\n * Improved by Martin Upitis\n * http://blenderartists.org/forum/showthread.php?245954-preethams-sky-impementation-HDR\n *\n * Three.js integration by zz85 http://twitter.com/blurspline\n */\n\nclass Sky extends Mesh {\n  constructor() {\n    super(new BoxGeometry(1, 1, 1), Sky.material);\n  }\n\n}\n\n_defineProperty(Sky, \"SkyShader\", {\n  uniforms: {\n    turbidity: {\n      value: 2\n    },\n    rayleigh: {\n      value: 1\n    },\n    mieCoefficient: {\n      value: 0.005\n    },\n    mieDirectionalG: {\n      value: 0.8\n    },\n    sunPosition: {\n      value: new Vector3()\n    },\n    up: {\n      value: new Vector3(0, 1, 0)\n    }\n  },\n  vertexShader: ['uniform vec3 sunPosition;', 'uniform float rayleigh;', 'uniform float turbidity;', 'uniform float mieCoefficient;', 'uniform vec3 up;', 'varying vec3 vWorldPosition;', 'varying vec3 vSunDirection;', 'varying float vSunfade;', 'varying vec3 vBetaR;', 'varying vec3 vBetaM;', 'varying float vSunE;', // constants for atmospheric scattering\n  'const float e = 2.71828182845904523536028747135266249775724709369995957;', 'const float pi = 3.141592653589793238462643383279502884197169;', // wavelength of used primaries, according to preetham\n  'const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );', // this pre-calcuation replaces older TotalRayleigh(vec3 lambda) function:\n  // (8.0 * pow(pi, 3.0) * pow(pow(n, 2.0) - 1.0, 2.0) * (6.0 + 3.0 * pn)) / (3.0 * N * pow(lambda, vec3(4.0)) * (6.0 - 7.0 * pn))\n  'const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );', // mie stuff\n  // K coefficient for the primaries\n  'const float v = 4.0;', 'const vec3 K = vec3( 0.686, 0.678, 0.666 );', // MieConst = pi * pow( ( 2.0 * pi ) / lambda, vec3( v - 2.0 ) ) * K\n  'const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );', // earth shadow hack\n  // cutoffAngle = pi / 1.95;\n  'const float cutoffAngle = 1.6110731556870734;', 'const float steepness = 1.5;', 'const float EE = 1000.0;', 'float sunIntensity( float zenithAngleCos ) {', '\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );', '\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );', '}', 'vec3 totalMie( float T ) {', '\tfloat c = ( 0.2 * T ) * 10E-18;', '\treturn 0.434 * c * MieConst;', '}', 'void main() {', '\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );', '\tvWorldPosition = worldPosition.xyz;', '\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );', '\tgl_Position.z = gl_Position.w;', // set z to camera.far\n  '\tvSunDirection = normalize( sunPosition );', '\tvSunE = sunIntensity( dot( vSunDirection, up ) );', '\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );', '\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );', // extinction (absorbtion + out scattering)\n  // rayleigh coefficients\n  '\tvBetaR = totalRayleigh * rayleighCoefficient;', // mie coefficients\n  '\tvBetaM = totalMie( turbidity ) * mieCoefficient;', '}'].join('\\n'),\n  fragmentShader: ['varying vec3 vWorldPosition;', 'varying vec3 vSunDirection;', 'varying float vSunfade;', 'varying vec3 vBetaR;', 'varying vec3 vBetaM;', 'varying float vSunE;', 'uniform float mieDirectionalG;', 'uniform vec3 up;', 'const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );', // constants for atmospheric scattering\n  'const float pi = 3.141592653589793238462643383279502884197169;', 'const float n = 1.0003;', // refractive index of air\n  'const float N = 2.545E25;', // number of molecules per unit volume for air at 288.15K and 1013mb (sea level -45 celsius)\n  // optical length at zenith for molecules\n  'const float rayleighZenithLength = 8.4E3;', 'const float mieZenithLength = 1.25E3;', // 66 arc seconds -> degrees, and the cosine of that\n  'const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;', // 3.0 / ( 16.0 * pi )\n  'const float THREE_OVER_SIXTEENPI = 0.05968310365946075;', // 1.0 / ( 4.0 * pi )\n  'const float ONE_OVER_FOURPI = 0.07957747154594767;', 'float rayleighPhase( float cosTheta ) {', '\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );', '}', 'float hgPhase( float cosTheta, float g ) {', '\tfloat g2 = pow( g, 2.0 );', '\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );', '\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );', '}', 'void main() {', '\tvec3 direction = normalize( vWorldPosition - cameraPos );', // optical length\n  // cutoff angle at 90 to avoid singularity in next formula.\n  '\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );', '\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );', '\tfloat sR = rayleighZenithLength * inverse;', '\tfloat sM = mieZenithLength * inverse;', // combined extinction factor\n  '\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );', // in scattering\n  '\tfloat cosTheta = dot( direction, vSunDirection );', '\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );', '\tvec3 betaRTheta = vBetaR * rPhase;', '\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );', '\tvec3 betaMTheta = vBetaM * mPhase;', '\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );', '\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );', // nightsky\n  '\tfloat theta = acos( direction.y ); // elevation --> y-axis, [-pi/2, pi/2]', '\tfloat phi = atan( direction.z, direction.x ); // azimuth --> x-axis [-pi/2, pi/2]', '\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );', '\tvec3 L0 = vec3( 0.1 ) * Fex;', // composition + solar disc\n  '\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );', '\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;', '\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );', '\tvec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );', '\tgl_FragColor = vec4( retColor, 1.0 );', '#include <tonemapping_fragment>', '#include <encodings_fragment>', '}'].join('\\n')\n});\n\n_defineProperty(Sky, \"material\", new ShaderMaterial({\n  name: 'SkyShader',\n  fragmentShader: Sky.SkyShader.fragmentShader,\n  vertexShader: Sky.SkyShader.vertexShader,\n  uniforms: UniformsUtils.clone(Sky.SkyShader.uniforms),\n  side: BackSide,\n  depthWrite: false\n}));\n\nexport { Sky };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport { Sky as Sky$1 } from 'three-stdlib';\nimport { Vector3 } from 'three';\n\nfunction calcPosFromAngles(inclination, azimuth, vector = new Vector3()) {\n  const theta = Math.PI * (inclination - 0.5);\n  const phi = 2 * Math.PI * (azimuth - 0.5);\n  vector.x = Math.cos(phi);\n  vector.y = Math.sin(theta);\n  vector.z = Math.sin(phi);\n  return vector;\n}\nconst Sky = /*#__PURE__*/React.forwardRef(({\n  inclination = 0.6,\n  azimuth = 0.1,\n  distance = 1000,\n  mieCoefficient = 0.005,\n  mieDirectionalG = 0.8,\n  rayleigh = 0.5,\n  turbidity = 10,\n  sunPosition = calcPosFromAngles(inclination, azimuth),\n  ...props\n}, ref) => {\n  const scale = React.useMemo(() => new Vector3().setScalar(distance), [distance]);\n  const [sky] = React.useState(() => new Sky$1());\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    object: sky,\n    ref: ref,\n    \"material-uniforms-mieCoefficient-value\": mieCoefficient,\n    \"material-uniforms-mieDirectionalG-value\": mieDirectionalG,\n    \"material-uniforms-rayleigh-value\": rayleigh,\n    \"material-uniforms-sunPosition-value\": sunPosition,\n    \"material-uniforms-turbidity-value\": turbidity,\n    scale: scale\n  }, props));\n});\n\nexport { Sky, calcPosFromAngles };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\n\nfunction create(type) {\n  const El = type + 'BufferGeometry';\n  return /*#__PURE__*/React.forwardRef(({\n    args,\n    children,\n    ...props\n  }, ref) => /*#__PURE__*/React.createElement(\"mesh\", _extends({\n    ref: ref\n  }, props), /*#__PURE__*/React.createElement(El, {\n    attach: \"geometry\",\n    args: args\n  }), children));\n}\n\nconst Box = create('box');\nconst Circle = create('circle');\nconst Cone = create('cone');\nconst Cylinder = create('cylinder');\nconst Sphere = create('sphere');\nconst Plane = create('plane');\nconst Tube = create('tube');\nconst Torus = create('torus');\nconst TorusKnot = create('torusKnot');\nconst Tetrahedron = create('tetrahedron');\nconst Ring = create('ring');\nconst Polyhedron = create('polyhedron');\nconst Icosahedron = create('icosahedron');\nconst Octahedron = create('octahedron');\nconst Dodecahedron = create('dodecahedron');\nconst Extrude = create('extrude');\nconst Lathe = create('lathe');\n\nexport { Box, Circle, Cone, Cylinder, Dodecahedron, Extrude, Icosahedron, Lathe, Octahedron, Plane, Polyhedron, Ring, Sphere, Tetrahedron, Torus, TorusKnot, Tube };\n","import { TextureLoader } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { useEffect } from 'react';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input) {\n  const gl = useThree(state => state.gl);\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input); // https://github.com/mrdoob/three.js/issues/22696\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n\n  useEffect(() => {\n    const array = Array.isArray(textures) ? textures : [textures];\n    array.forEach(gl.initTexture);\n  }, [gl, textures]);\n\n  if (IsObject(input)) {\n    const keys = Object.keys(input);\n    const keyed = {};\n    keys.forEach(key => Object.assign(keyed, {\n      [key]: textures[keys.indexOf(key)]\n    }));\n    return keyed;\n  } else {\n    return textures;\n  }\n}\n\nuseTexture.preload = url => useLoader.preload(TextureLoader, url);\n\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\nexport { IsObject, useTexture };\n"],"names":["Billboard","React","ref","follow","lockX","lockY","lockZ","props","localRef","useFrame","camera","current","prevRotation","rotation","clone","quaternion","copy","x","y","z","_extends","mergeRefs","Cloud","opacity","speed","width","depth","segments","texture","color","depthTest","gl","useThree","state","group","cloudTexture","useTexture","clouds","Array","map","_","index","Math","random","scale","sin","PI","density","max","_group$current","children","forEach","cloud","setScalar","clock","getElapsedTime","position","key","Plane","outputEncoding","transparent","Rig","elapsedTime","fov","intensity","Suspense","fallback","Sky","azimuth","turbidity","rayleigh","inclination","distance","BoxGeometry","material","Mesh","_defineProperty","uniforms","value","mieCoefficient","mieDirectionalG","sunPosition","Vector3","up","vertexShader","join","fragmentShader","ShaderMaterial","name","SkyShader","UniformsUtils","side","BackSide","depthWrite","vector","theta","phi","cos","calcPosFromAngles","Sky$1","sky","object","create","type","El","args","attach","Icosahedron","IsObject","url","Object","isArray","input","textures","useLoader","TextureLoader","values","useEffect","initTexture","keys","keyed","assign","indexOf","preload","clear"],"sourceRoot":""}