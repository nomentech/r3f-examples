"use strict";(self.webpackChunkr3f_examples=self.webpackChunkr3f_examples||[]).push([[3692],{1312:function(t,e,n){n.r(e),n.d(e,{default:function(){return w}});var o=n(2791),r=n(7760),i=n(4647),a=n(1690),l=n(3144),s=n(5671),c=n(7326),u=n(136),v=n(9388),f=function(t){(0,u.Z)(n,t);var e=(0,v.Z)(n);function n(t){var o,i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,s.Z)(this,n),o=e.call(this,t);var a=(0,c.Z)(o),l=void 0!==i.textureWidth?i.textureWidth:512,u=void 0!==i.textureHeight?i.textureHeight:512,v=void 0!==i.clipBias?i.clipBias:0,f=void 0!==i.alpha?i.alpha:1,m=void 0!==i.time?i.time:0,d=void 0!==i.waterNormals?i.waterNormals:null,h=void 0!==i.sunDirection?i.sunDirection:new r.Vector3(.70707,.70707,0),p=new r.Color(void 0!==i.sunColor?i.sunColor:16777215),g=new r.Color(void 0!==i.waterColor?i.waterColor:8355711),x=void 0!==i.eye?i.eye:new r.Vector3(0,0,0),w=void 0!==i.distortionScale?i.distortionScale:20,y=void 0!==i.side?i.side:r.FrontSide,S=void 0!==i.fog&&i.fog,M=new r.Plane,C=new r.Vector3,E=new r.Vector3,P=new r.Vector3,b=new r.Matrix4,_=new r.Vector3(0,0,-1),D=new r.Vector4,z=new r.Vector3,R=new r.Vector3,L=new r.Vector4,T=new r.Matrix4,V=new r.PerspectiveCamera,j=new r.WebGLRenderTarget(l,u),k={uniforms:r.UniformsUtils.merge([r.UniformsLib.fog,r.UniformsLib.lights,{normalSampler:{value:null},mirrorSampler:{value:null},alpha:{value:1},time:{value:0},size:{value:1},distortionScale:{value:20},textureMatrix:{value:new r.Matrix4},sunColor:{value:new r.Color(8355711)},sunDirection:{value:new r.Vector3(.70707,.70707,0)},eye:{value:new r.Vector3},waterColor:{value:new r.Color(5592405)}}]),vertexShader:"\n\t\t\t\tuniform mat4 textureMatrix;\n\t\t\t\tuniform float time;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <fog_pars_vertex>\n\t\t\t\t#include <shadowmap_pars_vertex>\n\t\t\t\t#include <logdepthbuf_pars_vertex>\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tmirrorCoord = modelMatrix * vec4( position, 1.0 );\n\t\t\t\t\tworldPosition = mirrorCoord.xyzw;\n\t\t\t\t\tmirrorCoord = textureMatrix * mirrorCoord;\n\t\t\t\t\tvec4 mvPosition =  modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t\t#include <beginnormal_vertex>\n\t\t\t\t#include <defaultnormal_vertex>\n\t\t\t\t#include <logdepthbuf_vertex>\n\t\t\t\t#include <fog_vertex>\n\t\t\t\t#include <shadowmap_vertex>\n\t\t\t}",fragmentShader:"\n\t\t\t\tuniform sampler2D mirrorSampler;\n\t\t\t\tuniform float alpha;\n\t\t\t\tuniform float time;\n\t\t\t\tuniform float size;\n\t\t\t\tuniform float distortionScale;\n\t\t\t\tuniform sampler2D normalSampler;\n\t\t\t\tuniform vec3 sunColor;\n\t\t\t\tuniform vec3 sunDirection;\n\t\t\t\tuniform vec3 eye;\n\t\t\t\tuniform vec3 waterColor;\n\n\t\t\t\tvarying vec4 mirrorCoord;\n\t\t\t\tvarying vec4 worldPosition;\n\n\t\t\t\tvec4 getNoise( vec2 uv ) {\n\t\t\t\t\tvec2 uv0 = ( uv / 103.0 ) + vec2(time / 17.0, time / 29.0);\n\t\t\t\t\tvec2 uv1 = uv / 107.0-vec2( time / -19.0, time / 31.0 );\n\t\t\t\t\tvec2 uv2 = uv / vec2( 8907.0, 9803.0 ) + vec2( time / 101.0, time / 97.0 );\n\t\t\t\t\tvec2 uv3 = uv / vec2( 1091.0, 1027.0 ) - vec2( time / 109.0, time / -113.0 );\n\t\t\t\t\tvec4 noise = texture2D( normalSampler, uv0 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv1 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv2 ) +\n\t\t\t\t\t\ttexture2D( normalSampler, uv3 );\n\t\t\t\t\treturn noise * 0.5 - 1.0;\n\t\t\t\t}\n\n\t\t\t\tvoid sunLight( const vec3 surfaceNormal, const vec3 eyeDirection, float shiny, float spec, float diffuse, inout vec3 diffuseColor, inout vec3 specularColor ) {\n\t\t\t\t\tvec3 reflection = normalize( reflect( -sunDirection, surfaceNormal ) );\n\t\t\t\t\tfloat direction = max( 0.0, dot( eyeDirection, reflection ) );\n\t\t\t\t\tspecularColor += pow( direction, shiny ) * sunColor * spec;\n\t\t\t\t\tdiffuseColor += max( dot( sunDirection, surfaceNormal ), 0.0 ) * sunColor * diffuse;\n\t\t\t\t}\n\n\t\t\t\t#include <common>\n\t\t\t\t#include <packing>\n\t\t\t\t#include <bsdfs>\n\t\t\t\t#include <fog_pars_fragment>\n\t\t\t\t#include <logdepthbuf_pars_fragment>\n\t\t\t\t#include <lights_pars_begin>\n\t\t\t\t#include <shadowmap_pars_fragment>\n\t\t\t\t#include <shadowmask_pars_fragment>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <logdepthbuf_fragment>\n\t\t\t\t\tvec4 noise = getNoise( worldPosition.xz * size );\n\t\t\t\t\tvec3 surfaceNormal = normalize( noise.xzy * vec3( 1.5, 1.0, 1.5 ) );\n\n\t\t\t\t\tvec3 diffuseLight = vec3(0.0);\n\t\t\t\t\tvec3 specularLight = vec3(0.0);\n\n\t\t\t\t\tvec3 worldToEye = eye-worldPosition.xyz;\n\t\t\t\t\tvec3 eyeDirection = normalize( worldToEye );\n\t\t\t\t\tsunLight( surfaceNormal, eyeDirection, 100.0, 2.0, 0.5, diffuseLight, specularLight );\n\n\t\t\t\t\tfloat distance = length(worldToEye);\n\n\t\t\t\t\tvec2 distortion = surfaceNormal.xz * ( 0.001 + 1.0 / distance ) * distortionScale;\n\t\t\t\t\tvec3 reflectionSample = vec3( texture2D( mirrorSampler, mirrorCoord.xy / mirrorCoord.w + distortion ) );\n\n\t\t\t\t\tfloat theta = max( dot( eyeDirection, surfaceNormal ), 0.0 );\n\t\t\t\t\tfloat rf0 = 0.3;\n\t\t\t\t\tfloat reflectance = rf0 + ( 1.0 - rf0 ) * pow( ( 1.0 - theta ), 5.0 );\n\t\t\t\t\tvec3 scatter = max( 0.0, dot( surfaceNormal, eyeDirection ) ) * waterColor;\n\t\t\t\t\tvec3 albedo = mix( ( sunColor * diffuseLight * 0.3 + scatter ) * getShadowMask(), ( vec3( 0.1 ) + reflectionSample * 0.9 + reflectionSample * specularLight ), reflectance);\n\t\t\t\t\tvec3 outgoingLight = albedo;\n\t\t\t\t\tgl_FragColor = vec4( outgoingLight, alpha );\n\n\t\t\t\t\t#include <tonemapping_fragment>\n\t\t\t\t\t#include <fog_fragment>\n\t\t\t\t}"},W=new r.ShaderMaterial({fragmentShader:k.fragmentShader,vertexShader:k.vertexShader,uniforms:r.UniformsUtils.clone(k.uniforms),lights:!0,side:y,fog:S});return W.uniforms.mirrorSampler.value=j.texture,W.uniforms.textureMatrix.value=T,W.uniforms.alpha.value=f,W.uniforms.time.value=m,W.uniforms.normalSampler.value=d,W.uniforms.sunColor.value=p,W.uniforms.waterColor.value=g,W.uniforms.sunDirection.value=h,W.uniforms.distortionScale.value=w,W.uniforms.eye.value=x,a.material=W,a.onBeforeRender=function(t,e,n){if(E.setFromMatrixPosition(a.matrixWorld),P.setFromMatrixPosition(n.matrixWorld),b.extractRotation(a.matrixWorld),C.set(0,0,1),C.applyMatrix4(b),z.subVectors(E,P),!(z.dot(C)>0)){z.reflect(C).negate(),z.add(E),b.extractRotation(n.matrixWorld),_.set(0,0,-1),_.applyMatrix4(b),_.add(P),R.subVectors(E,_),R.reflect(C).negate(),R.add(E),V.position.copy(z),V.up.set(0,1,0),V.up.applyMatrix4(b),V.up.reflect(C),V.lookAt(R),V.far=n.far,V.updateMatrixWorld(),V.projectionMatrix.copy(n.projectionMatrix),T.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),T.multiply(V.projectionMatrix),T.multiply(V.matrixWorldInverse),M.setFromNormalAndCoplanarPoint(C,E),M.applyMatrix4(V.matrixWorldInverse),D.set(M.normal.x,M.normal.y,M.normal.z,M.constant);var o=V.projectionMatrix;L.x=(Math.sign(D.x)+o.elements[8])/o.elements[0],L.y=(Math.sign(D.y)+o.elements[9])/o.elements[5],L.z=-1,L.w=(1+o.elements[10])/o.elements[14],D.multiplyScalar(2/D.dot(L)),o.elements[2]=D.x,o.elements[6]=D.y,o.elements[10]=D.z+1-v,o.elements[14]=D.w,x.setFromMatrixPosition(n.matrixWorld);var r=t.getRenderTarget(),i=t.xr.enabled,l=t.shadowMap.autoUpdate;a.visible=!1,t.xr.enabled=!1,t.shadowMap.autoUpdate=!1,t.setRenderTarget(j),t.state.buffers.depth.setMask(!0),!1===t.autoClear&&t.clear(),t.render(e,V),a.visible=!0,t.xr.enabled=i,t.shadowMap.autoUpdate=l,t.setRenderTarget(r);var s=n.viewport;void 0!==s&&t.state.viewport(s)}},o}return(0,l.Z)(n)}(r.Mesh);f.prototype.isWater=!0;var m=n.p+"static/media/waternormals.537ec85b965d414829ab.jpeg",d=n(4671),h=n(4637),p=n(184);(0,a.e)({Water:f});var g=function(){var t=(0,o.useRef)(),e=(0,a.w)((function(t){return t.gl})),n=(0,a.z)(r.TextureLoader,m);n.wrapS=n.wrapT=r.RepeatWrapping;var i=(0,o.useMemo)((function(){return new r.PlaneGeometry(1e4,1e4)}),[]),l=(0,o.useMemo)((function(){return{textureWidth:512,textureHeight:512,waterNormals:n,sunDirection:new r.Vector3,sunColor:16777215,waterColor:7695,distortionScale:3.7,fog:!1,format:e.encoding}}),[n]);return(0,a.x)((function(e,n){return t.current.material.uniforms.time.value+=n})),(0,p.jsx)("water",{ref:t,args:[i,l],"rotation-x":-Math.PI/2})},x=function(){var t=(0,o.useRef)();return(0,a.x)((function(e,n){t.current.position.y=10+20*Math.sin(e.clock.elapsedTime),t.current.rotation.x=t.current.rotation.y=t.current.rotation.z+=n})),(0,p.jsxs)("mesh",{ref:t,scale:20,children:[(0,p.jsx)("boxGeometry",{}),(0,p.jsx)("meshStandardMaterial",{})]})},w=function(t){var e=t.children;return(0,p.jsxs)(p.Fragment,{children:[e,(0,p.jsxs)(i.Xz,{camera:{position:[0,5,100],fov:55,near:1,far:2e4},children:[(0,p.jsx)("pointLight",{position:[100,100,100]}),(0,p.jsx)("pointLight",{position:[-100,-100,-100]}),(0,p.jsxs)(o.Suspense,{fallback:null,children:[(0,p.jsx)(g,{}),(0,p.jsx)(x,{})]}),(0,p.jsx)(d.q,{sunPosition:[500,150,-1e3],turbidity:.1}),(0,p.jsx)(h.z,{})]})]})}},4637:function(t,e,n){n.d(e,{z:function(){return c}});var o=n(4925),r=n(7462),i=n(1690),a=n(2791),l=n(233),s=["makeDefault","camera","regress","domElement","enableDamping","onChange","onStart","onEnd"],c=a.forwardRef((function(t,e){var n=t.makeDefault,c=t.camera,u=t.regress,v=t.domElement,f=t.enableDamping,m=void 0===f||f,d=t.onChange,h=t.onStart,p=t.onEnd,g=(0,o.Z)(t,s),x=(0,i.w)((function(t){return t.invalidate})),w=(0,i.w)((function(t){return t.camera})),y=(0,i.w)((function(t){return t.gl})),S=(0,i.w)((function(t){return t.events})),M=(0,i.w)((function(t){return t.set})),C=(0,i.w)((function(t){return t.get})),E=(0,i.w)((function(t){return t.performance})),P=c||w,b=v||S.connected||y.domElement,_=a.useMemo((function(){return new l.z(P)}),[P]);return(0,i.x)((function(){_.enabled&&_.update()}),-1),a.useEffect((function(){return _.connect(b),function(){_.dispose()}}),[b,u,_,x]),a.useEffect((function(){var t=function(t){x(),u&&E.regress(),d&&d(t)};return _.addEventListener("change",t),h&&_.addEventListener("start",h),p&&_.addEventListener("end",p),function(){h&&_.removeEventListener("start",h),p&&_.removeEventListener("end",p),_.removeEventListener("change",t)}}),[d,h,p]),a.useEffect((function(){if(n){var t=C().controls;return M({controls:_}),function(){return M({controls:t})}}}),[n,_]),a.createElement("primitive",(0,r.Z)({ref:e,object:_,enableDamping:m},g))}))},4671:function(t,e,n){n.d(e,{q:function(){return h}});var o=n(9439),r=n(4925),i=n(7462),a=n(2791),l=n(3144),s=n(5671),c=n(136),u=n(9388),v=n(4942),f=n(7760),m=function(t){(0,c.Z)(n,t);var e=(0,u.Z)(n);function n(){return(0,s.Z)(this,n),e.call(this,new f.BoxGeometry(1,1,1),n.material)}return(0,l.Z)(n)}(f.Mesh);(0,v.Z)(m,"SkyShader",{uniforms:{turbidity:{value:2},rayleigh:{value:1},mieCoefficient:{value:.005},mieDirectionalG:{value:.8},sunPosition:{value:new f.Vector3},up:{value:new f.Vector3(0,1,0)}},vertexShader:["uniform vec3 sunPosition;","uniform float rayleigh;","uniform float turbidity;","uniform float mieCoefficient;","uniform vec3 up;","varying vec3 vWorldPosition;","varying vec3 vSunDirection;","varying float vSunfade;","varying vec3 vBetaR;","varying vec3 vBetaM;","varying float vSunE;","const float e = 2.71828182845904523536028747135266249775724709369995957;","const float pi = 3.141592653589793238462643383279502884197169;","const vec3 lambda = vec3( 680E-9, 550E-9, 450E-9 );","const vec3 totalRayleigh = vec3( 5.804542996261093E-6, 1.3562911419845635E-5, 3.0265902468824876E-5 );","const float v = 4.0;","const vec3 K = vec3( 0.686, 0.678, 0.666 );","const vec3 MieConst = vec3( 1.8399918514433978E14, 2.7798023919660528E14, 4.0790479543861094E14 );","const float cutoffAngle = 1.6110731556870734;","const float steepness = 1.5;","const float EE = 1000.0;","float sunIntensity( float zenithAngleCos ) {","\tzenithAngleCos = clamp( zenithAngleCos, -1.0, 1.0 );","\treturn EE * max( 0.0, 1.0 - pow( e, -( ( cutoffAngle - acos( zenithAngleCos ) ) / steepness ) ) );","}","vec3 totalMie( float T ) {","\tfloat c = ( 0.2 * T ) * 10E-18;","\treturn 0.434 * c * MieConst;","}","void main() {","\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );","\tvWorldPosition = worldPosition.xyz;","\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );","\tgl_Position.z = gl_Position.w;","\tvSunDirection = normalize( sunPosition );","\tvSunE = sunIntensity( dot( vSunDirection, up ) );","\tvSunfade = 1.0 - clamp( 1.0 - exp( ( sunPosition.y / 450000.0 ) ), 0.0, 1.0 );","\tfloat rayleighCoefficient = rayleigh - ( 1.0 * ( 1.0 - vSunfade ) );","\tvBetaR = totalRayleigh * rayleighCoefficient;","\tvBetaM = totalMie( turbidity ) * mieCoefficient;","}"].join("\n"),fragmentShader:["varying vec3 vWorldPosition;","varying vec3 vSunDirection;","varying float vSunfade;","varying vec3 vBetaR;","varying vec3 vBetaM;","varying float vSunE;","uniform float mieDirectionalG;","uniform vec3 up;","const vec3 cameraPos = vec3( 0.0, 0.0, 0.0 );","const float pi = 3.141592653589793238462643383279502884197169;","const float n = 1.0003;","const float N = 2.545E25;","const float rayleighZenithLength = 8.4E3;","const float mieZenithLength = 1.25E3;","const float sunAngularDiameterCos = 0.999956676946448443553574619906976478926848692873900859324;","const float THREE_OVER_SIXTEENPI = 0.05968310365946075;","const float ONE_OVER_FOURPI = 0.07957747154594767;","float rayleighPhase( float cosTheta ) {","\treturn THREE_OVER_SIXTEENPI * ( 1.0 + pow( cosTheta, 2.0 ) );","}","float hgPhase( float cosTheta, float g ) {","\tfloat g2 = pow( g, 2.0 );","\tfloat inverse = 1.0 / pow( 1.0 - 2.0 * g * cosTheta + g2, 1.5 );","\treturn ONE_OVER_FOURPI * ( ( 1.0 - g2 ) * inverse );","}","void main() {","\tvec3 direction = normalize( vWorldPosition - cameraPos );","\tfloat zenithAngle = acos( max( 0.0, dot( up, direction ) ) );","\tfloat inverse = 1.0 / ( cos( zenithAngle ) + 0.15 * pow( 93.885 - ( ( zenithAngle * 180.0 ) / pi ), -1.253 ) );","\tfloat sR = rayleighZenithLength * inverse;","\tfloat sM = mieZenithLength * inverse;","\tvec3 Fex = exp( -( vBetaR * sR + vBetaM * sM ) );","\tfloat cosTheta = dot( direction, vSunDirection );","\tfloat rPhase = rayleighPhase( cosTheta * 0.5 + 0.5 );","\tvec3 betaRTheta = vBetaR * rPhase;","\tfloat mPhase = hgPhase( cosTheta, mieDirectionalG );","\tvec3 betaMTheta = vBetaM * mPhase;","\tvec3 Lin = pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * ( 1.0 - Fex ), vec3( 1.5 ) );","\tLin *= mix( vec3( 1.0 ), pow( vSunE * ( ( betaRTheta + betaMTheta ) / ( vBetaR + vBetaM ) ) * Fex, vec3( 1.0 / 2.0 ) ), clamp( pow( 1.0 - dot( up, vSunDirection ), 5.0 ), 0.0, 1.0 ) );","\tfloat theta = acos( direction.y ); // elevation --\x3e y-axis, [-pi/2, pi/2]","\tfloat phi = atan( direction.z, direction.x ); // azimuth --\x3e x-axis [-pi/2, pi/2]","\tvec2 uv = vec2( phi, theta ) / vec2( 2.0 * pi, pi ) + vec2( 0.5, 0.0 );","\tvec3 L0 = vec3( 0.1 ) * Fex;","\tfloat sundisk = smoothstep( sunAngularDiameterCos, sunAngularDiameterCos + 0.00002, cosTheta );","\tL0 += ( vSunE * 19000.0 * Fex ) * sundisk;","\tvec3 texColor = ( Lin + L0 ) * 0.04 + vec3( 0.0, 0.0003, 0.00075 );","\tvec3 retColor = pow( texColor, vec3( 1.0 / ( 1.2 + ( 1.2 * vSunfade ) ) ) );","\tgl_FragColor = vec4( retColor, 1.0 );","#include <tonemapping_fragment>","#include <encodings_fragment>","}"].join("\n")}),(0,v.Z)(m,"material",new f.ShaderMaterial({name:"SkyShader",fragmentShader:m.SkyShader.fragmentShader,vertexShader:m.SkyShader.vertexShader,uniforms:f.UniformsUtils.clone(m.SkyShader.uniforms),side:f.BackSide,depthWrite:!1}));var d=["inclination","azimuth","distance","mieCoefficient","mieDirectionalG","rayleigh","turbidity","sunPosition"];var h=a.forwardRef((function(t,e){var n=t.inclination,l=void 0===n?.6:n,s=t.azimuth,c=void 0===s?.1:s,u=t.distance,v=void 0===u?1e3:u,h=t.mieCoefficient,p=void 0===h?.005:h,g=t.mieDirectionalG,x=void 0===g?.8:g,w=t.rayleigh,y=void 0===w?.5:w,S=t.turbidity,M=void 0===S?10:S,C=t.sunPosition,E=void 0===C?function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new f.Vector3,o=Math.PI*(t-.5),r=2*Math.PI*(e-.5);return n.x=Math.cos(r),n.y=Math.sin(o),n.z=Math.sin(r),n}(l,c):C,P=(0,r.Z)(t,d),b=a.useMemo((function(){return(new f.Vector3).setScalar(v)}),[v]),_=a.useState((function(){return new m})),D=(0,o.Z)(_,1)[0];return a.createElement("primitive",(0,i.Z)({object:D,ref:e,"material-uniforms-mieCoefficient-value":p,"material-uniforms-mieDirectionalG-value":x,"material-uniforms-rayleigh-value":y,"material-uniforms-sunPosition-value":E,"material-uniforms-turbidity-value":M,scale:b},P))}))}}]);
//# sourceMappingURL=3692.6774afc4.chunk.js.map