{"version":3,"file":"static/js/34.18bf43f0.chunk.js","mappings":"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","sources":["../node_modules/three-stdlib/math/SimplexNoise.js","../node_modules/@react-three/drei/core/CameraShake.js","basic-examples/staging-and-camerashake/Example.tsx","../node_modules/three-stdlib/shaders/HorizontalBlurShader.js","../node_modules/three-stdlib/shaders/VerticalBlurShader.js","../node_modules/@react-three/drei/core/ContactShadows.js","../node_modules/@react-three/drei/core/Stage.js","../node_modules/@react-three/drei/core/useAnimations.js"],"sourcesContent":["import _defineProperty from '@babel/runtime/helpers/esm/defineProperty';\n\n// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\nclass SimplexNoise {\n  // To remove the need for index wrapping, double the permutation table length\n  // A lookup table to traverse the simplex around a given point in 4D.\n  // Details can be found where this table is used, in the 4D noise method.\n\n  /**\n   * You can pass in a random number generator object if you like.\n   * It is assumed to have a random() method.\n   */\n  constructor(r = Math) {\n    _defineProperty(this, \"grad3\", [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]]);\n\n    _defineProperty(this, \"grad4\", [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]]);\n\n    _defineProperty(this, \"p\", []);\n\n    _defineProperty(this, \"perm\", []);\n\n    _defineProperty(this, \"simplex\", [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]]);\n\n    _defineProperty(this, \"dot\", (g, x, y) => {\n      return g[0] * x + g[1] * y;\n    });\n\n    _defineProperty(this, \"dot3\", (g, x, y, z) => {\n      return g[0] * x + g[1] * y + g[2] * z;\n    });\n\n    _defineProperty(this, \"dot4\", (g, x, y, z, w) => {\n      return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n    });\n\n    _defineProperty(this, \"noise\", (xin, yin) => {\n      let n0;\n      let n1;\n      let n2; // Noise contributions from the three corners\n      // Skew the input space to determine which simplex cell we're in\n\n      const F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n      const s = (xin + yin) * F2; // Hairy factor for 2D\n\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n      const t = (i + j) * G2;\n      const X0 = i - t; // Unskew the cell origin back to (x,y) space\n\n      const Y0 = j - t;\n      const x0 = xin - X0; // The x,y distances from the cell origin\n\n      const y0 = yin - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\n      // Determine which simplex we are in.\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n      let i1 = 0; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n      let j1 = 1;\n\n      if (x0 > y0) {\n        i1 = 1;\n        j1 = 0;\n      } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n      // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n      // c = (3-sqrt(3))/6\n\n\n      const x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n      const y1 = y0 - j1 + G2;\n      const x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n      const y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const gi0 = this.perm[ii + this.perm[jj]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12;\n      const gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12; // Calculate the contribution from the three corners\n\n      let t0 = 0.5 - x0 * x0 - y0 * y0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient\n      }\n\n      let t1 = 0.5 - x1 * x1 - y1 * y1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1);\n      }\n\n      let t2 = 0.5 - x2 * x2 - y2 * y2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to return values in the interval [-1,1].\n\n\n      return 70.0 * (n0 + n1 + n2);\n    });\n\n    _defineProperty(this, \"noise3d\", (xin, yin, zin) => {\n      // Noise contributions from the four corners\n      let n0;\n      let n1;\n      let n2;\n      let n3; // Skew the input space to determine which simplex cell we're in\n\n      const F3 = 1.0 / 3.0;\n      const s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n\n      const i = Math.floor(xin + s);\n      const j = Math.floor(yin + s);\n      const k = Math.floor(zin + s);\n      const G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\n      const t = (i + j + k) * G3;\n      const X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const x0 = xin - X0; // The x,y,z distances from the cell origin\n\n      const y0 = yin - Y0;\n      const z0 = zin - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n      // Determine which simplex we are in.\n\n      let i1;\n      let j1;\n      let k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n      let i2;\n      let j2;\n      let k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n      if (x0 >= y0) {\n        if (y0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0; // X Y Z order\n        } else if (x0 >= z0) {\n          i1 = 1;\n          j1 = 0;\n          k1 = 0;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1; // X Z Y order\n        } else {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 1;\n          j2 = 0;\n          k2 = 1;\n        } // Z X Y order\n\n      } else {\n        // x0<y0\n        if (y0 < z0) {\n          i1 = 0;\n          j1 = 0;\n          k1 = 1;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1; // Z Y X order\n        } else if (x0 < z0) {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 0;\n          j2 = 1;\n          k2 = 1; // Y Z X order\n        } else {\n          i1 = 0;\n          j1 = 1;\n          k1 = 0;\n          i2 = 1;\n          j2 = 1;\n          k2 = 0;\n        } // Y X Z order\n\n      } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n      // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n      // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n      // c = 1/6.\n\n\n      const x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\n      const y1 = y0 - j1 + G3;\n      const z1 = z0 - k1 + G3;\n      const x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\n      const y2 = y0 - j2 + 2.0 * G3;\n      const z2 = z0 - k2 + 2.0 * G3;\n      const x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\n      const y3 = y0 - 1.0 + 3.0 * G3;\n      const z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12;\n      const gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12;\n      const gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12;\n      const gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12; // Calculate the contribution from the four corners\n\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0);\n      }\n\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1);\n      }\n\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2);\n      }\n\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n      if (t3 < 0) {\n        n3 = 0.0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3);\n      } // Add contributions from each corner to get the final noise value.\n      // The result is scaled to stay just inside [-1,1]\n\n\n      return 32.0 * (n0 + n1 + n2 + n3);\n    });\n\n    _defineProperty(this, \"noise4d\", (x, y, z, w) => {\n      // For faster and easier lookups\n      const grad4 = this.grad4;\n      const simplex = this.simplex;\n      const perm = this.perm; // The skewing and unskewing factors are hairy again for the 4D case\n\n      const F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n      const G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n      let n0;\n      let n1;\n      let n2;\n      let n3;\n      let n4; // Noise contributions from the five corners\n      // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\n      const s = (x + y + z + w) * F4; // Factor for 4D skewing\n\n      const i = Math.floor(x + s);\n      const j = Math.floor(y + s);\n      const k = Math.floor(z + s);\n      const l = Math.floor(w + s);\n      const t = (i + j + k + l) * G4; // Factor for 4D unskewing\n\n      const X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\n      const Y0 = j - t;\n      const Z0 = k - t;\n      const W0 = l - t;\n      const x0 = x - X0; // The x,y,z,w distances from the cell origin\n\n      const y0 = y - Y0;\n      const z0 = z - Z0;\n      const w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n      // To find out which of the 24 possible simplices we're in, we need to\n      // determine the magnitude ordering of x0, y0, z0 and w0.\n      // The method below is a good way of finding the ordering of x,y,z,w and\n      // then find the correct traversal order for the simplex we’re in.\n      // First, six pair-wise comparisons are performed between each possible pair\n      // of the four coordinates, and the results are used to add up binary bits\n      // for an integer index.\n\n      const c1 = x0 > y0 ? 32 : 0;\n      const c2 = x0 > z0 ? 16 : 0;\n      const c3 = y0 > z0 ? 8 : 0;\n      const c4 = x0 > w0 ? 4 : 0;\n      const c5 = y0 > w0 ? 2 : 0;\n      const c6 = z0 > w0 ? 1 : 0;\n      const c = c1 + c2 + c3 + c4 + c5 + c6; // The integer offsets for the second simplex corner\n\n      let i1;\n      let j1;\n      let k1;\n      let l1; // The integer offsets for the third simplex corner\n\n      let i2;\n      let j2;\n      let k2;\n      let l2; // The integer offsets for the fourth simplex corner\n\n      let i3;\n      let j3;\n      let k3;\n      let l3; // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n      // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n      // impossible. Only the 24 indices which have non-zero entries make any sense.\n      // We use a thresholding to set the coordinates in turn from the largest magnitude.\n      // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\n      i1 = simplex[c][0] >= 3 ? 1 : 0;\n      j1 = simplex[c][1] >= 3 ? 1 : 0;\n      k1 = simplex[c][2] >= 3 ? 1 : 0;\n      l1 = simplex[c][3] >= 3 ? 1 : 0; // The number 2 in the \"simplex\" array is at the second largest coordinate.\n\n      i2 = simplex[c][0] >= 2 ? 1 : 0;\n      j2 = simplex[c][1] >= 2 ? 1 : 0;\n      k2 = simplex[c][2] >= 2 ? 1 : 0;\n      l2 = simplex[c][3] >= 2 ? 1 : 0; // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\n      i3 = simplex[c][0] >= 1 ? 1 : 0;\n      j3 = simplex[c][1] >= 1 ? 1 : 0;\n      k3 = simplex[c][2] >= 1 ? 1 : 0;\n      l3 = simplex[c][3] >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\n      const x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\n      const y1 = y0 - j1 + G4;\n      const z1 = z0 - k1 + G4;\n      const w1 = w0 - l1 + G4;\n      const x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\n      const y2 = y0 - j2 + 2.0 * G4;\n      const z2 = z0 - k2 + 2.0 * G4;\n      const w2 = w0 - l2 + 2.0 * G4;\n      const x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\n      const y3 = y0 - j3 + 3.0 * G4;\n      const z3 = z0 - k3 + 3.0 * G4;\n      const w3 = w0 - l3 + 3.0 * G4;\n      const x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\n      const y4 = y0 - 1.0 + 4.0 * G4;\n      const z4 = z0 - 1.0 + 4.0 * G4;\n      const w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\n\n      const ii = i & 255;\n      const jj = j & 255;\n      const kk = k & 255;\n      const ll = l & 255;\n      const gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n      const gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n      const gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n      const gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n      const gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32; // Calculate the contribution from the five corners\n\n      let t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\n      if (t0 < 0) {\n        n0 = 0.0;\n      } else {\n        t0 *= t0;\n        n0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0);\n      }\n\n      let t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\n      if (t1 < 0) {\n        n1 = 0.0;\n      } else {\n        t1 *= t1;\n        n1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1);\n      }\n\n      let t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\n      if (t2 < 0) {\n        n2 = 0.0;\n      } else {\n        t2 *= t2;\n        n2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2);\n      }\n\n      let t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\n      if (t3 < 0) {\n        n3 = 0.0;\n      } else {\n        t3 *= t3;\n        n3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3);\n      }\n\n      let t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\n      if (t4 < 0) {\n        n4 = 0.0;\n      } else {\n        t4 *= t4;\n        n4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4);\n      } // Sum up and scale the result to cover the range [-1,1]\n\n\n      return 27.0 * (n0 + n1 + n2 + n3 + n4);\n    });\n\n    for (let i = 0; i < 256; i++) {\n      this.p[i] = Math.floor(r.random() * 256);\n    }\n\n    for (let i = 0; i < 512; i++) {\n      this.perm[i] = this.p[i & 255];\n    }\n  }\n\n}\n\nexport { SimplexNoise };\n","import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\n\nconst CameraShake = /*#__PURE__*/React.forwardRef(({\n  intensity = 1,\n  decay,\n  decayRate = 0.65,\n  maxYaw = 0.1,\n  maxPitch = 0.1,\n  maxRoll = 0.1,\n  yawFrequency = 0.1,\n  pitchFrequency = 0.1,\n  rollFrequency = 0.1\n}, ref) => {\n  const camera = useThree(state => state.camera);\n  const defaultControls = useThree(state => state.controls);\n  const intensityRef = React.useRef(intensity);\n  const initialRotation = React.useRef(camera.rotation.clone());\n  const [yawNoise] = React.useState(() => new SimplexNoise());\n  const [pitchNoise] = React.useState(() => new SimplexNoise());\n  const [rollNoise] = React.useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  React.useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  React.useEffect(() => {\n    if (defaultControls) {\n      const callback = () => void (initialRotation.current = camera.rotation.clone());\n\n      defaultControls.addEventListener('change', callback);\n      callback();\n      return () => void defaultControls.removeEventListener('change', callback);\n    }\n  }, [camera, defaultControls]);\n  useFrame((state, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(state.clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(state.clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(state.clock.elapsedTime * rollFrequency, 1);\n    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\n\nexport { CameraShake };\n","import { Suspense, useEffect } from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport { CameraShake, OrbitControls, Stage, useAnimations, useGLTF } from '@react-three/drei'\n\nimport robot from '../../models/robot-draco.glb'\n\n// Handling controls in Threejs is hard bc 3rd party components that change the camera need to know\n// about controls, or else all changes are overwritten. That is the case for both <Stage and <CameraShake.\n// In latest R3F controls can be set as the default so that other parts of the app may react to it.\n// By setting <OrbitControls makeDefault <Stage and <CameraShake are aware of the controls being used.\n// Should your own components rely on default controls, throughout the three they're available as:\n//   const controls = useThree(state => state.controls)\nuseGLTF.preload(robot)\nconst Model = (props: any) => {\n  const { scene, animations }: any = useGLTF(robot)\n  const { actions }: any = useAnimations(animations, scene)\n  useEffect(() => {\n    actions.Idle.play()\n    scene.traverse((obj: any) => obj.isMesh && (obj.receiveShadow = obj.castShadow = true))\n  }, [actions, scene])\n  return <primitive object={scene} {...props} />\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas shadows camera={{ fov: 50 }} className='bg-[#303035] bg-[url(\"./basic-examples/staging-and-camerashake/view.svg\")] bg-no-repeat bg-contain bg-center z-10'>\n        <Suspense fallback={null}>\n          <Stage contactShadow={{ opacity: 1, blur: 2 }}>\n            <Model />\n          </Stage>\n        </Suspense>\n        <OrbitControls makeDefault />\n        <CameraShake\n          maxYaw={0.1} // Max amount camera can yaw in either direction\n          maxPitch={0.1} // Max amount camera can pitch in either direction\n          maxRoll={0.1} // Max amount camera can roll in either direction\n          yawFrequency={0.1} // Frequency of the the yaw rotation\n          pitchFrequency={0.1} // Frequency of the pitch rotation\n          rollFrequency={0.1} // Frequency of the roll rotation\n          intensity={1} // initial intensity of the shake\n          decayRate={0.65} // if decay = true this is the rate at which intensity will reduce at />\n        />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst HorizontalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    h: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n      varying vec2 vUv;\n\n      void main() {\n\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n      }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n    uniform sampler2D tDiffuse;\n    uniform float h;\n\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvec4 sum = vec4( 0.0 );\n\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\n\n    \tgl_FragColor = sum;\n\n    }\n  `\n};\n\nexport { HorizontalBlurShader };\n","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst VerticalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    v: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n    varying vec2 vUv;\n\n    void main() {\n\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n    }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n\n  uniform sampler2D tDiffuse;\n  uniform float v;\n\n  varying vec2 vUv;\n\n  void main() {\n\n    vec4 sum = vec4( 0.0 );\n\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\n\n    gl_FragColor = sum;\n\n  }\n  `\n};\n\nexport { VerticalBlurShader };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale = 10,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 512,\n  smooth = true,\n  color = '#000000',\n  depthWrite = false,\n  renderOrder,\n  ...props\n}, ref) => {\n  const scene = useThree(state => state.scene);\n  const gl = useThree(state => state.gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color).convertSRGBToLinear()\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale, color]);\n\n  const blurShadows = blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  };\n\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: renderOrder,\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    \"map-encoding\": gl.outputEncoding,\n    transparent: true,\n    opacity: opacity,\n    depthWrite: depthWrite\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Environment } from './Environment.js';\nimport { ContactShadows } from './ContactShadows.js';\n\nconst presets = {\n  rembrandt: {\n    main: [1, 2, 1],\n    fill: [-2, -0.5, -2]\n  },\n  portrait: {\n    main: [-1, 2, 0.5],\n    fill: [-1, 0.5, -1.5]\n  },\n  upfront: {\n    main: [0, 2, 1],\n    fill: [-1, 0.5, -1.5]\n  },\n  soft: {\n    main: [-2, 4, 4],\n    fill: [-1, 0.5, -1.5]\n  }\n};\nfunction Stage({\n  children,\n  controls,\n  shadows = true,\n  adjustCamera = true,\n  environment = 'city',\n  intensity = 1,\n  preset = 'rembrandt',\n  shadowBias = 0,\n  contactShadow = {\n    blur: 2,\n    opacity: 0.5,\n    position: [0, 0, 0]\n  },\n  ...props\n}) {\n  const config = presets[preset];\n  const camera = useThree(state => state.camera); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const defaultControls = useThree(state => state.controls);\n  const outer = React.useRef(null);\n  const inner = React.useRef(null);\n  const [{\n    radius,\n    width,\n    height\n  }, set] = React.useState({\n    radius: 0,\n    width: 0,\n    height: 0\n  });\n  React.useLayoutEffect(() => {\n    outer.current.position.set(0, 0, 0);\n    outer.current.updateWorldMatrix(true, true);\n    const box3 = new THREE.Box3().setFromObject(inner.current);\n    const center = new THREE.Vector3();\n    const sphere = new THREE.Sphere();\n    const height = box3.max.y - box3.min.y;\n    const width = box3.max.x - box3.min.x;\n    box3.getCenter(center);\n    box3.getBoundingSphere(sphere);\n    set({\n      radius: sphere.radius,\n      width,\n      height\n    });\n    outer.current.position.set(-center.x, -center.y + height / 2, -center.z);\n  }, [children]);\n  React.useLayoutEffect(() => {\n    if (adjustCamera) {\n      const y = radius / (height > width ? 1.5 : 2.5);\n      camera.position.set(0, radius * 0.5, radius * 2.5);\n      camera.near = 0.1;\n      camera.far = Math.max(5000, radius * 4);\n      camera.lookAt(0, y, 0);\n      const ctrl = defaultControls || (controls == null ? void 0 : controls.current);\n\n      if (ctrl) {\n        ctrl.target.set(0, y, 0);\n        ctrl.update();\n      }\n    }\n  }, [defaultControls, radius, height, width, adjustCamera]);\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"group\", {\n    ref: outer\n  }, /*#__PURE__*/React.createElement(\"group\", {\n    ref: inner\n  }, children)), contactShadow && /*#__PURE__*/React.createElement(ContactShadows, _extends({\n    scale: radius * 2,\n    far: radius / 2\n  }, contactShadow)), environment && /*#__PURE__*/React.createElement(Environment, {\n    preset: environment\n  }), /*#__PURE__*/React.createElement(\"ambientLight\", {\n    intensity: intensity / 3\n  }), /*#__PURE__*/React.createElement(\"spotLight\", {\n    penumbra: 1,\n    position: [config.main[0] * radius, config.main[1] * radius, config.main[2] * radius],\n    intensity: intensity * 2,\n    castShadow: shadows,\n    \"shadow-bias\": shadowBias\n  }), /*#__PURE__*/React.createElement(\"pointLight\", {\n    position: [config.fill[0] * radius, config.fill[1] * radius, config.fill[2] * radius],\n    intensity: intensity\n  }));\n}\n\nexport { Stage };\n","import * as React from 'react';\nimport { Object3D, AnimationMixer } from 'three';\nimport { useFrame } from '@react-three/fiber';\n\nfunction useAnimations(clips, root) {\n  const ref = React.useRef();\n  const [actualRef] = React.useState(() => root ? root instanceof Object3D ? {\n    current: root\n  } : root : ref); // eslint-disable-next-line prettier/prettier\n\n  const [mixer] = React.useState(() => new AnimationMixer(undefined));\n  const lazyActions = React.useRef({});\n  const [api] = React.useState(() => {\n    const actions = {};\n    clips.forEach(clip => Object.defineProperty(actions, clip.name, {\n      enumerable: true,\n\n      get() {\n        if (actualRef.current) {\n          return lazyActions.current[clip.name] || (lazyActions.current[clip.name] = mixer.clipAction(clip, actualRef.current));\n        }\n      }\n\n    }));\n    return {\n      ref: actualRef,\n      clips,\n      actions,\n      names: clips.map(c => c.name),\n      mixer\n    };\n  });\n  useFrame((state, delta) => mixer.update(delta));\n  React.useEffect(() => {\n    const currentRoot = actualRef.current;\n    return () => {\n      // Clean up only when clips change, wipe out lazy actions and uncache clips\n      lazyActions.current = {};\n      Object.values(api.actions).forEach(action => {\n        if (currentRoot) {\n          mixer.uncacheAction(action, currentRoot);\n        }\n      });\n    };\n  }, [clips]);\n  return api;\n}\n\nexport { useAnimations };\n"],"names":["SimplexNoise","r","Math","_defineProperty","this","g","x","y","z","w","xin","yin","s","sqrt","i","floor","j","G2","t","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","perm","gi1","gi2","t0","t1","t2","dot","grad3","zin","k1","i2","j2","k2","k","G3","z0","z1","z2","x3","y3","z3","kk","gi3","t3","dot3","l1","l2","i3","j3","k3","l3","grad4","simplex","F4","G4","l","w0","c","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4","dot4","p","random","CameraShake","React","ref","intensity","decay","decayRate","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","camera","useThree","state","defaultControls","controls","intensityRef","initialRotation","rotation","clone","yawNoise","pitchNoise","rollNoise","constrainIntensity","current","getIntensity","setIntensity","val","callback","addEventListener","removeEventListener","useFrame","delta","shake","pow","yaw","noise","clock","elapsedTime","pitch","roll","set","useGLTF","robot","Model","props","scene","animations","actions","useAnimations","useEffect","Idle","play","traverse","obj","isMesh","receiveShadow","castShadow","object","children","shadows","fov","className","Suspense","fallback","Stage","contactShadow","opacity","blur","OrbitControls","makeDefault","HorizontalBlurShader","uniforms","tDiffuse","value","h","vertexShader","fragmentShader","VerticalBlurShader","v","ContactShadows","scale","frames","Infinity","width","height","far","resolution","smooth","color","depthWrite","renderOrder","gl","shadowCamera","Array","isArray","renderTarget","THREE","renderTargetBlur","texture","generateMipmaps","planeGeometry","rotateX","PI","blurPlane","depthMaterial","depthTest","onBeforeCompile","shader","ucolor","convertSRGBToLinear","replace","horizontalBlurMaterial","verticalBlurMaterial","blurShadows","visible","material","setRenderTarget","render","count","initialBackground","background","initialOverrideMaterial","overrideMaterial","_extends","geometry","map","outputEncoding","transparent","args","presets","rembrandt","main","fill","portrait","upfront","soft","adjustCamera","environment","preset","shadowBias","position","config","outer","inner","radius","updateWorldMatrix","box3","setFromObject","center","sphere","max","min","getCenter","getBoundingSphere","near","lookAt","ctrl","target","update","Environment","penumbra","clips","root","Object3D","actualRef","AnimationMixer","undefined","mixer","lazyActions","forEach","clip","Object","defineProperty","name","enumerable","get","clipAction","names","api","currentRoot","values","action","uncacheAction"],"sourceRoot":""}