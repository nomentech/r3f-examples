{"version":3,"file":"static/js/9289.98c9e8f5.chunk.js","mappings":"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","sources":["basic-examples/edgesgeometry/Example.tsx","../node_modules/three-stdlib/shaders/HorizontalBlurShader.js","../node_modules/three-stdlib/shaders/VerticalBlurShader.js","../node_modules/@react-three/drei/core/ContactShadows.js","../node_modules/@react-three/drei/core/Edges.js","../node_modules/@react-three/drei/core/OrbitControls.js","../node_modules/@react-three/drei/core/Stage.js"],"sourcesContent":["import { Canvas } from '@react-three/fiber'\nimport { Edges, OrbitControls, Stage, useGLTF } from '@react-three/drei'\n\nimport modelPath from '../../models/headless.glb'\nimport { Suspense } from 'react'\n\nconst Model = () => {\n  const { nodes } = useGLTF(modelPath) as any\n  \n  return (\n    <group dispose={null}>\n      <mesh geometry={nodes.Cube.geometry}>\n        <meshStandardMaterial transparent />\n        <Edges />\n      </mesh>\n    </group>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas dpr={[1, 2]} camera={{ position: [0, 0, 3], fov: 50}}>\n        <Suspense fallback={null}>\n          <Stage>\n            <Model />\n          </Stage>\n        </Suspense>\n        <OrbitControls dampingFactor={0.3} />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst HorizontalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    h: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n      varying vec2 vUv;\n\n      void main() {\n\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n      }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n    uniform sampler2D tDiffuse;\n    uniform float h;\n\n    varying vec2 vUv;\n\n    void main() {\n\n    \tvec4 sum = vec4( 0.0 );\n\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 4.0 * h, vUv.y ) ) * 0.051;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x - 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 1.0 * h, vUv.y ) ) * 0.1531;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 2.0 * h, vUv.y ) ) * 0.12245;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 3.0 * h, vUv.y ) ) * 0.0918;\n    \tsum += texture2D( tDiffuse, vec2( vUv.x + 4.0 * h, vUv.y ) ) * 0.051;\n\n    \tgl_FragColor = sum;\n\n    }\n  `\n};\n\nexport { HorizontalBlurShader };\n","/**\n * Two pass Gaussian blur filter (horizontal and vertical blur shaders)\n * - described in http://www.gamerendering.com/2008/10/11/gaussian-blur-filter-shader/\n *   and used in http://www.cake23.de/traveling-wavefronts-lit-up.html\n *\n * - 9 samples per pass\n * - standard deviation 2.7\n * - \"h\" and \"v\" parameters should be set to \"1 / width\" and \"1 / height\"\n */\nconst VerticalBlurShader = {\n  uniforms: {\n    tDiffuse: {\n      value: null\n    },\n    v: {\n      value: 1.0 / 512.0\n    }\n  },\n  vertexShader:\n  /* glsl */\n  `\n    varying vec2 vUv;\n\n    void main() {\n\n      vUv = uv;\n      gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n    }\n  `,\n  fragmentShader:\n  /* glsl */\n  `\n\n  uniform sampler2D tDiffuse;\n  uniform float v;\n\n  varying vec2 vUv;\n\n  void main() {\n\n    vec4 sum = vec4( 0.0 );\n\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 4.0 * v ) ) * 0.051;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y - 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y ) ) * 0.1633;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 1.0 * v ) ) * 0.1531;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 2.0 * v ) ) * 0.12245;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 3.0 * v ) ) * 0.0918;\n    sum += texture2D( tDiffuse, vec2( vUv.x, vUv.y + 4.0 * v ) ) * 0.051;\n\n    gl_FragColor = sum;\n\n  }\n  `\n};\n\nexport { VerticalBlurShader };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { HorizontalBlurShader, VerticalBlurShader } from 'three-stdlib';\n\nconst ContactShadows = /*#__PURE__*/React.forwardRef(({\n  scale = 10,\n  frames = Infinity,\n  opacity = 1,\n  width = 1,\n  height = 1,\n  blur = 1,\n  far = 10,\n  resolution = 512,\n  smooth = true,\n  color = '#000000',\n  depthWrite = false,\n  renderOrder,\n  ...props\n}, ref) => {\n  const scene = useThree(state => state.scene);\n  const gl = useThree(state => state.gl);\n  const shadowCamera = React.useRef(null);\n  width = width * (Array.isArray(scale) ? scale[0] : scale || 1);\n  height = height * (Array.isArray(scale) ? scale[1] : scale || 1);\n  const [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur] = React.useMemo(() => {\n    const renderTarget = new THREE.WebGLRenderTarget(resolution, resolution);\n    const renderTargetBlur = new THREE.WebGLRenderTarget(resolution, resolution);\n    renderTargetBlur.texture.generateMipmaps = renderTarget.texture.generateMipmaps = false;\n    const planeGeometry = new THREE.PlaneBufferGeometry(width, height).rotateX(Math.PI / 2);\n    const blurPlane = new THREE.Mesh(planeGeometry);\n    const depthMaterial = new THREE.MeshDepthMaterial();\n    depthMaterial.depthTest = depthMaterial.depthWrite = false;\n\n    depthMaterial.onBeforeCompile = shader => {\n      shader.uniforms = { ...shader.uniforms,\n        ucolor: {\n          value: new THREE.Color(color).convertSRGBToLinear()\n        }\n      };\n      shader.fragmentShader = shader.fragmentShader.replace(`void main() {`, //\n      `uniform vec3 ucolor;\n           void main() {\n          `);\n      shader.fragmentShader = shader.fragmentShader.replace('vec4( vec3( 1.0 - fragCoordZ ), opacity );', 'vec4( ucolor, ( 1.0 - fragCoordZ ) * 1.0 );');\n    };\n\n    const horizontalBlurMaterial = new THREE.ShaderMaterial(HorizontalBlurShader);\n    const verticalBlurMaterial = new THREE.ShaderMaterial(VerticalBlurShader);\n    verticalBlurMaterial.depthTest = horizontalBlurMaterial.depthTest = false;\n    return [renderTarget, planeGeometry, depthMaterial, blurPlane, horizontalBlurMaterial, verticalBlurMaterial, renderTargetBlur];\n  }, [resolution, width, height, scale, color]);\n\n  const blurShadows = blur => {\n    blurPlane.visible = true;\n    blurPlane.material = horizontalBlurMaterial;\n    horizontalBlurMaterial.uniforms.tDiffuse.value = renderTarget.texture;\n    horizontalBlurMaterial.uniforms.h.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTargetBlur);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.material = verticalBlurMaterial;\n    verticalBlurMaterial.uniforms.tDiffuse.value = renderTargetBlur.texture;\n    verticalBlurMaterial.uniforms.v.value = blur * 1 / 256;\n    gl.setRenderTarget(renderTarget);\n    gl.render(blurPlane, shadowCamera.current);\n    blurPlane.visible = false;\n  };\n\n  let count = 0;\n  useFrame(() => {\n    if (shadowCamera.current && (frames === Infinity || count < frames)) {\n      const initialBackground = scene.background;\n      scene.background = null;\n      const initialOverrideMaterial = scene.overrideMaterial;\n      scene.overrideMaterial = depthMaterial;\n      gl.setRenderTarget(renderTarget);\n      gl.render(scene, shadowCamera.current);\n      scene.overrideMaterial = initialOverrideMaterial;\n      blurShadows(blur);\n      if (smooth) blurShadows(blur * 0.4);\n      gl.setRenderTarget(null);\n      scene.background = initialBackground;\n      count++;\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"group\", _extends({\n    \"rotation-x\": Math.PI / 2\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    renderOrder: renderOrder,\n    geometry: planeGeometry,\n    scale: [1, -1, 1],\n    rotation: [-Math.PI / 2, 0, 0]\n  }, /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n    map: renderTarget.texture,\n    \"map-encoding\": gl.outputEncoding,\n    transparent: true,\n    opacity: opacity,\n    depthWrite: depthWrite\n  })), /*#__PURE__*/React.createElement(\"orthographicCamera\", {\n    ref: shadowCamera,\n    args: [-width / 2, width / 2, height / 2, -height / 2, 0, far]\n  }));\n});\n\nexport { ContactShadows };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\n\nfunction Edges({\n  userData,\n  children,\n  geometry,\n  threshold = 15,\n  color = 'black',\n  ...props\n}) {\n  const ref = React.useRef(null);\n  React.useLayoutEffect(() => {\n    const parent = ref.current.parent;\n\n    if (parent) {\n      const geom = geometry || parent.geometry;\n\n      if (geom !== ref.current.userData.currentGeom || threshold !== ref.current.userData.currentThreshold) {\n        ref.current.userData.currentGeom = geom;\n        ref.current.userData.currentThreshold = threshold;\n        ref.current.geometry = new THREE.EdgesGeometry(geom, threshold);\n      }\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"lineSegments\", _extends({\n    ref: ref,\n    raycast: () => null\n  }, props), children ? children : /*#__PURE__*/React.createElement(\"lineBasicMaterial\", {\n    color: color\n  }));\n}\n\nexport { Edges };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport * as React from 'react';\nimport { OrbitControls as OrbitControls$1 } from 'three-stdlib';\n\nconst OrbitControls = /*#__PURE__*/React.forwardRef(({\n  makeDefault,\n  camera,\n  regress,\n  domElement,\n  enableDamping = true,\n  onChange,\n  onStart,\n  onEnd,\n  ...restProps\n}, ref) => {\n  const invalidate = useThree(state => state.invalidate);\n  const defaultCamera = useThree(state => state.camera);\n  const gl = useThree(state => state.gl);\n  const events = useThree(state => state.events);\n  const set = useThree(state => state.set);\n  const get = useThree(state => state.get);\n  const performance = useThree(state => state.performance);\n  const explCamera = camera || defaultCamera;\n  const explDomElement = domElement || events.connected || gl.domElement;\n  const controls = React.useMemo(() => new OrbitControls$1(explCamera), [explCamera]);\n  useFrame(() => {\n    if (controls.enabled) controls.update();\n  }, -1);\n  React.useEffect(() => {\n    controls.connect(explDomElement);\n    return () => void controls.dispose();\n  }, [explDomElement, regress, controls, invalidate]);\n  React.useEffect(() => {\n    const callback = e => {\n      invalidate();\n      if (regress) performance.regress();\n      if (onChange) onChange(e);\n    };\n\n    controls.addEventListener('change', callback);\n    if (onStart) controls.addEventListener('start', onStart);\n    if (onEnd) controls.addEventListener('end', onEnd);\n    return () => {\n      if (onStart) controls.removeEventListener('start', onStart);\n      if (onEnd) controls.removeEventListener('end', onEnd);\n      controls.removeEventListener('change', callback);\n    };\n  }, [onChange, onStart, onEnd]);\n  React.useEffect(() => {\n    if (makeDefault) {\n      const old = get().controls;\n      set({\n        controls\n      });\n      return () => set({\n        controls: old\n      });\n    }\n  }, [makeDefault, controls]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls,\n    enableDamping: enableDamping\n  }, restProps));\n});\n\nexport { OrbitControls };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\nimport { useThree } from '@react-three/fiber';\nimport { Environment } from './Environment.js';\nimport { ContactShadows } from './ContactShadows.js';\n\nconst presets = {\n  rembrandt: {\n    main: [1, 2, 1],\n    fill: [-2, -0.5, -2]\n  },\n  portrait: {\n    main: [-1, 2, 0.5],\n    fill: [-1, 0.5, -1.5]\n  },\n  upfront: {\n    main: [0, 2, 1],\n    fill: [-1, 0.5, -1.5]\n  },\n  soft: {\n    main: [-2, 4, 4],\n    fill: [-1, 0.5, -1.5]\n  }\n};\nfunction Stage({\n  children,\n  controls,\n  shadows = true,\n  adjustCamera = true,\n  environment = 'city',\n  intensity = 1,\n  preset = 'rembrandt',\n  shadowBias = 0,\n  contactShadow = {\n    blur: 2,\n    opacity: 0.5,\n    position: [0, 0, 0]\n  },\n  ...props\n}) {\n  const config = presets[preset];\n  const camera = useThree(state => state.camera); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const defaultControls = useThree(state => state.controls);\n  const outer = React.useRef(null);\n  const inner = React.useRef(null);\n  const [{\n    radius,\n    width,\n    height\n  }, set] = React.useState({\n    radius: 0,\n    width: 0,\n    height: 0\n  });\n  React.useLayoutEffect(() => {\n    outer.current.position.set(0, 0, 0);\n    outer.current.updateWorldMatrix(true, true);\n    const box3 = new THREE.Box3().setFromObject(inner.current);\n    const center = new THREE.Vector3();\n    const sphere = new THREE.Sphere();\n    const height = box3.max.y - box3.min.y;\n    const width = box3.max.x - box3.min.x;\n    box3.getCenter(center);\n    box3.getBoundingSphere(sphere);\n    set({\n      radius: sphere.radius,\n      width,\n      height\n    });\n    outer.current.position.set(-center.x, -center.y + height / 2, -center.z);\n  }, [children]);\n  React.useLayoutEffect(() => {\n    if (adjustCamera) {\n      const y = radius / (height > width ? 1.5 : 2.5);\n      camera.position.set(0, radius * 0.5, radius * 2.5);\n      camera.near = 0.1;\n      camera.far = Math.max(5000, radius * 4);\n      camera.lookAt(0, y, 0);\n      const ctrl = defaultControls || (controls == null ? void 0 : controls.current);\n\n      if (ctrl) {\n        ctrl.target.set(0, y, 0);\n        ctrl.update();\n      }\n    }\n  }, [defaultControls, radius, height, width, adjustCamera]);\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"group\", {\n    ref: outer\n  }, /*#__PURE__*/React.createElement(\"group\", {\n    ref: inner\n  }, children)), contactShadow && /*#__PURE__*/React.createElement(ContactShadows, _extends({\n    scale: radius * 2,\n    far: radius / 2\n  }, contactShadow)), environment && /*#__PURE__*/React.createElement(Environment, {\n    preset: environment\n  }), /*#__PURE__*/React.createElement(\"ambientLight\", {\n    intensity: intensity / 3\n  }), /*#__PURE__*/React.createElement(\"spotLight\", {\n    penumbra: 1,\n    position: [config.main[0] * radius, config.main[1] * radius, config.main[2] * radius],\n    intensity: intensity * 2,\n    castShadow: shadows,\n    \"shadow-bias\": shadowBias\n  }), /*#__PURE__*/React.createElement(\"pointLight\", {\n    position: [config.fill[0] * radius, config.fill[1] * radius, config.fill[2] * radius],\n    intensity: intensity\n  }));\n}\n\nexport { Stage };\n"],"names":["Model","nodes","useGLTF","modelPath","dispose","geometry","Cube","transparent","Edges","children","dpr","camera","position","fov","Suspense","fallback","Stage","OrbitControls","dampingFactor","HorizontalBlurShader","uniforms","tDiffuse","value","h","vertexShader","fragmentShader","VerticalBlurShader","v","ContactShadows","React","ref","scale","frames","Infinity","opacity","width","height","blur","far","resolution","smooth","color","depthWrite","renderOrder","props","scene","useThree","state","gl","shadowCamera","Array","isArray","renderTarget","THREE","renderTargetBlur","texture","generateMipmaps","planeGeometry","rotateX","Math","PI","blurPlane","depthMaterial","depthTest","onBeforeCompile","shader","ucolor","convertSRGBToLinear","replace","horizontalBlurMaterial","verticalBlurMaterial","blurShadows","visible","material","setRenderTarget","render","current","count","useFrame","initialBackground","background","initialOverrideMaterial","overrideMaterial","_extends","rotation","map","outputEncoding","args","userData","threshold","parent","geom","currentGeom","currentThreshold","raycast","makeDefault","regress","domElement","enableDamping","onChange","onStart","onEnd","restProps","invalidate","defaultCamera","events","set","get","performance","explCamera","explDomElement","connected","controls","OrbitControls$1","enabled","update","connect","callback","e","addEventListener","removeEventListener","old","object","presets","rembrandt","main","fill","portrait","upfront","soft","shadows","adjustCamera","environment","intensity","preset","shadowBias","contactShadow","config","defaultControls","outer","inner","radius","updateWorldMatrix","box3","setFromObject","center","sphere","max","y","min","x","getCenter","getBoundingSphere","z","near","lookAt","ctrl","target","Environment","penumbra","castShadow"],"sourceRoot":""}