{"version":3,"file":"static/js/3107.59afeeac.chunk.js","mappings":"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","sources":["../node_modules/three/examples/jsm/postprocessing/Pass.js","../node_modules/three/examples/jsm/postprocessing/LUTPass.js","../node_modules/three/examples/jsm/postprocessing/ShaderPass.js","basic-examples/color-grading/Example.tsx","../node_modules/@react-three/drei/core/OrbitControls.js","../node_modules/@react-three/drei/core/useTexture.js"],"sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import { ShaderPass } from './ShaderPass.js';\n\nconst LUTShader = {\n\n\tdefines: {\n\t\tUSE_3DTEXTURE: 1,\n\t},\n\n\tuniforms: {\n\t\tlut3d: { value: null },\n\n\t\tlut: { value: null },\n\t\tlutSize: { value: 0 },\n\n\t\ttDiffuse: { value: null },\n\t\tintensity: { value: 1.0 },\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}\n\n\t`,\n\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float lutSize;\n\t\t#if USE_3DTEXTURE\n\t\tprecision highp sampler3D;\n\t\tuniform sampler3D lut3d;\n\t\t#else\n\t\tuniform sampler2D lut;\n\n\t\tvec3 lutLookup( sampler2D tex, float size, vec3 rgb ) {\n\n\t\t\tfloat sliceHeight = 1.0 / size;\n\t\t\tfloat yPixelHeight = 1.0 / ( size * size );\n\n\t\t\t// Get the slices on either side of the sample\n\t\t\tfloat slice = rgb.b * size;\n\t\t\tfloat interp = fract( slice );\n\t\t\tfloat slice0 = slice - interp;\n\t\t\tfloat centeredInterp = interp - 0.5;\n\n\t\t\tfloat slice1 = slice0 + sign( centeredInterp );\n\n\t\t\t// Pull y sample in by half a pixel in each direction to avoid color\n\t\t\t// bleeding from adjacent slices.\n\t\t\tfloat greenOffset = clamp( rgb.g * sliceHeight, yPixelHeight * 0.5, sliceHeight - yPixelHeight * 0.5 );\n\n\t\t\tvec2 uv0 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice0 * sliceHeight + greenOffset\n\t\t\t);\n\t\t\tvec2 uv1 = vec2(\n\t\t\t\trgb.r,\n\t\t\t\tslice1 * sliceHeight + greenOffset\n\t\t\t);\n\n\t\t\tvec3 sample0 = texture2D( tex, uv0 ).rgb;\n\t\t\tvec3 sample1 = texture2D( tex, uv1 ).rgb;\n\n\t\t\treturn mix( sample0, sample1, abs( centeredInterp ) );\n\n\t\t}\n\t\t#endif\n\n\t\tvarying vec2 vUv;\n\t\tuniform float intensity;\n\t\tuniform sampler2D tDiffuse;\n\t\tvoid main() {\n\n\t\t\tvec4 val = texture2D( tDiffuse, vUv );\n\t\t\tvec4 lutVal;\n\n\t\t\t// pull the sample in by half a pixel so the sample begins\n\t\t\t// at the center of the edge pixels.\n\t\t\tfloat pixelWidth = 1.0 / lutSize;\n\t\t\tfloat halfPixelWidth = 0.5 / lutSize;\n\t\t\tvec3 uvw = vec3( halfPixelWidth ) + val.rgb * ( 1.0 - pixelWidth );\n\n\t\t\t#if USE_3DTEXTURE\n\n\t\t\tlutVal = vec4( texture( lut3d, uvw ).rgb, val.a );\n\n\t\t\t#else\n\n\t\t\tlutVal = vec4( lutLookup( lut, lutSize, uvw ), val.a );\n\n\t\t\t#endif\n\n\t\t\tgl_FragColor = vec4( mix( val, lutVal, intensity ) );\n\n\t\t}\n\n\t`,\n\n};\n\nclass LUTPass extends ShaderPass {\n\n\tset lut( v ) {\n\n\t\tconst material = this.material;\n\t\tif ( v !== this.lut ) {\n\n\t\t\tmaterial.uniforms.lut3d.value = null;\n\t\t\tmaterial.uniforms.lut.value = null;\n\n\t\t\tif ( v ) {\n\n\t\t\t\tconst is3dTextureDefine = v.isData3DTexture ? 1 : 0;\n\t\t\t\tif ( is3dTextureDefine !== material.defines.USE_3DTEXTURE ) {\n\n\t\t\t\t\tmaterial.defines.USE_3DTEXTURE = is3dTextureDefine;\n\t\t\t\t\tmaterial.needsUpdate = true;\n\n\t\t\t\t}\n\n\t\t\t\tmaterial.uniforms.lutSize.value = v.image.width;\n\t\t\t\tif ( v.isData3DTexture ) {\n\n\t\t\t\t\tmaterial.uniforms.lut3d.value = v;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tmaterial.uniforms.lut.value = v;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\tget lut() {\n\n\t\treturn this.material.uniforms.lut.value || this.material.uniforms.lut3d.value;\n\n\t}\n\n\tset intensity( v ) {\n\n\t\tthis.material.uniforms.intensity.value = v;\n\n\t}\n\n\tget intensity() {\n\n\t\treturn this.material.uniforms.intensity.value;\n\n\t}\n\n\tconstructor( options = {} ) {\n\n\t\tsuper( LUTShader );\n\t\tthis.lut = options.lut || null;\n\t\tthis.intensity = 'intensity' in options ? options.intensity : 1;\n\n\t}\n\n}\n\nexport { LUTPass };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ShaderPass };\n","import { Suspense } from 'react'\nimport { Canvas, extend, Object3DNode, useLoader } from '@react-three/fiber'\nimport { Effects, Environment, OrbitControls, useTexture } from '@react-three/drei'\nimport { LUTPass } from 'three/examples/jsm/postprocessing/LUTPass'\nimport { LUTCubeLoader } from 'three/examples/jsm/loaders/LUTCubeLoader'\nimport cube from '../../models/cubicle-99.CUBE'\nimport terrazo from '../../textures/terrazo.png'\nextend({ LUTPass })\n\ndeclare global {\n  namespace JSX {\n    interface IntrinsicElements {\n      lUTPass: Object3DNode<any, typeof LUTPass>\n    }\n  }\n}\n\nconst Grading = () => {\n  const { texture3D }: any = useLoader(LUTCubeLoader as any, cube)\n\n  return <Effects children={<lUTPass attachArray='passes' lut={texture3D} />} />\n}\n\nconst Sphere = (props: any) => {\n  const texture = useTexture(terrazo)\n\n  return (\n    <mesh {...props}>\n      <sphereBufferGeometry args={[1, 64, 64]} />\n      <meshPhysicalMaterial envMapIntensity={0.4} map={texture} \n        clearcoat={0.8} clearcoatRoughness={0} roughness={1} metalness={0} />\n    </mesh>\n  )\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>\n      { children }\n      <Canvas frameloop='demand' dpr={[1, 2]} camera={{ position: [0, 0, 5], fov: 45 }}\n        className='bg-gradient-to-br from-[#cbbacc] to-[#2580b3]'>\n        <spotLight intensity={0.5} angle={0.2} penumbra={1} position={[5, 15, 10]} />\n        <Suspense fallback={null}>\n          <Sphere />\n          {/* <Grading /> */}\n          <Environment preset='warehouse' />\n        </Suspense>\n        <OrbitControls />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport * as React from 'react';\nimport { OrbitControls as OrbitControls$1 } from 'three-stdlib';\n\nconst OrbitControls = /*#__PURE__*/React.forwardRef(({\n  makeDefault,\n  camera,\n  regress,\n  domElement,\n  enableDamping = true,\n  onChange,\n  onStart,\n  onEnd,\n  ...restProps\n}, ref) => {\n  const invalidate = useThree(state => state.invalidate);\n  const defaultCamera = useThree(state => state.camera);\n  const gl = useThree(state => state.gl);\n  const events = useThree(state => state.events);\n  const set = useThree(state => state.set);\n  const get = useThree(state => state.get);\n  const performance = useThree(state => state.performance);\n  const explCamera = camera || defaultCamera;\n  const explDomElement = domElement || events.connected || gl.domElement;\n  const controls = React.useMemo(() => new OrbitControls$1(explCamera), [explCamera]);\n  useFrame(() => {\n    if (controls.enabled) controls.update();\n  }, -1);\n  React.useEffect(() => {\n    controls.connect(explDomElement);\n    return () => void controls.dispose();\n  }, [explDomElement, regress, controls, invalidate]);\n  React.useEffect(() => {\n    const callback = e => {\n      invalidate();\n      if (regress) performance.regress();\n      if (onChange) onChange(e);\n    };\n\n    controls.addEventListener('change', callback);\n    if (onStart) controls.addEventListener('start', onStart);\n    if (onEnd) controls.addEventListener('end', onEnd);\n    return () => {\n      if (onStart) controls.removeEventListener('start', onStart);\n      if (onEnd) controls.removeEventListener('end', onEnd);\n      controls.removeEventListener('change', callback);\n    };\n  }, [onChange, onStart, onEnd]);\n  React.useEffect(() => {\n    if (makeDefault) {\n      const old = get().controls;\n      set({\n        controls\n      });\n      return () => set({\n        controls: old\n      });\n    }\n  }, [makeDefault, controls]);\n  return /*#__PURE__*/React.createElement(\"primitive\", _extends({\n    ref: ref,\n    object: controls,\n    enableDamping: enableDamping\n  }, restProps));\n});\n\nexport { OrbitControls };\n","import { TextureLoader } from 'three';\nimport { useThree, useLoader } from '@react-three/fiber';\nimport { useEffect } from 'react';\n\nconst IsObject = url => url === Object(url) && !Array.isArray(url) && typeof url !== 'function';\nfunction useTexture(input) {\n  const gl = useThree(state => state.gl);\n  const textures = useLoader(TextureLoader, IsObject(input) ? Object.values(input) : input); // https://github.com/mrdoob/three.js/issues/22696\n  // Upload the texture to the GPU immediately instead of waiting for the first render\n\n  useEffect(() => {\n    const array = Array.isArray(textures) ? textures : [textures];\n    array.forEach(gl.initTexture);\n  }, [gl, textures]);\n\n  if (IsObject(input)) {\n    const keys = Object.keys(input);\n    const keyed = {};\n    keys.forEach(key => Object.assign(keyed, {\n      [key]: textures[keys.indexOf(key)]\n    }));\n    return keyed;\n  } else {\n    return textures;\n  }\n}\n\nuseTexture.preload = url => useLoader.preload(TextureLoader, url);\n\nuseTexture.clear = input => useLoader.clear(TextureLoader, input);\n\nexport { IsObject, useTexture };\n"],"names":["Pass","this","enabled","needsSwap","clear","renderToScreen","console","error","_camera","OrthographicCamera","_geometry","BufferGeometry","setAttribute","Float32BufferAttribute","FullScreenQuad","material","_mesh","Mesh","geometry","dispose","renderer","render","value","LUTShader","defines","USE_3DTEXTURE","uniforms","lut3d","lut","lutSize","tDiffuse","intensity","vertexShader","fragmentShader","LUTPass","options","v","is3dTextureDefine","isData3DTexture","needsUpdate","image","width","ShaderPass","shader","textureID","undefined","ShaderMaterial","UniformsUtils","Object","assign","fsQuad","writeBuffer","readBuffer","texture","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","extend","Sphere","props","useTexture","terrazo","args","envMapIntensity","map","clearcoat","clearcoatRoughness","roughness","metalness","children","frameloop","dpr","camera","position","fov","className","angle","penumbra","Suspense","fallback","Environment","preset","OrbitControls","React","ref","makeDefault","regress","domElement","enableDamping","onChange","onStart","onEnd","restProps","invalidate","useThree","state","defaultCamera","gl","events","set","get","performance","explCamera","explDomElement","connected","controls","OrbitControls$1","useFrame","update","connect","callback","e","addEventListener","removeEventListener","old","_extends","object","IsObject","url","Array","isArray","input","textures","useLoader","TextureLoader","values","useEffect","forEach","initTexture","keys","keyed","key","indexOf","preload"],"sourceRoot":""}