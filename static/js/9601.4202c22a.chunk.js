"use strict";(self.webpackChunkr3f_examples=self.webpackChunkr3f_examples||[]).push([[9601],{24:function(t,e,n){n.r(e),n.d(e,{default:function(){return z}});var o=n(2791),a=n(4647),i=n(4671),r=n(4637),s=n(1413),l=n(9439),c=n(4925),h=n(7760),f=n(8430),u=n(1690),v=n(9954),d=n.p+"static/media/blade_diffuse.afc6a995c517c5c0bb32.jpg",m=n.p+"static/media/blade_alpha.fd72bbc9635d5a296576.jpg",x=(0,n(3429).g)({bladeHeight:1,map:null,alphaMap:null,time:0,tipColor:new h.Color(0,.6,0).convertSRGBToLinear(),bottomColor:new h.Color(0,.1,0).convertSRGBToLinear()},"   precision mediump float;\n      attribute vec3 offset;\n      attribute vec4 orientation;\n      attribute float halfRootAngleSin;\n      attribute float halfRootAngleCos;\n      attribute float stretch;\n      uniform float time;\n      uniform float bladeHeight;\n      varying vec2 vUv;\n      varying float frc;\n      \n      //WEBGL-NOISE FROM https://github.com/stegu/webgl-noise\n      //Description : Array and textureless GLSL 2D simplex noise function. Author : Ian McEwan, Ashima Arts. Maintainer : stegu Lastmod : 20110822 (ijm) License : Copyright (C) 2011 Ashima Arts. All rights reserved. Distributed under the MIT License. See LICENSE file. https://github.com/ashima/webgl-noise https://github.com/stegu/webgl-noise      \n      vec3 mod289(vec3 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec2 mod289(vec2 x) {return x - floor(x * (1.0 / 289.0)) * 289.0;} vec3 permute(vec3 x) {return mod289(((x*34.0)+1.0)*x);} float snoise(vec2 v){const vec4 C = vec4(0.211324865405187, 0.366025403784439, -0.577350269189626, 0.024390243902439); vec2 i  = floor(v + dot(v, C.yy) ); vec2 x0 = v -   i + dot(i, C.xx); vec2 i1; i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0); vec4 x12 = x0.xyxy + C.xxzz; x12.xy -= i1; i = mod289(i); vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 )) + i.x + vec3(0.0, i1.x, 1.0 )); vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0); m = m*m ; m = m*m ; vec3 x = 2.0 * fract(p * C.www) - 1.0; vec3 h = abs(x) - 0.5; vec3 ox = floor(x + 0.5); vec3 a0 = x - ox; m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h ); vec3 g; g.x  = a0.x  * x0.x  + h.x  * x0.y; g.yz = a0.yz * x12.xz + h.yz * x12.yw; return 130.0 * dot(m, g);}\n      //END NOISE\n      \n      //https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\n      vec3 rotateVectorByQuaternion( vec3 v, vec4 q){\n        return 2.0 * cross(q.xyz, v * q.w + cross(q.xyz, v)) + v;\n      }\n      \n      //https://en.wikipedia.org/wiki/Slerp\n      vec4 slerp(vec4 v0, vec4 v1, float t) {\n        // Only unit quaternions are valid rotations.\n        // Normalize to avoid undefined behavior.\n        normalize(v0);\n        normalize(v1);\n      \n        // Compute the cosine of the angle between the two vectors.\n        float dot_ = dot(v0, v1);\n      \n        // If the dot product is negative, slerp won't take\n        // the shorter path. Note that v1 and -v1 are equivalent when\n        // the negation is applied to all four components. Fix by \n        // reversing one quaternion.\n        if (dot_ < 0.0) {\n          v1 = -v1;\n          dot_ = -dot_;\n        }  \n      \n        const float DOT_THRESHOLD = 0.9995;\n        if (dot_ > DOT_THRESHOLD) {\n          // If the inputs are too close for comfort, linearly interpolate\n          // and normalize the result.\n          vec4 result = t*(v1 - v0) + v0;\n          normalize(result);\n          return result;\n        }\n      \n        // Since dot is in range [0, DOT_THRESHOLD], acos is safe\n        float theta_0 = acos(dot_);       // theta_0 = angle between input vectors\n        float theta = theta_0*t;          // theta = angle between v0 and result\n        float sin_theta = sin(theta);     // compute this value only once\n        float sin_theta_0 = sin(theta_0); // compute this value only once\n        float s0 = cos(theta) - dot_ * sin_theta / sin_theta_0;  // == sin(theta_0 - theta) / sin(theta_0)\n        float s1 = sin_theta / sin_theta_0;\n        return (s0 * v0) + (s1 * v1);\n      }\n      \n      void main() {\n        //Relative position of vertex along the mesh Y direction\n        frc = position.y/float(bladeHeight);\n        //Get wind data from simplex noise \n        float noise = 1.0-(snoise(vec2((time-offset.x/50.0), (time-offset.z/50.0)))); \n        //Define the direction of an unbent blade of grass rotated around the Y axis\n        vec4 direction = vec4(0.0, halfRootAngleSin, 0.0, halfRootAngleCos);\n        //Interpolate between the unbent direction and the direction of growth calculated on the CPU. \n        //Using the relative location of the vertex along the Y axis as the weight, we get a smooth bend\n        direction = slerp(direction, orientation, frc);\n        vec3 vPosition = vec3(position.x, position.y + position.y * stretch, position.z);\n        vPosition = rotateVectorByQuaternion(vPosition, direction);\n      \n       //Apply wind\n       float halfAngle = noise * 0.15;\n        vPosition = rotateVectorByQuaternion(vPosition, normalize(vec4(sin(halfAngle), 0.0, -sin(halfAngle), cos(halfAngle))));\n        //UV for texture\n        vUv = uv;\n        //Calculate final position of the vertex from the world offset and the above shenanigans \n        gl_Position = projectionMatrix * modelViewMatrix * vec4(offset + vPosition, 1.0 );\n      }","\n      precision mediump float;\n      uniform sampler2D map;\n      uniform sampler2D alphaMap;\n      uniform vec3 tipColor;\n      uniform vec3 bottomColor;\n      varying vec2 vUv;\n      varying float frc;\n      \n      void main() {\n        //Get transparency information from alpha map\n        float alpha = texture2D(alphaMap, vUv).r;\n        //If transparent, don't draw\n        if(alpha < 0.15) discard;\n        //Get colour data from texture\n        vec4 col = vec4(texture2D(map, vUv));\n        //Add more green towards root\n        col = mix(vec4(tipColor, 1.0), col, frc);\n        //Add a shadow towards root\n        col = mix(vec4(bottomColor, 1.0), col, frc);\n        gl_FragColor = col;\n\n        #include <tonemapping_fragment>\n\t      #include <encodings_fragment>\n      }",(function(t){t.side=h.DoubleSide}));(0,u.e)({GrassMaterial:x});var p=n(184),g=["options","width","instances"],w=new v.ZP(Math.random);function y(t,e){var n=t.x*e.w+t.y*e.z-t.z*e.y+t.w*e.x,o=-t.x*e.z+t.y*e.w+t.z*e.x+t.w*e.y,a=t.x*e.y-t.y*e.x+t.z*e.w+t.w*e.z,i=-t.x*e.x-t.y*e.y-t.z*e.z+t.w*e.w;return new h.Vector4(n,o,a,i)}function b(t,e){var n=2*w.noise2D(t/50,e/50);return n+=4*w.noise2D(t/100,e/100),n+=.2*w.noise2D(t/10,e/10)}var M=function(t){var e=t.options,n=void 0===e?{bW:.12,bH:1,joints:5}:e,a=t.width,i=void 0===a?100:a,r=t.instances,v=void 0===r?5e4:r,x=(0,c.Z)(t,g),w=n.bW,M=n.bH,z=n.joints,A=(0,o.useRef)(),_=(0,u.z)(h.TextureLoader,[d,m]),C=(0,l.Z)(_,2),j=C[0],S=C[1],D=(0,o.useMemo)((function(){return function(t,e){for(var n=[],o=[],a=[],i=[],r=[],s=new h.Vector4,l=new h.Vector4,c=-.25,f=.25,u=0;u<t;u++){var v=Math.random()*e-e/2,d=Math.random()*e-e/2,m=b(v,d);n.push(v,m,d);var x=Math.PI-Math.random()*(2*Math.PI);i.push(Math.sin(.5*x)),r.push(Math.cos(.5*x));var p=new h.Vector3(0,1,0),g=p.x*Math.sin(x/2),w=p.y*Math.sin(x/2),M=p.z*Math.sin(x/2),z=Math.cos(x/2);s.set(g,w,M,z).normalize(),x=Math.random()*(f-c)+c,g=(p=new h.Vector3(1,0,0)).x*Math.sin(x/2),w=p.y*Math.sin(x/2),M=p.z*Math.sin(x/2),z=Math.cos(x/2),l.set(g,w,M,z).normalize(),s=y(s,l),x=Math.random()*(f-c)+c,g=(p=new h.Vector3(0,0,1)).x*Math.sin(x/2),w=p.y*Math.sin(x/2),M=p.z*Math.sin(x/2),z=Math.cos(x/2),l.set(g,w,M,z).normalize(),s=y(s,l),o.push(s.x,s.y,s.z,s.w),u<t/3?a.push(1.8*Math.random()):a.push(Math.random())}return{offsets:n,orientations:o,stretches:a,halfRootAngleCos:r,halfRootAngleSin:i}}(v,i)}),[v,i]),R=(0,o.useMemo)((function(){return new h.PlaneBufferGeometry(w,M,1,z).translate(0,M/2,0)}),[n]),P=(0,o.useMemo)((function(){var t=(new f.Z).fromBufferGeometry(new h.PlaneBufferGeometry(i,i,32,32));t.verticesNeedUpdate=!0,t.lookAt(new h.Vector3(0,1,0));for(var e=0;e<t.vertices.length;e++){var n=t.vertices[e];n.y=b(n.x,n.z)}return t.computeVertexNormals(),t.toBufferGeometry()}),[i]);return(0,u.x)((function(t){return A.current.uniforms.time.value=t.clock.elapsedTime/4})),(0,p.jsxs)("group",(0,s.Z)((0,s.Z)({},x),{},{children:[(0,p.jsxs)("mesh",{children:[(0,p.jsxs)("instancedBufferGeometry",{index:R.index,"attributes-position":R.attributes.position,"attributes-uv":R.attributes.uv,children:[(0,p.jsx)("instancedBufferAttribute",{attach:"attributes-offset",args:[new Float32Array(D.offsets),3]}),(0,p.jsx)("instancedBufferAttribute",{attach:"attributes-orientation",args:[new Float32Array(D.orientations),4]}),(0,p.jsx)("instancedBufferAttribute",{attach:"attributes-stretch",args:[new Float32Array(D.stretches),1]}),(0,p.jsx)("instancedBufferAttribute",{attach:"attributes-halfRootAngleSin",args:[new Float32Array(D.halfRootAngleSin),1]}),(0,p.jsx)("instancedBufferAttribute",{attach:"attributes-halfRootAngleCos",args:[new Float32Array(D.halfRootAngleCos),1]})]}),(0,p.jsx)("grassMaterial",{ref:A,map:j,alphaMap:S,toneMapped:!1})]}),(0,p.jsx)("mesh",{position:[0,0,0],geometry:P,children:(0,p.jsx)("meshStandardMaterial",{color:"#000f00"})})]}))},z=function(t){var e=t.children;return(0,p.jsxs)(p.Fragment,{children:[e,(0,p.jsxs)(a.Xz,{camera:{position:[15,15,10]},children:[(0,p.jsx)(i.q,{azimuth:1,inclination:.6,distance:1e3}),(0,p.jsx)("ambientLight",{}),(0,p.jsx)("pointLight",{position:[10,10,10]}),(0,p.jsx)(o.Suspense,{fallback:null,children:(0,p.jsx)(M,{})}),(0,p.jsx)(r.z,{minPolarAngle:Math.PI/2.5,maxPolarAngle:Math.PI/2.5})]})]})}}}]);
//# sourceMappingURL=9601.4202c22a.chunk.js.map