{"version":3,"file":"static/js/5429.5d925dfd.chunk.js","mappings":"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","sources":["showcase/figma-noodles/Noodles.tsx","showcase/figma-noodles/Example.tsx","../node_modules/@react-three/drei/core/Float.js"],"sourcesContent":["import { useMemo, useState } from 'react'\nimport * as THREE from 'three'\nimport { useThree } from '@react-three/fiber'\nimport { Float, useGLTF } from '@react-three/drei'\nimport { Depth, Fresnel, LayerMaterial, Noise } from 'lamina'\n\nimport worms from './worms-transformed.glb'\n\nconst colorA = new THREE.Color('#2032A5').convertSRGBToLinear()\nconst colorB = new THREE.Color('#0F1C4D').convertSRGBToLinear()\nconst fresnel = new THREE.Color('#E7B473').convertSRGBToLinear()\n\nconst Noodle = () => {\n  const { viewport, camera } = useThree()\n  const { nodes }: any = useGLTF(worms)\n  const [geometry] = useState(() => nodes[`noodle_${Math.ceil(Math.random()*4)}`].geometry)\n  const [speed] = useState(() => 0.1 + Math.random() / 10)\n  const {x, y, z} = useMemo(() => {\n    const z = Math.random() * -30\n    const bounds = viewport.getCurrentViewport(camera, [0, 0, z])\n    const x = THREE.MathUtils.randFloatSpread(bounds.width)\n    const y = THREE.MathUtils.randFloatSpread(bounds.height * 0.75)\n    return {x, y, z}\n  }, [viewport])\n\n  return (\n    <Float position={[x, y, z]} speed={speed} rotationIntensity={10} floatIntensity={40} dispose={null}>\n      <mesh scale={5} geometry={geometry}>\n        <LayerMaterial color={colorA}>\n          <Depth colorA={colorA} colorB={colorB} alpha={0.5} mode='normal' near={0} far={2} origin={[1, 1, 1,]} />\n          <Depth colorA='purple' colorB={colorB} alpha={0.5} mode='add' near={3} far={2} origin={[1, 1, 1,]} />\n          <Fresnel mode='add' color={fresnel} intensity={0.3} power={2.5} bias={0.0} />\n          <Noise mapping='local' type='simplex' scale={1000} colorA='#ffaf40' colorB='black' mode='overlay' />\n        </LayerMaterial>\n      </mesh>\n    </Float>\n  )\n}\n\nconst Noodles = () => {\n  return (\n    <>\n      {Array.from({ length: 25 }, (_, i) => <Noodle key={i} />)}\n    </>\n  )\n}\n\nexport default Noodles\n\nuseGLTF.preload(worms)\n","import * as THREE from 'three'\nimport { Canvas, useFrame, useThree } from '@react-three/fiber'\nimport { Text } from '@react-three/drei'\nimport { Depth, LayerMaterial, Noise } from 'lamina'\n\nimport Noodles from './Noodles'\nimport kiMedium from './Ki-Medium.ttf'\n\nconst Bg = () => {\n  return (\n    <mesh scale={100}>\n      <boxGeometry args={[1, 1, 1]} />\n      <LayerMaterial side={THREE.BackSide}>\n        <Depth colorB='red' colorA='skyblue' alpha={1} mode='normal' near={130} far={200} origin={[100, 100, -100]} />\n        <Noise mapping='local' type='white' scale={1000} colorA='white' colorB='black' mode='subtract' alpha={0.2} />\n      </LayerMaterial>\n    </mesh>\n  )\n}\n\nconst Caption = ({ children }: any) => {\n  const { width } = useThree((state) => state.viewport)\n\n  return (\n    <Text\n      position={[0, 0, -5]}\n      lineHeight={0.8}\n      font={kiMedium}\n      fontSize={width / 8}\n      material-toneMapped={false}\n      anchorX='center'\n      anchorY='middle'>\n      {children}\n    </Text>\n  )\n}\n\nconst Rig = ({ v = new THREE.Vector3() }) => {\n  return useFrame((state) => {\n    state.camera.position.lerp(v.set(state.mouse.x / 2, state.mouse.y / 2, 10), 0.05)\n  })\n}\n\nconst Example = ({ children }: any) => {\n  return (\n    <>    \n      {children}\n      <Canvas camera={{ position: [0, 0, 10], fov: 22 }} dpr={[1, 2]}>\n        <Bg />\n        <Caption>{`THE\\nSEVENTY-TWO\\nNAMES\\nOF GOD.`}</Caption>\n        <Noodles />\n        <Rig />\n      </Canvas>\n    </>\n  )\n}\n\nexport default Example","import * as React from 'react';\nimport { useFrame } from '@react-three/fiber';\nimport mergeRefs from 'react-merge-refs';\n\nconst Float = /*#__PURE__*/React.forwardRef(({\n  children,\n  speed = 1,\n  rotationIntensity = 1,\n  floatIntensity = 1,\n  ...props\n}, forwardRef) => {\n  const ref = React.useRef(null);\n  const offset = React.useRef(Math.random() * 10000);\n  useFrame(state => {\n    const t = offset.current + state.clock.getElapsedTime();\n    ref.current.rotation.x = Math.cos(t / 4 * speed) / 8 * rotationIntensity;\n    ref.current.rotation.y = Math.sin(t / 4 * speed) / 8 * rotationIntensity;\n    ref.current.rotation.z = Math.sin(t / 4 * speed) / 20 * rotationIntensity;\n    ref.current.position.y = Math.sin(t / 4 * speed) / 10 * floatIntensity;\n  });\n  return /*#__PURE__*/React.createElement(\"group\", props, /*#__PURE__*/React.createElement(\"group\", {\n    ref: mergeRefs([ref, forwardRef])\n  }, children));\n});\n\nexport { Float };\n"],"names":["colorA","THREE","convertSRGBToLinear","colorB","fresnel","Noodle","useThree","viewport","camera","nodes","useGLTF","worms","useState","Math","ceil","random","geometry","speed","useMemo","z","bounds","getCurrentViewport","x","width","y","height","Float","position","rotationIntensity","floatIntensity","dispose","scale","color","alpha","mode","near","far","origin","intensity","power","bias","mapping","type","Array","from","length","_","i","Bg","args","side","Caption","children","state","Text","lineHeight","font","kiMedium","fontSize","anchorX","anchorY","Rig","v","useFrame","lerp","set","mouse","fov","dpr","React","forwardRef","props","ref","offset","t","current","clock","getElapsedTime","rotation","cos","sin","mergeRefs"],"sourceRoot":""}